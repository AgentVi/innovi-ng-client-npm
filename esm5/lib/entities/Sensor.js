import { __extends } from "tslib";
import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
var Sensor = /** @class */ (function (_super) {
    __extends(Sensor, _super);
    function Sensor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Sensor;
}(BaseEntity));
export { Sensor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFnZW50dmkvbmctY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvZW50aXRpZXMvU2Vuc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFTQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQ7O0VBRUU7QUFDRjtJQUE0QiwwQkFBVTtJQUF0Qzs7SUE2RkEsQ0FBQztJQUFELGFBQUM7QUFBRCxDQUFDLEFBN0ZELENBQTRCLFVBQVUsR0E2RnJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vuc29yU3RhdHVzQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclN0YXR1c0NvZGUnO1xuaW1wb3J0IHsgU2Vuc29yUmVzb2x1dGlvbkNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JSZXNvbHV0aW9uQ29kZSc7XG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAnLi4vY29tbW9uL0Nvb3JkaW5hdGUnO1xuaW1wb3J0IHsgVGhyZXNob2xkcyB9IGZyb20gJy4uL2NvbW1vbi9UaHJlc2hvbGRzJztcbmltcG9ydCB7IFNlbnNvclR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yVHlwZUNvZGUnO1xuaW1wb3J0IHsgU3RyZWFtVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TdHJlYW1UeXBlQ29kZSc7XG5pbXBvcnQgeyBGb3ZHZW9BdHRyaWJ1dGVzIH0gZnJvbSAnLi4vY29tbW9uL0Zvdkdlb0F0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgU3RyaW5nS2V5VmFsdWUgfSBmcm9tICcuLi9jb21tb24vU3RyaW5nS2V5VmFsdWUnO1xuaW1wb3J0IHsgU2Vuc29yRGVidWdJbmZvIH0gZnJvbSAnLi4vY29tbW9uL1NlbnNvckRlYnVnSW5mbyc7XG5pbXBvcnQgeyBCYXNlRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvQmFzZUVudGl0eSc7XG5cbi8qIFxuICAgU2Vuc29yIHR5cGUgXG4qL1xuZXhwb3J0IGNsYXNzIFNlbnNvciBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIEFjY291bnQgSWQgXG4gICAgcHVibGljIGFjY291bnRJZDogc3RyaW5nO1xuIFxuICAgIC8vIEZvbGRlciBJZCAoZW1wdHkgZm9yIHJvb3QgZm9sZGVyKSBcbiAgICBwdWJsaWMgZm9sZGVySWQ6IHN0cmluZztcbiBcbiAgICAvLyBBcHBsaWFuY2UgSWQgXG4gICAgcHVibGljIGFwcGxpYW5jZUlkOiBzdHJpbmc7XG4gXG4gICAgLy8gQWdlbnQgSWQgKFJlbGV2YW50IGZvciBuZXcgcGlwZWxpbmUgb25seSkgXG4gICAgcHVibGljIGFnZW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFNlbnNvciB0eXBlOiBDQ0QgfCBUSEVSTUFMIFxuICAgIHB1YmxpYyB0eXBlOiBTZW5zb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3Igc3RhdHVzOiBVTkRFRklORUQgfCBBQ1RJVkUgfCBXQVJOSU5HIHwgRVJST1IgfCBJTkFDVElWRSB8IFNVU1BFTkRFRCB8IFBFTkRJTkcgXG4gICAgcHVibGljIHN0YXR1czogU2Vuc29yU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVhbCB0aW1lIHN0YXRlIGJpdCBtYXNrIGZsYWdzIFxuICAgIHB1YmxpYyBzdGF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gd2FzIHRoZSBsYXN0IHN0YXRlIHJlcG9ydCB1cGRhdGUgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBzdGF0ZVJlcG9ydGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBTZW5zb3IgdmlkZW8gc3RyZWFtIHR5cGU6IFVOREVGSU5FRCB8IFJUU1AgfCBPTlZJRiB8IENMSVAgfCBSVFAgfCBNVUxUSUNBU1QgXG4gICAgcHVibGljIHN0cmVhbVR5cGU6IFN0cmVhbVR5cGVDb2RlO1xuIFxuICAgIC8vIFNlbnNvciByZXNvbHV0aW9uIChpbWFnZSBxdWFsaXR5KTogTE9XICgwKSB8IE1FRElVTSAoMSkgfCBISUdIICgyKSBcbiAgICBwdWJsaWMgaW1hZ2VSZXNvbHV0aW9uOiBTZW5zb3JSZXNvbHV0aW9uQ29kZTtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBpcyByZWNvcmRpbmcgdmlkZW8gXG4gICAgcHVibGljIHJlY29yZGluZzogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBzaG91bGQgc2VuZCBtZXRhZGF0YSBcbiAgICBwdWJsaWMgbWV0YWRhdGE6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBhbm9tYWx5IGRldGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIHNlbnNvciBcbiAgICBwdWJsaWMgYW5vbWFseURldGVjdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBNaW5pbWFsIHRpbWUgaW50ZXJ2YWwgYmV0d2VlbiBhbGFybXMgKGluIHNlY29uZHMpIC0gMCBmb3Igbm8gaW50ZXJ2YWwgXG4gICAgcHVibGljIGFsYXJtSW50ZXJ2YWw6IG51bWJlcjtcbiBcbiAgICAvLyBNYXggbnVtYmVyIG9mIGJvdW5kaW5nIGJveCBwZXIgZnJhbWUgXG4gICAgcHVibGljIG1heEJCb3hQZXJGcmFtZTogbnVtYmVyO1xuIFxuICAgIC8vIE1heCBmcmFtZSByYXRlIFxuICAgIHB1YmxpYyBtYXhGcmFtZVJhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBWaWRlbyBzdHJlYW0gc291cmNlIFVSSSBcbiAgICBwdWJsaWMgc3RyZWFtVXJpOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIGdlbyBsb2NhdGlvbiAoV0dTLTg0IGNvb3JkaW5hdGUgc3lzdGVtKSBcbiAgICBwdWJsaWMgZ2VvTG9jYXRpb246IENvb3JkaW5hdGU7XG4gXG4gICAgLy8gU2Vuc29yIEZPViBhemltdXRoICgwIC0gMzU5KSBcbiAgICBwdWJsaWMgYXppbXV0aDogbnVtYmVyO1xuIFxuICAgIC8vIEZpZWxkIG9mIFZpZXcgR2VvIGF0dHJpYnV0ZXMgKHVzZWQgZm9yIEZPViB0byBXR1MtODQgdHJhbnNmb3JtYXRpb25zKSBcbiAgICBwdWJsaWMgZm92QXR0cmlidXRlczogRm92R2VvQXR0cmlidXRlcztcbiBcbiAgICAvLyBFeHRlcm5hbCBpZCAoY2FtZXJhIGlkIGluIGV4dGVybmFsIHN5c3RlbSkgXG4gICAgcHVibGljIGV4dGVybmFsSWQ6IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGRlZmluZWQgdGFncyAobGlzdCBvZiBrZXktdmFsdWUgcGFpcnMpIFxuICAgIHB1YmxpYyB0YWdzOiBTdHJpbmdLZXlWYWx1ZVtdO1xuIFxuICAgIC8vIERldmljZSBwYXRoIGluIHRoZSBhY2NvdW50IGhpZXJhcmNoeSBcbiAgICBwdWJsaWMgcGF0aDogc3RyaW5nO1xuIFxuICAgIC8vIEhlYWx0aCBub3RpZmljYXRpb25zIHRocmVzaG9sZHMgXG4gICAgcHVibGljIGhlYWx0aFRocmVzaG9sZHM6IFRocmVzaG9sZHM7XG4gXG4gICAgLy8gU2Vuc29yIGRlYnVnIGluZm9ybWF0aW9uIGZsYWdzIFxuICAgIHB1YmxpYyBkZWJ1Z0luZm86IFNlbnNvckRlYnVnSW5mbztcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gXG4gICAgLy8gRW50aXR5IGRvY3VtZW50IHR5cGUgKHN5c3RlbSBmaWVsZCkgXG4gICAgcHVibGljIF90eXBlOiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgY3JlYXRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgdXBkYXRlZE9uOiBudW1iZXI7XG4gXG5cbn1cblxuXG4iXX0=