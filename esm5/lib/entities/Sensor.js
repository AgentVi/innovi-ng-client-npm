import { __extends } from "tslib";
import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
var Sensor = /** @class */ (function (_super) {
    __extends(Sensor, _super);
    function Sensor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Sensor;
}(BaseEntity));
export { Sensor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFnZW50dmkvbmctY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvZW50aXRpZXMvU2Vuc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFLQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFNcEQ7O0VBRUU7QUFDRjtJQUE0QiwwQkFBVTtJQUF0Qzs7SUF5R0EsQ0FBQztJQUFELGFBQUM7QUFBRCxDQUFDLEFBekdELENBQTRCLFVBQVUsR0F5R3JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RyZWFtVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TdHJlYW1UeXBlQ29kZSc7XG5pbXBvcnQgeyBTZW5zb3JSZXNvbHV0aW9uQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclJlc29sdXRpb25Db2RlJztcbmltcG9ydCB7IENvb3JkaW5hdGUgfSBmcm9tICcuLi9jb21tb24vQ29vcmRpbmF0ZSc7XG5pbXBvcnQgeyBTdHJpbmdLZXlWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi9TdHJpbmdLZXlWYWx1ZSc7XG5pbXBvcnQgeyBUaHJlc2hvbGRzIH0gZnJvbSAnLi4vY29tbW9uL1RocmVzaG9sZHMnO1xuaW1wb3J0IHsgQmFzZUVudGl0eSB9IGZyb20gJy4uL2VudGl0aWVzL0Jhc2VFbnRpdHknO1xuaW1wb3J0IHsgU2Vuc29yU3RhdHVzQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclN0YXR1c0NvZGUnO1xuaW1wb3J0IHsgRm92R2VvQXR0cmlidXRlcyB9IGZyb20gJy4uL2NvbW1vbi9Gb3ZHZW9BdHRyaWJ1dGVzJztcbmltcG9ydCB7IFNlbnNvckRlYnVnSW5mbyB9IGZyb20gJy4uL2NvbW1vbi9TZW5zb3JEZWJ1Z0luZm8nO1xuaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5cbi8qIFxuICAgU2Vuc29yIHR5cGUgXG4qL1xuZXhwb3J0IGNsYXNzIFNlbnNvciBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIEFjY291bnQgSWQgXG4gICAgcHVibGljIGFjY291bnRJZDogc3RyaW5nO1xuIFxuICAgIC8vIEZvbGRlciBJZCAoZW1wdHkgZm9yIHJvb3QgZm9sZGVyKSBcbiAgICBwdWJsaWMgZm9sZGVySWQ6IHN0cmluZztcbiBcbiAgICAvLyBBcHBsaWFuY2UgSWQgXG4gICAgcHVibGljIGFwcGxpYW5jZUlkOiBzdHJpbmc7XG4gXG4gICAgLy8gQWdlbnQgSWQgKFJlbGV2YW50IGZvciBuZXcgcGlwZWxpbmUgb25seSkgXG4gICAgcHVibGljIGFnZW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFNlbnNvciB0eXBlOiBDQ0QgfCBUSEVSTUFMIFxuICAgIHB1YmxpYyB0eXBlOiBTZW5zb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3Igc3RhdHVzOiBVTkRFRklORUQgfCBBQ1RJVkUgfCBXQVJOSU5HIHwgRVJST1IgfCBJTkFDVElWRSB8IFNVU1BFTkRFRCB8IFBFTkRJTkcgXG4gICAgcHVibGljIHN0YXR1czogU2Vuc29yU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVhbCB0aW1lIHN0YXRlIGJpdCBtYXNrIGZsYWdzIFxuICAgIHB1YmxpYyBzdGF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gd2FzIHRoZSBsYXN0IHN0YXRlIHJlcG9ydCB1cGRhdGUgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBzdGF0ZVJlcG9ydGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBTZW5zb3IgdmlkZW8gc3RyZWFtIHR5cGU6IFVOREVGSU5FRCB8IFJUU1AgfCBPTlZJRiB8IENMSVAgfCBSVFAgfCBNVUxUSUNBU1QgXG4gICAgcHVibGljIHN0cmVhbVR5cGU6IFN0cmVhbVR5cGVDb2RlO1xuIFxuICAgIC8vIFNlbnNvciByZXNvbHV0aW9uIChpbWFnZSBxdWFsaXR5KTogTE9XICgwKSB8IE1FRElVTSAoMSkgfCBISUdIICgyKSBcbiAgICBwdWJsaWMgaW1hZ2VSZXNvbHV0aW9uOiBTZW5zb3JSZXNvbHV0aW9uQ29kZTtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBpcyByZWNvcmRpbmcgdmlkZW8gXG4gICAgcHVibGljIHJlY29yZGluZzogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBzaG91bGQgc2VuZCBtZXRhZGF0YSBcbiAgICBwdWJsaWMgbWV0YWRhdGE6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBhbm9tYWx5IGRldGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIHNlbnNvciBcbiAgICBwdWJsaWMgYW5vbWFseURldGVjdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBNaW5pbWFsIHRpbWUgaW50ZXJ2YWwgYmV0d2VlbiBhbGFybXMgKGluIHNlY29uZHMpIC0gMCBmb3Igbm8gaW50ZXJ2YWwgXG4gICAgcHVibGljIGFsYXJtSW50ZXJ2YWw6IG51bWJlcjtcbiBcbiAgICAvLyBNYXggbnVtYmVyIG9mIGJvdW5kaW5nIGJveCBwZXIgZnJhbWUgXG4gICAgcHVibGljIG1heEJCb3hQZXJGcmFtZTogbnVtYmVyO1xuIFxuICAgIC8vIE1heCBmcmFtZSByYXRlIFxuICAgIHB1YmxpYyBtYXhGcmFtZVJhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBWaWRlbyBzdHJlYW0gc291cmNlIFVSSSwgZm9ybWF0IGFuZCBzY2hlbWVzIGlzIGRlcml2ZWQgZnJvbSB0aGUgc3RyZWFtIHR5cGUsIHNlZSBTdHJlYW1UeXBlQ29kZSkgXG4gICAgcHVibGljIHN0cmVhbVVyaTogc3RyaW5nO1xuIFxuICAgIC8vIFNlbnNvciBnZW8gbG9jYXRpb24gKFdHUy04NCBjb29yZGluYXRlIHN5c3RlbSkgXG4gICAgcHVibGljIGdlb0xvY2F0aW9uOiBDb29yZGluYXRlO1xuIFxuICAgIC8vIFNlbnNvciBGT1YgYXppbXV0aCAoMCAtIDM1OSkgXG4gICAgcHVibGljIGF6aW11dGg6IG51bWJlcjtcbiBcbiAgICAvLyBGaWVsZCBvZiBWaWV3IEdlbyBhdHRyaWJ1dGVzICh1c2VkIGZvciBGT1YgdG8gV0dTLTg0IHRyYW5zZm9ybWF0aW9ucykgXG4gICAgcHVibGljIGZvdkF0dHJpYnV0ZXM6IEZvdkdlb0F0dHJpYnV0ZXM7XG4gXG4gICAgLy8gRXh0ZXJuYWwgaWQgKGNhbWVyYSBpZCBpbiBleHRlcm5hbCBzeXN0ZW0pIFxuICAgIHB1YmxpYyBleHRlcm5hbElkOiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBkZWZpbmVkIHRhZ3MgKGxpc3Qgb2Yga2V5LXZhbHVlIHBhaXJzKSBcbiAgICBwdWJsaWMgdGFnczogU3RyaW5nS2V5VmFsdWVbXTtcbiBcbiAgICAvLyBEZXZpY2UgcGF0aCBpbiB0aGUgYWNjb3VudCBoaWVyYXJjaHkgXG4gICAgcHVibGljIHBhdGg6IHN0cmluZztcbiBcbiAgICAvLyBIZWFsdGggbm90aWZpY2F0aW9ucyB0aHJlc2hvbGRzIFxuICAgIHB1YmxpYyBoZWFsdGhUaHJlc2hvbGRzOiBUaHJlc2hvbGRzO1xuIFxuICAgIC8vIFNlbnNvciBkZWJ1ZyBpbmZvcm1hdGlvbiBmbGFncyBcbiAgICBwdWJsaWMgZGVidWdJbmZvOiBTZW5zb3JEZWJ1Z0luZm87XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgYWdlbnQgc2hvdWxkIHN5bmMgdGhlIGZyYW1lIHRpbWVzdGFtcHMgZnJvbSB0aGUgUlRTUCBzdHJlYW0gXG4gICAgcHVibGljIHN5bmNUaW1lVG9TdHJlYW06IGJvb2xlYW47XG4gXG4gICAgLy8gU3RyZWFtIGNvZGVjIChpLmUuIGguMjY0LCBoLjI2NSBldGMpIFxuICAgIHB1YmxpYyBjb2RlYzogc3RyaW5nO1xuIFxuICAgIC8vIFN0cmVhbSByZXNvbHV0aW9uIChpLmUuIDEyODB4NzIwLCAxOTIweDEwODAgZXRjKSBcbiAgICBwdWJsaWMgcmVzb2x1dGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIFN0cmVhbSBmcmFtZXJhdGUgKGZyYW1lcyBwZXIgc2Vjb25kKSBcbiAgICBwdWJsaWMgZnJhbWVyYXRlOiBudW1iZXI7XG4gXG4gICAgLy8gRW50aXR5IElkIFxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuIFxuICAgIC8vIEVudGl0eSBkb2N1bWVudCB0eXBlIChzeXN0ZW0gZmllbGQpIFxuICAgIHB1YmxpYyBfdHlwZTogc3RyaW5nO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgY3JlYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIGNyZWF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgdXBkYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIHVwZGF0ZWRPbjogbnVtYmVyO1xuIFxuXG59XG5cblxuIl19