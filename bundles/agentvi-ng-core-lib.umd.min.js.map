{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@agentvi/ng-core-lib/lib/common/AbsoluteTimeFrame.ts","ng://@agentvi/ng-core-lib/lib/common/AccountRole.ts","ng://@agentvi/ng-core-lib/lib/common/AccountTypeSummary.ts","ng://@agentvi/ng-core-lib/lib/common/AnalysisResult.ts","ng://@agentvi/ng-core-lib/lib/common/AnomalyEventInfo.ts","ng://@agentvi/ng-core-lib/lib/common/ApplianceConfiguration.ts","ng://@agentvi/ng-core-lib/lib/common/ApplianceRegistration.ts","ng://@agentvi/ng-core-lib/lib/common/ApplianceStatusDataPoint.ts","ng://@agentvi/ng-core-lib/lib/common/ApplianceStatusTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/common/ApplianceStatusTimestamped.ts","ng://@agentvi/ng-core-lib/lib/common/BoundingBox.ts","ng://@agentvi/ng-core-lib/lib/common/BoundingMap.ts","ng://@agentvi/ng-core-lib/lib/common/Coordinate.ts","ng://@agentvi/ng-core-lib/lib/common/Dimension.ts","ng://@agentvi/ng-core-lib/lib/common/DiskInfo.ts","ng://@agentvi/ng-core-lib/lib/common/DockerCredentials.ts","ng://@agentvi/ng-core-lib/lib/common/EventAction.ts","ng://@agentvi/ng-core-lib/lib/common/EventCountDataPoint.ts","ng://@agentvi/ng-core-lib/lib/common/EventCountTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/common/FovGeoAttributes.ts","ng://@agentvi/ng-core-lib/lib/common/GeoCircle.ts","ng://@agentvi/ng-core-lib/lib/common/GeoControlPoint.ts","ng://@agentvi/ng-core-lib/lib/common/GeoControlPoints.ts","ng://@agentvi/ng-core-lib/lib/common/GeoPolygon.ts","ng://@agentvi/ng-core-lib/lib/common/GeoReferenceData.ts","ng://@agentvi/ng-core-lib/lib/common/InnoviClientConfig.ts","ng://@agentvi/ng-core-lib/lib/common/LoginData.ts","ng://@agentvi/ng-core-lib/lib/common/LoginParams.ts","ng://@agentvi/ng-core-lib/lib/common/ObjectColor.ts","ng://@agentvi/ng-core-lib/lib/common/ObjectInfo.ts","ng://@agentvi/ng-core-lib/lib/common/ObjectInstance.ts","ng://@agentvi/ng-core-lib/lib/common/ObjectTypeNode.ts","ng://@agentvi/ng-core-lib/lib/common/Point.ts","ng://@agentvi/ng-core-lib/lib/common/Recurrent.ts","ng://@agentvi/ng-core-lib/lib/common/RecurrentTimeFrame.ts","ng://@agentvi/ng-core-lib/lib/common/RuleDefault.ts","ng://@agentvi/ng-core-lib/lib/common/RulePolygon.ts","ng://@agentvi/ng-core-lib/lib/common/RuleSpec.ts","ng://@agentvi/ng-core-lib/lib/common/SearchObject.ts","ng://@agentvi/ng-core-lib/lib/common/Sensitivity.ts","ng://@agentvi/ng-core-lib/lib/common/SensorAnomalyInfo.ts","ng://@agentvi/ng-core-lib/lib/common/SensorAnomalyRuleInfo.ts","ng://@agentvi/ng-core-lib/lib/common/SensorStatusTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/common/SensorStatusTimestamped.ts","ng://@agentvi/ng-core-lib/lib/common/StringIntValue.ts","ng://@agentvi/ng-core-lib/lib/common/StringKeyValue.ts","ng://@agentvi/ng-core-lib/lib/common/TimeFrame.ts","ng://@agentvi/ng-core-lib/lib/common/TreeItem.ts","ng://@agentvi/ng-core-lib/lib/common/TreeNode.ts","ng://@agentvi/ng-core-lib/lib/common/UserAccountInfo.ts","ng://@agentvi/ng-core-lib/lib/common/UserInvitation.ts","ng://@agentvi/ng-core-lib/lib/common/UserRegistration.ts","ng://@agentvi/ng-core-lib/lib/entities/BaseEntity.ts","ng://@agentvi/ng-core-lib/lib/entities/Account.ts","ng://@agentvi/ng-core-lib/lib/entities/Agent.ts","ng://@agentvi/ng-core-lib/lib/entities/ApiKey.ts","ng://@agentvi/ng-core-lib/lib/entities/Appliance.ts","ng://@agentvi/ng-core-lib/lib/entities/ApplianceCapabilities.ts","ng://@agentvi/ng-core-lib/lib/entities/ApplianceCommand.ts","ng://@agentvi/ng-core-lib/lib/entities/ApplianceStatus.ts","ng://@agentvi/ng-core-lib/lib/entities/AuditLog.ts","ng://@agentvi/ng-core-lib/lib/entities/Calendar.ts","ng://@agentvi/ng-core-lib/lib/entities/ComponentConfiguration.ts","ng://@agentvi/ng-core-lib/lib/entities/Configuration.ts","ng://@agentvi/ng-core-lib/lib/entities/ConfigurationTemplate.ts","ng://@agentvi/ng-core-lib/lib/entities/ConfigurationVersion.ts","ng://@agentvi/ng-core-lib/lib/entities/Event.ts","ng://@agentvi/ng-core-lib/lib/entities/EventStatistics.ts","ng://@agentvi/ng-core-lib/lib/entities/Feature.ts","ng://@agentvi/ng-core-lib/lib/entities/FeaturesGroup.ts","ng://@agentvi/ng-core-lib/lib/entities/Folder.ts","ng://@agentvi/ng-core-lib/lib/entities/IntegrationAction.ts","ng://@agentvi/ng-core-lib/lib/entities/IntegrationTarget.ts","ng://@agentvi/ng-core-lib/lib/entities/License.ts","ng://@agentvi/ng-core-lib/lib/entities/Preset.ts","ng://@agentvi/ng-core-lib/lib/entities/ReportDefinition.ts","ng://@agentvi/ng-core-lib/lib/entities/Rule.ts","ng://@agentvi/ng-core-lib/lib/entities/Schedule.ts","ng://@agentvi/ng-core-lib/lib/entities/ScheduledReport.ts","ng://@agentvi/ng-core-lib/lib/entities/SearchDefinition.ts","ng://@agentvi/ng-core-lib/lib/entities/Sensor.ts","ng://@agentvi/ng-core-lib/lib/entities/SensorAnalysisResults.ts","ng://@agentvi/ng-core-lib/lib/entities/SensorDebugInfo.ts","ng://@agentvi/ng-core-lib/lib/entities/SensorHealth.ts","ng://@agentvi/ng-core-lib/lib/entities/SensorStatus.ts","ng://@agentvi/ng-core-lib/lib/entities/UpdateStatus.ts","ng://@agentvi/ng-core-lib/lib/entities/User.ts","ng://@agentvi/ng-core-lib/lib/entities/Verification.ts","ng://@agentvi/ng-core-lib/lib/enums/AccountRoleCode.ts","ng://@agentvi/ng-core-lib/lib/enums/AccountStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/AccountTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/AgentStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ApplianceCommandCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ApplianceStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/BehaviorTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ColorCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ColorTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/CommandStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/DayOfWeekCode.ts","ng://@agentvi/ng-core-lib/lib/enums/EventStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/IntegrationTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/LineCrossDirectionCode.ts","ng://@agentvi/ng-core-lib/lib/enums/MapClientCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ObjectTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ProductTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/RuleTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SearchScopeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SearchTimeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SensorConfigChangeMask.ts","ng://@agentvi/ng-core-lib/lib/enums/SensorResolutionCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SensorStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SensorStatusMask.ts","ng://@agentvi/ng-core-lib/lib/enums/SensorTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/SeverityTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/StreamTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/TimeUnitCode.ts","ng://@agentvi/ng-core-lib/lib/enums/UserStatusCode.ts","ng://@agentvi/ng-core-lib/lib/enums/UserTypeCode.ts","ng://@agentvi/ng-core-lib/lib/enums/VisualQualityCode.ts","ng://@agentvi/ng-core-lib/lib/enums/ZoneTypeCode.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceChangeGroupsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceChangeStatusRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceChangeTypeRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AccountsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ActionResponse.ts","ng://@agentvi/ng-core-lib/lib/messages/AnomalyServiceFindEventsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AnomalyServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AnomalyServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AnomalyServiceUpdateRuleRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ApiKeyIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ApplianceCommandIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ApplianceIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceAddSensorRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceChangeConfigurationRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceChangeFolderRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceChangeMachineIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceFindSensorsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceGetCommandsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceRegisterApplianceRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceSetCommandRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AppliancesServiceStatusOvertimeRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AuditLogIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/AuditLogServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarsServiceFolderIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/CalendarsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ChangeGeoAreaRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ChangeGeoLocationRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ChangePasswordRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ConfigurationIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ConfigurationTargetRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ConfigurationTemplateIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ConfigurationVersionIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EmptyRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponse.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfAccount.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfAccountTypeSummary.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfApiKey.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfAppliance.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfApplianceCommand.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfApplianceConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfAuditLog.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfCalendar.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfComponentConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfEvent.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfFeature.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfFeaturesGroup.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfFolder.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfIntegration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfReportDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfRule.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfRuleSpec.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfSchedule.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfScheduledReport.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfSearchDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfSensor.ts","ng://@agentvi/ng-core-lib/lib/messages/EntitiesResponseOfSensorHealth.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponse.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfAccount.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfApiKey.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfAppliance.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfApplianceStatusTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfAuditLog.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfCalendar.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfComponentConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfConfigurationTemplate.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfConfigurationVersion.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfCoordinate.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfEvent.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfEventCountTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfFeature.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfFeaturesGroup.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfFolder.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfGeoReferenceData.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfInnoviClientConfig.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfIntegration.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfLicense.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfLoginData.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfReportDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfRule.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSchedule.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfScheduledReport.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSearchDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSensor.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSensorAnalysisResults.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSensorAnomalyInfo.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSensorHealth.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfSensorStatusTimeSeries.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfTreeNode.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfUser.ts","ng://@agentvi/ng-core-lib/lib/messages/EntityResponseOfUserAccountInfo.ts","ng://@agentvi/ng-core-lib/lib/messages/EventIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceFindInAreaRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceSetClipPathRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceSetImagePathRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceSetStatusRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/EventsServiceStatisticsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeatureIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeatureIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupsServiceSetFeaturesRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupsServiceSetNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesGroupsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FeaturesServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FolderIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FolderIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceChangeGeoAreaRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceChangeGeoLocationRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceChangeParentRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceChangeTimezoneRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/FoldersServiceGetHierarchyRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/GeoServicesReferenceRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/IntegrationIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/IntegrationIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/IntegrationsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/IntegrationsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/IntegrationsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponse.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfAccount.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfAnomalyEventInfo.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfAppliance.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfAuditLog.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfCalendar.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfComponentConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfConfiguration.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfConfigurationTemplate.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfConfigurationVersion.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfEvent.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfFolder.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfIntegrationTarget.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfObjectInfo.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfReportDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfRule.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfSchedule.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfSearchDefinition.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfSensor.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfSensorAnalysisResults.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfTreeItem.ts","ng://@agentvi/ng-core-lib/lib/messages/QueryResponseOfUser.ts","ng://@agentvi/ng-core-lib/lib/messages/ReportIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ReportIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ReportsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ReportsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ReportsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/RuleIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/RuleIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/RulesServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/RulesServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/RulesServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduleIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduleIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduledReportIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduledReportIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduledReportsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduledReportsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/ScheduledReportsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SchedulesServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SchedulesServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SchedulesServiceFolderIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SchedulesServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchServiceExecuteRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SearchServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorAnalysisIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceChangeFolderRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceChangeFovRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceChangeGeoLocationRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceChangeStatusRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceSetRefImageRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceStatusOvertimeRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SensorsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/StreamResponse.ts","ng://@agentvi/ng-core-lib/lib/messages/SysAppliancesServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysAppliancesServiceGetCommandsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceCreateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceCreateTemplateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceCreateVersionRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceDeleteVersionRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceFindTemplateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceUpdateTemplateRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysConfigurationsServiceUpdateVersionRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysEventIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysEventsServiceFindInAreaRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysEventsServiceStatisticsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysKeysServiceCreateApiKeyRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/SysSensorsServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/TokenRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserByEmailRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserIdRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserIdsRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceChangeMobileRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceChangePasswordRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceCheckPasswordRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceLoginRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceResetPasswordRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceSendVerificationRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceSwitchAccountRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UserServiceVerifyLoginRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeDefaultAccountRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeMobileRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeNameRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeRoleRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeStatusRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceChangeTypeRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceFindRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceInviteRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceSetRolesRequest.ts","ng://@agentvi/ng-core-lib/lib/messages/UsersServiceUpdateRequest.ts","ng://@agentvi/ng-core-lib/utils/localStorage-util.ts","ng://@agentvi/ng-core-lib/utils/rest-util.ts","ng://@agentvi/ng-core-lib/config.ts","ng://@agentvi/ng-core-lib/lib/services/accountsService.ts","ng://@agentvi/ng-core-lib/lib/services/anomalyService.ts","ng://@agentvi/ng-core-lib/lib/services/appliancesService.ts","ng://@agentvi/ng-core-lib/lib/services/auditLogService.ts","ng://@agentvi/ng-core-lib/lib/services/calendarsService.ts","ng://@agentvi/ng-core-lib/lib/services/eventsService.ts","ng://@agentvi/ng-core-lib/lib/services/foldersService.ts","ng://@agentvi/ng-core-lib/lib/services/geoService.ts","ng://@agentvi/ng-core-lib/lib/services/healthCheckService.ts","ng://@agentvi/ng-core-lib/lib/services/integrationsService.ts","ng://@agentvi/ng-core-lib/lib/services/reportsService.ts","ng://@agentvi/ng-core-lib/lib/services/rulesService.ts","ng://@agentvi/ng-core-lib/lib/services/scheduledReportsService.ts","ng://@agentvi/ng-core-lib/lib/services/schedulesService.ts","ng://@agentvi/ng-core-lib/lib/services/searchService.ts","ng://@agentvi/ng-core-lib/lib/services/sensorsService.ts","ng://@agentvi/ng-core-lib/lib/services/userService.ts","ng://@agentvi/ng-core-lib/lib/services/usersService.ts","ng://@agentvi/ng-core-lib/lib/services/sysAccountsService.ts","ng://@agentvi/ng-core-lib/lib/services/sysAppliancesService.ts","ng://@agentvi/ng-core-lib/lib/services/sysConfigurationsService.ts","ng://@agentvi/ng-core-lib/lib/services/sysEventsService.ts","ng://@agentvi/ng-core-lib/lib/services/sysFeaturesGroupsService.ts","ng://@agentvi/ng-core-lib/lib/services/sysFeaturesService.ts","ng://@agentvi/ng-core-lib/lib/services/sysKeysService.ts","ng://@agentvi/ng-core-lib/lib/services/sysSensorsService.ts","ng://@agentvi/ng-core-lib/lib/services/sysSystemService.ts","ng://@agentvi/ng-core-lib/lib/services/sysUsersService.ts","ng://@agentvi/ng-core-lib/lib/services/services.export.ts","ng://@agentvi/ng-core-lib/core-lib.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","name","startTime","endTime","active","accountId","role","type","typeName","accounts","accountsPercentage","channels","channelsPercentage","devices","devicesPercentage","modelType","resultsPath","completedOn","eventId","objectIds","status","configurationId","description","currentVersion","versions","folderId","machineId","productType","configurationVersionId","cpuAvg","cpuMax","ram","loadAvg","label","data","timestamp","maxX","maxY","minX","minY","maxLat","maxLng","minLat","minLng","latitude","longitude","altitude","width","height","totalBytes","usedBytes","usage","dockerUser","dockerPwd","protocol","operation","host","port","user","password","url","headers","recipients","subject","body","clipRequired","geoArea","visibleArea","affineCoefficients","controlPoints","center","radius","point","coordinate","points","vertices","coordinates","coefficients","mapClient","mapKey","wMS","accessToken","accountRole","userId","userName","userEmail","userType","userStatus","changePassword","email","colorType","primary","primaryConf","secondaryColor","secondaryConf","objectId","sensorId","birthTime","instances","objectType","confidence","colors","direction","dimension","boundingBox","speed","size","position","location","objectTypeCode","children","x","y","period","daysOfWeek","action","min","max","defaultValue","lineCrossDir","ruleType","ruleTypeName","behaviorTypes","objectTypes","isLineDrawing","dwellTime","peopleInGroup","objectHierarchy","color","identifier","events","timeUnit","results","ruleInfo","sensitivity","mask","key","from","to","itemId","id","parentId","item","rootNode","features","mobile","defaultAccount","tempPassword","verifyByEmail","docType","createdOn","updatedOn","_type","Account","tslib_1.__extends","BaseEntity","Agent","ApiKey","Appliance","serialNumber","deviceModel","cpuModel","uuid","ip","dockerVersion","kernelVersion","totalRam","disks","commandInterval","statusInterval","dockerCredentials","configurationVersion","ApplianceCommand","ApplianceStatus","AuditLog","Calendar","dockerImage","variables","Configuration","ConfigurationTemplate","ConfigurationVersion","Event","EventStatistics","Feature","FeaturesGroup","Folder","IntegrationAction","IntegrationTarget","License","Preset","ReportDefinition","Rule","Schedule","ScheduledReport","SearchDefinition","Sensor","SensorAnalysisResults","saveCrops","saveFrames","saveEventImages","SensorHealth","SensorStatus","UpdateStatus","User","Verification","UNDEFINED","ADMIN","SUPERVISOR","OPERATOR","USER","INSTALLER","ACTIVE","SUSPENDED","DELETED","DEMO","TRIAL","PARTNER","CUSTOMER","WARNING","ERROR","INACTIVE","PENDING","GET_CAPABILITIES","SET_COMPONENTS","REMOVE_COMPONENTS","RESTART_COMPONENTS","LIST_CONTAINERS","SEND_LOGS","SEND_STATUS","RESET_CREDENTIALS","REBOOT_HOST","FACTORY_RESET","OPEN_SSH","CLOSE_SSH","UNREGISTERED","INNOVI_CROSSING","INNOVI_MOVING","INNOVI_STOPPED","INNOVI_OCCUPANCY","INNOVI_GROUPING","INNOVI_MASK_IGNORE","INNOVI_MASK_SHUTDOWN","INNOVI_ANOMALY","HARD_HAT_EXISTS","HARD_HAT_NOT_EXISTS","TRASH_EXISTS","TRASH_NOT_EXISTS","MCC_EXISTS","MCC_NOT_EXISTS","NONE","UNKNOWN","MULTICOLORED","WHITE","BLACK","GRAY","BLUE","BROWN","GREEN","YELLOW","ORANGE","RED","PINK","PURPLE","CYAN","SILVER","BODY","UPPER_BODY","LOWER_BODY","HAT","HAIR","BAG","EXECUTING","COMPLETED","FAILED","SUN","MON","TUE","WED","THU","FRI","SAT","NEW","OPEN","CLOSED_TRUE","CLOSED_FALSE","CLOSED_IRRELEVANT","SMTP","IMMIX","SENTINEL","WEBHOOK","MILESTONE","GENETEC","IN","OUT","BI","GOOGLE","LEAFLET","ESRI","MAPINFO","INNOVI_UNKNOWNS","INNOVI_UNKNOWNS_UNKNOWN","INNOVI_UNKNOWNS_VEGETATION","INNOVI_UNKNOWNS_CLOUD","INNOVI_PEOPLE","INNOVI_PEOPLE_PERSON_STANDING","INNOVI_PEOPLE_PERSON_ON_THE_GROUND","INNOVI_PEOPLE_PERSON_OVERHEAD","INNOVI_VEHICLE","INNOVI_VEHICLE_CAR","INNOVI_VEHICLE_BUS","INNOVI_VEHICLE_SCHOOL_BUS","INNOVI_VEHICLE_MINI_BUS","INNOVI_VEHICLE_PICKUP_TRUCK","INNOVI_VEHICLE_SUV","INNOVI_VEHICLE_VAN","INNOVI_VEHICLE_SMALL_TRUCK","INNOVI_VEHICLE_MEDIUM_TRUCK","INNOVI_VEHICLE_BIG_TRUCK","INNOVI_VEHICLE_TRACTOR","INNOVI_VEHICLE_NIGHT","INNOVI_TWOWHEELED","INNOVI_TWOWHEELED_BICYCLE","INNOVI_TWOWHEELED_MOTORCYCLE","INNOVI_ANIMAL","INNOVI_ANIMAL_BIRD","INNOVI_ANIMAL_SMALL","INNOVI_ANIMAL_LARGE","HARD_HAT_PERSON","HARD_HAT_PERSON_WITH_HARDHAT","HARD_HAT_PERSON_WITHOUT_HARDHAT","TRASH_BIN","TRASH_BIN_TRASH","MCC_VEHICLE","MCC_VEHICLE_TAXI","MCC_VEHICLE_SCHOOL_BUS","EDGE_200","EDGE_220","EDGE_250","EDGE_500","VIRTUAL","INNOVI_RULE_CROSSING","INNOVI_RULE_MOVING","INNOVI_RULE_STOPPED","INNOVI_RULE_OCCUPANCY","INNOVI_RULE_GROPPING","CUSTOM_HARD_HAT","CUSTOM_TRASH","CUSTOM_MCC","SENSORS","FOLDERS","GEO_CIRCLE","GEO_POLYGON","CUSTOM","LAST_1H","LAST_3H","LAST_6H","LAST_12H","LAST_24H","LAST_48H","SENSOR","RULES","CALIBRATION","LOW","MEDIUM","HIGH","SENSOR_OK","SENSOR_ERROR","SOURCE_ERROR","UNSUPPORTED_FORMAT","UNSUPPORTED_RESOLUTION","FRAMERATE_CRITICAL","FRAMERATE_LOW","FRAMERATE_HIGH","IMAGE_BLOCKED","IMAGE_SATURATED","IMAGE_DARK","CCD","THERMAL","CRITICAL","RTSP","ONVIF","CLIP","RTP","MULTICAST","KINESIS","SECOND","MINUTE","HOUR","DAY","WEEK","MONTH","BLOCKED","SYSADMIN","SUPPORT","AOI","MASK","BLOCK","SHUTDOWN","groupId","search","sort","page","pageSize","code","commandId","configId","versionId","subFolders","stream","itemType","oldPassword","newPassword","target","EntitiesResponseOfAccount","EntitiesResponse","EntitiesResponseOfAccountTypeSummary","EntitiesResponseOfApiKey","EntitiesResponseOfAppliance","EntitiesResponseOfApplianceCommand","EntitiesResponseOfApplianceConfiguration","EntitiesResponseOfAuditLog","EntitiesResponseOfCalendar","EntitiesResponseOfComponentConfiguration","EntitiesResponseOfConfiguration","EntitiesResponseOfEvent","EntitiesResponseOfFeature","EntitiesResponseOfFeaturesGroup","EntitiesResponseOfFolder","EntitiesResponseOfIntegration","EntitiesResponseOfReportDefinition","EntitiesResponseOfRule","EntitiesResponseOfRuleSpec","EntitiesResponseOfSchedule","EntitiesResponseOfScheduledReport","EntitiesResponseOfSearchDefinition","EntitiesResponseOfSensor","EntitiesResponseOfSensorHealth","EntityResponseOfAccount","EntityResponse","EntityResponseOfApiKey","EntityResponseOfAppliance","EntityResponseOfApplianceStatusTimeSeries","EntityResponseOfAuditLog","EntityResponseOfCalendar","EntityResponseOfComponentConfiguration","EntityResponseOfConfiguration","EntityResponseOfConfigurationTemplate","EntityResponseOfConfigurationVersion","EntityResponseOfCoordinate","EntityResponseOfEvent","EntityResponseOfEventCountTimeSeries","EntityResponseOfFeature","EntityResponseOfFeaturesGroup","EntityResponseOfFolder","EntityResponseOfGeoReferenceData","EntityResponseOfInnoviClientConfig","EntityResponseOfIntegration","EntityResponseOfLicense","EntityResponseOfLoginData","EntityResponseOfReportDefinition","EntityResponseOfRule","EntityResponseOfSchedule","EntityResponseOfScheduledReport","EntityResponseOfSearchDefinition","EntityResponseOfSensor","EntityResponseOfSensorAnalysisResults","EntityResponseOfSensorAnomalyInfo","EntityResponseOfSensorHealth","EntityResponseOfSensorStatusTimeSeries","EntityResponseOfTreeNode","EntityResponseOfUser","EntityResponseOfUserAccountInfo","searchArea","behaviorType","severity","interval","format","category","includeSensors","pages","total","queryDef","QueryResponseOfAccount","QueryResponse","QueryResponseOfAnomalyEventInfo","QueryResponseOfAppliance","QueryResponseOfAuditLog","QueryResponseOfCalendar","QueryResponseOfComponentConfiguration","QueryResponseOfConfiguration","QueryResponseOfConfigurationTemplate","QueryResponseOfConfigurationVersion","QueryResponseOfEvent","QueryResponseOfFolder","QueryResponseOfIntegrationTarget","QueryResponseOfObjectInfo","QueryResponseOfReportDefinition","QueryResponseOfRule","QueryResponseOfSchedule","QueryResponseOfSearchDefinition","QueryResponseOfSensor","QueryResponseOfSensorAnalysisResults","QueryResponseOfTreeItem","QueryResponseOfUser","azimuth","content","applianceId","roles","tokenKey","loginKey","setToken","token","localStorage","setItem","removeToken","removeItem","RestUtil","http","HttpHeaders","set","get","_this","params","_i","resourceUrl","buildUrl","apply","observe","pipe","map","res","processResponse","catchError","handleError","post","put","delete","join","response","LocalStorageUtil.removeToken","Error","LocalStorageUtil.setToken","message","Promise","reject","Injectable","HttpClient","CoreConfig","AccountsService","config","rest","baseUrl","api","find","_a","changeGeoArea","JSON","stringify","changeGeoLocation","getDefaultLocation","decorators","Inject","args","AnomalyService","getSensorsAnalysisResults","update","getSensorAnomalyInfo","findAnomalyEventInfo","updateAnomalyRule","createDummyEvent","AppliancesService","findApplianceSensors","addApplianceSensor","registerAppliance","getRuntimeConfiguration","getConfigurations","changeName","changeFolder","changeMachineId","changeConfiguration","getCommands","deleteCommand","getStatusOverTime","AuditLogService","CalendarsService","list","getFolderCalendars","EventsService","changeStatus","setImagePath","setClipPath","findInArea","getEventImage","getEventClip","getEventsCountOvertime","FoldersService","changeParent","changeTimezone","getSubFolders","getSubItems","getHierarchy","GeoService","geoReference","HealthCheckService","health","IntegrationsService","ReportsService","RulesService","getSpecs","ScheduledReportsService","SchedulesService","getFolderSchedules","SearchService","execute","executeById","SensorsService","changeFovAttributes","getRefImage","setRefImage","getSensorHealthStatus","getSensorsHealthStatus","UserService","login","refreshToken","verifyLoginKey","sendVerificationCode","resetPassword","checkUnusedPassword","changeMobile","switchAccount","getConfig","UsersService","invite","changeType","changeRole","getByEmail","SysAccountsService","changeGroups","purge","getAccountTypeStatistics","SysAppliancesService","setCommandStatus","SysConfigurationsService","setDefaultVersion","createVersion","updateVersion","deleteVersion","getVersion","getVersions","createTemplate","updateTemplate","deleteTemplate","getTemplate","findTemplates","SysEventsService","SysFeaturesGroupsService","setName","setFeatures","SysFeaturesService","SysKeysService","rotate","getAll","enable","disable","SysSensorsService","SysSystemService","getLicense","importLicense","getSystemVersion","exportAccountData","importAccountData","exportConfigurations","importConfigurations","SysUsersService","changeDefaultAccount","setRoles","mergeRoles","Services","CoreLibModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","HttpClientModule","getItem"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\n/* \n   Schedule time frame\n   Times are described in ISO 8601 format (See: https://www.w3.org/TR/NOTE-datetime).\n   The format is: YYYY-MM-DDThh:mm:ssTZD where:\n   <ul>\n   <li>YYYY = four-digit year</li>\n   <li>MM   = two-digit month (01=January, etc.)</li>\n   <li>DD   = two-digit day of month (01 through 31)</li>\n   <li>hh   = two digits of hour (00 through 23) (am/pm NOT allowed)</li>\n   <li>mm   = two digits of minute (00 through 59)</li>\n   <li>ss   = two digits of second (00 through 59)\n   <li>TZD  = time zone designator (Z for UTC or +hh:mm or -hh:mm for Timezone offset)</li>\n   </ul> \n*/\nexport class AbsoluteTimeFrame {\n \n    // Name of time frame \n    public name: string;\n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public startTime: string;\n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public endTime: string;\n \n    // Specify if this time frame is active \n    public active: boolean;\n \n    constructor(name?: string, startTime?: string, endTime?: string, active?: boolean) { \n        this.name = name;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.active = active;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n   Account role represents the role of the user in the account \n*/\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(accountId?: string, role?: AccountRoleCode) { \n        this.accountId = accountId;\n        this.role = role;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\n\n/* \n   Account types aggregator summary \n*/\nexport class AccountTypeSummary {\n \n    // User role in the account \n    public type: AccountTypeCode;\n \n    // Account type name \n    public typeName: string;\n \n    // Total number of accounts of this type \n    public accounts: number;\n \n    // Percentage of accounts of this type \n    public accountsPercentage: number;\n \n    // Total number of channels (sensors) for all accounts of this type \n    public channels: number;\n \n    // Percentage of number of channels (sensors) for all accounts of this type \n    public channelsPercentage: number;\n \n    // Total number of edge devices \n    public devices: number;\n \n    // Percentage of number of edge devices \n    public devicesPercentage: number;\n \n    constructor(type?: AccountTypeCode, typeName?: string, accounts?: number, accountsPercentage?: number, channels?: number, channelsPercentage?: number, devices?: number, devicesPercentage?: number) { \n        this.type = type;\n        this.typeName = typeName;\n        this.accounts = accounts;\n        this.accountsPercentage = accountsPercentage;\n        this.channels = channels;\n        this.channelsPercentage = channelsPercentage;\n        this.devices = devices;\n        this.devicesPercentage = devicesPercentage;\n    }\n\n}\n\n\n","\n/* \n   Sensor training analysis result for a single model\n   This data model is used by the training process of Anomaly Detection \n*/\nexport class AnalysisResult {\n \n    // Results model type \n    public modelType: string;\n \n    // Path to the results model file \n    public resultsPath: string;\n \n    // When the training session was completed [Epoch milliseconds Timestamp] \n    public completedOn: number;\n \n    constructor(modelType?: string, resultsPath?: string, completedOn?: number) { \n        this.modelType = modelType;\n        this.resultsPath = resultsPath;\n        this.completedOn = completedOn;\n    }\n\n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\n\n/* \n   Subset of event info required by the anomaly service \n*/\nexport class AnomalyEventInfo {\n \n    // Event Id \n    public eventId: string;\n \n    // List of detected object Ids \n    public objectIds: number[];\n \n    // Validation status for event processing workflow: NEW | OPEN | CLOSE | IRRELEVANT | FALSE \n    public status: EventStatusCode;\n \n    constructor(eventId?: string, objectIds?: number[], status?: EventStatusCode) { \n        this.eventId = eventId;\n        this.objectIds = objectIds;\n        this.status = status;\n    }\n\n}\n\n\n","\n/* \n   SW Configuration for appliance \n*/\nexport class ApplianceConfiguration {\n \n    // Configuration Id \n    public configurationId: string;\n \n    // Configuration description \n    public description: string;\n \n    // Current configuration version \n    public currentVersion: string;\n \n    // List of configuration versions \n    public versions: string[];\n \n    constructor(configurationId?: string, description?: string, currentVersion?: string, versions?: string[]) { \n        this.configurationId = configurationId;\n        this.description = description;\n        this.currentVersion = currentVersion;\n        this.versions = versions;\n    }\n\n}\n\n\n","import { ProductTypeCode } from '../enums/ProductTypeCode';\n\n/* \n   Appliance registration info\n   This model is used when a user registers new appliance in the system \n*/\nexport class ApplianceRegistration {\n \n    // Appliance name (optional) \n    public name: string;\n \n    // Account Id \n    public accountId: string;\n \n    // FolderId \n    public folderId: string;\n \n    // Physical machine identifier (serial number) \n    public machineId: string;\n \n    // Product type code (Edge Model) \n    public productType: ProductTypeCode;\n \n    // Appliance SW configuration id \n    public configurationId: string;\n \n    // Appliance SW configuration version id \n    public configurationVersionId: string;\n \n    constructor(name?: string, accountId?: string, folderId?: string, machineId?: string, productType?: ProductTypeCode, configurationId?: string, configurationVersionId?: string) { \n        this.name = name;\n        this.accountId = accountId;\n        this.folderId = folderId;\n        this.machineId = machineId;\n        this.productType = productType;\n        this.configurationId = configurationId;\n        this.configurationVersionId = configurationVersionId;\n    }\n\n}\n\n\n","\n/* \n   Appliance short status data point \n*/\nexport class ApplianceStatusDataPoint {\n \n    // Average CPU usage percentage [1-100] \n    public cpuAvg: number;\n \n    // Max CPU usage percentage [1-100] \n    public cpuMax: number;\n \n    // RAM usage percentage [1-100] \n    public ram: number;\n \n    // Load average percentage (could be more than 100, e.g. load average of 2.21 will be represented as 221) \n    public loadAvg: number;\n \n    constructor(cpuAvg?: number, cpuMax?: number, ram?: number, loadAvg?: number) { \n        this.cpuAvg = cpuAvg;\n        this.cpuMax = cpuMax;\n        this.ram = ram;\n        this.loadAvg = loadAvg;\n    }\n\n}\n\n\n","import { ApplianceStatusTimestamped } from '../common/ApplianceStatusTimestamped';\n\n/* \n   Appliance status list over time \n*/\nexport class ApplianceStatusTimeSeries {\n \n    // Time series label (optional) \n    public label: string;\n \n    // Time series representing the status mask per timestamp (label field is ignored) \n    public data: ApplianceStatusTimestamped[];\n \n    constructor(label?: string, data?: ApplianceStatusTimestamped[]) { \n        this.label = label;\n        this.data = data;\n    }\n\n}\n\n\n","import { ApplianceStatusDataPoint } from '../common/ApplianceStatusDataPoint';\n\n/* \n   Data point in a series representing a sensor status value in a specific timestamp \n*/\nexport class ApplianceStatusTimestamped {\n \n    // Timestamp (Epoch milliseconds) \n    public timestamp: number;\n \n    // Data point label \n    public label: string;\n \n    // Appliance status \n    public value: ApplianceStatusDataPoint;\n \n    constructor(timestamp?: number, label?: string, value?: ApplianceStatusDataPoint) { \n        this.timestamp = timestamp;\n        this.label = label;\n        this.value = value;\n    }\n\n}\n\n\n","\n/* \n   Bounding Box of crop in a frame (inside 1000x1000 coordinate system) \n*/\nexport class BoundingBox {\n \n    // Max X axis in the field-of-view of the bounding box \n    public maxX: number;\n \n    // Max Y axis in the field-of-view of the bounding box \n    public maxY: number;\n \n    // Min X axis in the field-of-view of the bounding box \n    public minX: number;\n \n    // Min Y axis in the field-of-view of the bounding box \n    public minY: number;\n \n    constructor(maxX?: number, maxY?: number, minX?: number, minY?: number) { \n        this.maxX = maxX;\n        this.maxY = maxY;\n        this.minX = minX;\n        this.minY = minY;\n    }\n\n}\n\n\n","\n/* \n   Bounding Box of an area in a map (in WGS-84 coordinate system) \n*/\nexport class BoundingMap {\n \n    // Max latitude of the bounding box \n    public maxLat: number;\n \n    // Max longitude of the bounding box \n    public maxLng: number;\n \n    // Min latitude of the bounding box \n    public minLat: number;\n \n    // Min longitude of the bounding box \n    public minLng: number;\n \n    constructor(maxLat?: number, maxLng?: number, minLat?: number, minLng?: number) { \n        this.maxLat = maxLat;\n        this.maxLng = maxLng;\n        this.minLat = minLat;\n        this.minLng = minLng;\n    }\n\n}\n\n\n","\n/* \n   Coordinate of WGS-84 grid system\n   See (https://en.wikipedia.org/wiki/World_Geodetic_System) \n*/\nexport class Coordinate {\n \n    // Latitude \n    public latitude: number;\n \n    // Longitude \n    public longitude: number;\n \n    // Altitude \n    public altitude: number;\n \n    constructor(latitude?: number, longitude?: number, altitude?: number) { \n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.altitude = altitude;\n    }\n\n}\n\n\n","\n/* \n   Object dimension on FOV \n*/\nexport class Dimension {\n \n    // Width \n    public width: number;\n \n    // Height \n    public height: number;\n \n    constructor(width?: number, height?: number) { \n        this.width = width;\n        this.height = height;\n    }\n\n}\n\n\n","\n/* \n   Disk information \n*/\nexport class DiskInfo {\n \n    // Dist / partition name \n    public name: string;\n \n    // Disk size (in bytes) \n    public totalBytes: number;\n \n    // Used size (in bytes) \n    public usedBytes: number;\n \n    // Disk usage percentage (0 - 100) \n    public usage: number;\n \n    constructor(name?: string, totalBytes?: number, usedBytes?: number, usage?: number) { \n        this.name = name;\n        this.totalBytes = totalBytes;\n        this.usedBytes = usedBytes;\n        this.usage = usage;\n    }\n\n}\n\n\n","\n/* \n   Docker registry credentials to connect to docker\n   Includes information where to access and get images \n*/\nexport class DockerCredentials {\n \n    // Docker user to pull images (provided by the system) \n    public dockerUser: string;\n \n    // Docker password to pull images (provided by the system) \n    public dockerPwd: string;\n \n    constructor(dockerUser?: string, dockerPwd?: string) { \n        this.dockerUser = dockerUser;\n        this.dockerPwd = dockerPwd;\n    }\n\n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\n\n/* \n   Event integration action \n*/\nexport class EventAction {\n \n    // Integration protocol: smtp | http | https \n    public protocol: string;\n \n    // Operation: GET | POST | PUT (applicable for http/https protocols) \n    public operation: string;\n \n    // Host name or ip address (applicable for all protocols) \n    public host: string;\n \n    // Port number (applicable for all protocols) \n    public port: number;\n \n    // User (applicable for all protocols) \n    public user: string;\n \n    // Password (applicable for all protocols) \n    public password: string;\n \n    // URL path (applicable for http/https protocols) \n    public url: string;\n \n    // Headers (applicable for http/https protocols) \n    public headers: StringKeyValue[];\n \n    // List of recipients (applicable for smtp protocol) \n    public recipients: string[];\n \n    // Message subject template (applicable for smtp protocol) \n    public subject: string;\n \n    // Message body template (applicable for all protocols) \n    public body: string;\n \n    // Is clip required for the integration \n    public clipRequired: boolean;\n \n    constructor(protocol?: string, operation?: string, host?: string, port?: number, user?: string, password?: string, url?: string, headers?: StringKeyValue[], recipients?: string[], subject?: string, body?: string, clipRequired?: boolean) { \n        this.protocol = protocol;\n        this.operation = operation;\n        this.host = host;\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.url = url;\n        this.headers = headers;\n        this.recipients = recipients;\n        this.subject = subject;\n        this.body = body;\n        this.clipRequired = clipRequired;\n    }\n\n}\n\n\n","\n/* \n   Event count time series data point \n*/\nexport class EventCountDataPoint {\n \n    // Timestamp (Epoch milliseconds) \n    public timestamp: number;\n \n    // Data point label \n    public label: string;\n \n    // Data point value \n    public value: number;\n \n    constructor(timestamp?: number, label?: string, value?: number) { \n        this.timestamp = timestamp;\n        this.label = label;\n        this.value = value;\n    }\n\n}\n\n\n","import { EventCountDataPoint } from '../common/EventCountDataPoint';\n\n/* \n   Event count time series result \n*/\nexport class EventCountTimeSeries {\n \n    // Label of series \n    public label: string;\n \n    // Time series representing the data points over time \n    public data: EventCountDataPoint[];\n \n    constructor(label?: string, data?: EventCountDataPoint[]) { \n        this.label = label;\n        this.data = data;\n    }\n\n}\n\n\n","import { Dimension } from '../common/Dimension';\nimport { GeoControlPoint } from '../common/GeoControlPoint';\nimport { Coordinate } from '../common/Coordinate';\n\n/* \n   FOV (Sensor Field of View) Geo attributes \n*/\nexport class FovGeoAttributes {\n \n    // Sensor FOV geo area polygon (the bounding polygon of the area covered by the FOV) \n    public geoArea: Coordinate[];\n \n    // The normalized (1000 x 1000) visible area (rectangle) in the FOV \n    public visibleArea: Dimension;\n \n    // Coefficient matrix for the FOV - WGS-84 affine transformation \n    public affineCoefficients: number[];\n \n    // Min X axis in the field-of-view of the bounding box \n    public controlPoints: GeoControlPoint[];\n \n    constructor(geoArea?: Coordinate[], visibleArea?: Dimension, affineCoefficients?: number[], controlPoints?: GeoControlPoint[]) { \n        this.geoArea = geoArea;\n        this.visibleArea = visibleArea;\n        this.affineCoefficients = affineCoefficients;\n        this.controlPoints = controlPoints;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/* \n   Geo spatial circle \n*/\nexport class GeoCircle {\n \n    // Circle center coordinate \n    public center: Coordinate;\n \n    // Radius (in meters) \n    public radius: number;\n \n    constructor(center?: Coordinate, radius?: number) { \n        this.center = center;\n        this.radius = radius;\n    }\n\n}\n\n\n","import { Point } from '../common/Point';\nimport { Coordinate } from '../common/Coordinate';\n\n/* \n   Control point maps FOV location (1000x1000 coordinate system) to WGS-84 coordinate system\n   Control points are used for FOV geo-referencing \n*/\nexport class GeoControlPoint {\n \n    // Point in the FOV (on the raster image) \n    public point: Point;\n \n    // WGS-84 Coordinate (lan/lng) to match the control point \n    public coordinate: Coordinate;\n \n    constructor(point?: Point, coordinate?: Coordinate) { \n        this.point = point;\n        this.coordinate = coordinate;\n    }\n\n}\n\n\n","import { GeoControlPoint } from '../common/GeoControlPoint';\n\n/* \n   List of Geo control points \n*/\nexport class GeoControlPoints {\n \n    // List of control points \n    public points: GeoControlPoint[];\n \n    constructor(points?: GeoControlPoint[]) { \n        this.points = points;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/* \n   Geo spatial polygon \n*/\nexport class GeoPolygon {\n \n    // List of polygon vertices (points) \n    public vertices: Coordinate[];\n \n    constructor(vertices?: Coordinate[]) { \n        this.vertices = vertices;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/* \n   Geo Reference data includes the contour of the raster image on the World coordinate system (WGS-84)\n   and the list of transformation coefficients.\n   To transform any point (x,y) on the FOV to WGS-84 coordinate, use the following functions:\n   lng = (c0 * x) + (c1 * y) + c2\n   lat = (c3 * y) + (c4 * x) + c5\n   Where: c0..c5 are the indexed values of the coefficients vector e.g.\n   c0 = coefficients[0], c1 = coefficients[1] ... c5 = coefficients[5]; \n*/\nexport class GeoReferenceData {\n \n    // List of WGS-84 coordinates (contour of the FOV on map)<br> The order of the coordinates corresponds to the FOV corners: <ul> <li>coordinates[0] = ULC (Upper Left Corner)</li> <li>coordinates[1] = URC (Upper Right Corner)</li> <li>coordinates[2] = LRC (Lower Right Corner)</li> <li>coordinates[3] = LLC (Lower Left Corner)</li> </ul> \n    public coordinates: Coordinate[];\n \n    // List of transformation coefficients matrix <br> Matrix has 9 values in the following order: m00, m01, m02, m10, m11, m12, m20, m21, m22 Use this matrix to convert any point (x,y) in the FOV to WGS-84 coordinate (lat, lng) <blockquote> <pre> [ lng ]     [ m<sub>00</sub>  m<sub>01</sub>  m<sub>02</sub> ]     [ x ] [ lat ]  =  [ m<sub>10</sub>  m<sub>11</sub>  m<sub>12</sub> ]  *  [ y ] [  w  ]     [ m<sub>20</sub>  m<sub>21</sub>  m<sub>22</sub> ]     [ 1 ] lng = (m00 * x) + (m01 * y) + m02 lat = (m10 * x) + (m11 * y) + m12 To convert back to non homogenous coordinates (X`,Y`): w = (m20 * x) + (m21 * y) + m22 X` = lng / w Y` = lat / w </pre> </blockquote> \n    public coefficients: number[];\n \n    constructor(coordinates?: Coordinate[], coefficients?: number[]) { \n        this.coordinates = coordinates;\n        this.coefficients = coefficients;\n    }\n\n}\n\n\n","import { MapClientCode } from '../enums/MapClientCode';\n\n/* \n   Client configuration parameters (for the UI) \n*/\nexport class InnoviClientConfig {\n \n    // Map Client library to use in the UI \n    public mapClient: MapClientCode;\n \n    // Map Client key \n    public mapKey: string;\n \n    // Web map service uri \n    public wMS: string;\n \n    constructor(mapClient?: MapClientCode, mapKey?: string, wMS?: string) { \n        this.mapClient = mapClient;\n        this.mapKey = mapKey;\n        this.wMS = wMS;\n    }\n\n}\n\n\n","import { AccountRole } from '../common/AccountRole';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n   Login data (returned by the API after successful login) \n*/\nexport class LoginData {\n \n    // Access token to use (for the default account) \n    public accessToken: string;\n \n    // Current account id and role \n    public accountRole: AccountRole;\n \n    // User Id \n    public userId: string;\n \n    // User name \n    public userName: string;\n \n    // User email \n    public userEmail: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // User status \n    public userStatus: UserStatusCode;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    constructor(accessToken?: string, accountRole?: AccountRole, userId?: string, userName?: string, userEmail?: string, userType?: UserTypeCode, userStatus?: UserStatusCode, changePassword?: boolean) { \n        this.accessToken = accessToken;\n        this.accountRole = accountRole;\n        this.userId = userId;\n        this.userName = userName;\n        this.userEmail = userEmail;\n        this.userType = userType;\n        this.userStatus = userStatus;\n        this.changePassword = changePassword;\n    }\n\n}\n\n\n","\n/* \n   Login parameters data model \n*/\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n    constructor(email?: string, password?: string, accessToken?: string) { \n        this.email = email;\n        this.password = password;\n        this.accessToken = accessToken;\n    }\n\n}\n\n\n","import { ColorTypeCode } from '../enums/ColorTypeCode';\nimport { ColorCode } from '../enums/ColorCode';\n\n/* \n   Metadata object color description \n*/\nexport class ObjectColor {\n \n    // Color type \n    public colorType: ColorTypeCode;\n \n    // Primary color \n    public primary: ColorCode;\n \n    // The confidence in the primary color of this object (in percent) \n    public primaryConf: number;\n \n    // Secondary color \n    public secondaryColor: ColorCode;\n \n    // The confidence in the secondary color of this object (in percent) \n    public secondaryConf: number;\n \n    constructor(colorType?: ColorTypeCode, primary?: ColorCode, primaryConf?: number, secondaryColor?: ColorCode, secondaryConf?: number) { \n        this.colorType = colorType;\n        this.primary = primary;\n        this.primaryConf = primaryConf;\n        this.secondaryColor = secondaryColor;\n        this.secondaryConf = secondaryConf;\n    }\n\n}\n\n\n","import { ObjectInstance } from '../common/ObjectInstance';\n\n/* \n   Object Metadata info \n*/\nexport class ObjectInfo {\n \n    // Object tracking Id (This is not unique id across the system) \n    public objectId: string;\n \n    // Sensor id \n    public sensorId: string;\n \n    // Instance time [Epoch milliseconds Timestamp] \n    public birthTime: number;\n \n    // Instances of the object in the scene (trajectory) \n    public instances: ObjectInstance[];\n \n    constructor(objectId?: string, sensorId?: string, birthTime?: number, instances?: ObjectInstance[]) { \n        this.objectId = objectId;\n        this.sensorId = sensorId;\n        this.birthTime = birthTime;\n        this.instances = instances;\n    }\n\n}\n\n\n","import { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { ObjectColor } from '../common/ObjectColor';\nimport { Dimension } from '../common/Dimension';\nimport { BoundingBox } from '../common/BoundingBox';\nimport { Point } from '../common/Point';\nimport { Coordinate } from '../common/Coordinate';\n\n/* \n   Metadata object instance info\n   One instance of the object in the scene \n*/\nexport class ObjectInstance {\n \n    // Instance timestamp [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Object type (class) \n    public objectType: ObjectTypeCode;\n \n    // Level of classification confidence \n    public confidence: number;\n \n    // An array defining object colors. Each color is defined by a type with a primary and secondary color defined \n    public colors: ObjectColor[];\n \n    // Direction between -3141 and 3141 (-pi to pi in integers), where 0 is up \n    public direction: number;\n \n    // Instance dimension (height and width in mm) \n    public dimension: Dimension;\n \n    // Instance bounding box in the frame \n    public boundingBox: BoundingBox;\n \n    // Instance speed in meters/sec \n    public speed: number;\n \n    // Instance approximate size in 1000*(m^2) \n    public size: number;\n \n    // Instance location in the image \n    public position: Point;\n \n    // Instance location in the world (WGS-84 coordinate system) \n    public location: Coordinate;\n \n    constructor(timestamp?: number, objectType?: ObjectTypeCode, confidence?: number, colors?: ObjectColor[], direction?: number, dimension?: Dimension, boundingBox?: BoundingBox, speed?: number, size?: number, position?: Point, location?: Coordinate) { \n        this.timestamp = timestamp;\n        this.objectType = objectType;\n        this.confidence = confidence;\n        this.colors = colors;\n        this.direction = direction;\n        this.dimension = dimension;\n        this.boundingBox = boundingBox;\n        this.speed = speed;\n        this.size = size;\n        this.position = position;\n        this.location = location;\n    }\n\n}\n\n\n","import { ObjectTypeCode } from '../enums/ObjectTypeCode';\n\n/* \n   Used to reflect object type hierarchy \n*/\nexport class ObjectTypeNode {\n \n    // Object type enum name \n    public name: string;\n \n    // Object type enum value \n    public objectTypeCode: ObjectTypeCode;\n \n    // Children (sub types) \n    public children: ObjectTypeNode[];\n \n    constructor(name?: string, objectTypeCode?: ObjectTypeCode, children?: ObjectTypeNode[]) { \n        this.name = name;\n        this.objectTypeCode = objectTypeCode;\n        this.children = children;\n    }\n\n}\n\n\n","\n/* \n   Point (X,Y) on raster \n*/\nexport class Point {\n \n    // X value of the point \n    public x: number;\n \n    // Y value of the point \n    public y: number;\n \n    constructor(x?: number, y?: number) { \n        this.x = x;\n        this.y = y;\n    }\n\n}\n\n\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\nimport { EventAction } from '../common/EventAction';\n\n/* \n   Recurrent time frame \n*/\nexport class Recurrent {\n \n    // Start time of the recurrent in ISO-8601 format including time offset YYYY-MM-DDThh:mm:ss+0Z:00 \n    public startTime: string;\n \n    // End time of the recurrent in ISO-8601 format including time offset YYYY-MM-DDThh:mm:ss+0Z:00 Leave empty for no end time \n    public endTime: string;\n \n    // Period in ISO-8601 format (PnYnMnD / PnW) Examples: <ul> <li>P1Y - Every 1 year</li> <li>P2M - Every 2 months</li> <li>P3W - Every 3 weeks</li> <li>P4D - Every 2 months</li> </ul> \n    public period: string;\n \n    // Days of week - based on ISO8601 \n    public daysOfWeek: DayOfWeekCode[];\n \n    // Action definition \n    public action: EventAction;\n \n    constructor(startTime?: string, endTime?: string, period?: string, daysOfWeek?: DayOfWeekCode[], action?: EventAction) { \n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.period = period;\n        this.daysOfWeek = daysOfWeek;\n        this.action = action;\n    }\n\n}\n\n\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\n\n/* \n   Schedule recurrent time frame \n*/\nexport class RecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    public daysOfWeek: DayOfWeekCode;\n \n    // Start time in the format of HH:mm \n    public startTime: string;\n \n    // End time in the format of HH:mm \n    public endTime: string;\n \n    constructor(daysOfWeek?: DayOfWeekCode, startTime?: string, endTime?: string) { \n        this.daysOfWeek = daysOfWeek;\n        this.startTime = startTime;\n        this.endTime = endTime;\n    }\n\n}\n\n\n","\n/* \n   Rule default encapsulates boundaries and default values of rule parameter \n*/\nexport class RuleDefault {\n \n    // Min value (Lower bound) \n    public min: number;\n \n    // Max value (Upper bound) \n    public max: number;\n \n    // Default value \n    public defaultValue: number;\n \n    constructor(min?: number, max?: number, defaultValue?: number) { \n        this.min = min;\n        this.max = max;\n        this.defaultValue = defaultValue;\n    }\n\n}\n\n\n","import { Point } from '../common/Point';\nimport { LineCrossDirectionCode } from '../enums/LineCrossDirectionCode';\n\n/* \n   Polygon definition for rule is used to describe closed polygon and line (for crossing a line rule)\n   In case of a line, it is not a closed polygon (first and last points are not connected)\n   In case of area description, the line crossing direction field is ignored \n*/\nexport class RulePolygon {\n \n    // Line crossing direction (used only in case of line-crossing rule type) \n    public lineCrossDir: LineCrossDirectionCode;\n \n    // Polygon points \n    public points: Point[];\n \n    constructor(lineCrossDir?: LineCrossDirectionCode, points?: Point[]) { \n        this.lineCrossDir = lineCrossDir;\n        this.points = points;\n    }\n\n}\n\n\n","import { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { RuleDefault } from '../common/RuleDefault';\nimport { ObjectTypeNode } from '../common/ObjectTypeNode';\n\n/* \n   Rule specification describe rule parameters \n*/\nexport class RuleSpec {\n \n    // Rule type enum code \n    public ruleType: RuleTypeCode;\n \n    // Rule type enum name \n    public ruleTypeName: string;\n \n    // Available behavior types for this rule \n    public behaviorTypes: BehaviorTypeCode[];\n \n    // Available object types for this rule \n    public objectTypes: ObjectTypeCode[];\n \n    // Is this rule requires line drawing (true) or area drawing (false) \n    public isLineDrawing: boolean;\n \n    // Dwell Time \n    public dwellTime: RuleDefault;\n \n    // Number of people In Group (for grouping and occupancy rules) \n    public peopleInGroup: RuleDefault;\n \n    // Available object types for this rule organized in hierarchy \n    public objectHierarchy: ObjectTypeNode[];\n \n    constructor(ruleType?: RuleTypeCode, ruleTypeName?: string, behaviorTypes?: BehaviorTypeCode[], objectTypes?: ObjectTypeCode[], isLineDrawing?: boolean, dwellTime?: RuleDefault, peopleInGroup?: RuleDefault, objectHierarchy?: ObjectTypeNode[]) { \n        this.ruleType = ruleType;\n        this.ruleTypeName = ruleTypeName;\n        this.behaviorTypes = behaviorTypes;\n        this.objectTypes = objectTypes;\n        this.isLineDrawing = isLineDrawing;\n        this.dwellTime = dwellTime;\n        this.peopleInGroup = peopleInGroup;\n        this.objectHierarchy = objectHierarchy;\n    }\n\n}\n\n\n","import { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { ColorCode } from '../enums/ColorCode';\n\n/* \n   Object attributes to search for \n*/\nexport class SearchObject {\n \n    // Object type to search for: UNDEFINED | UNKNOWN | PERSON ... \n    public type: ObjectTypeCode;\n \n    // Object color to search for: UNDEFINED | WHITE | BLACK ... \n    public color: ColorCode;\n \n    // Object identifier (License plate number or Face attributes) \n    public identifier: string;\n \n    constructor(type?: ObjectTypeCode, color?: ColorCode, identifier?: string) { \n        this.type = type;\n        this.color = color;\n        this.identifier = identifier;\n    }\n\n}\n\n\n","import { TimeUnitCode } from '../enums/TimeUnitCode';\n\n/* \n   Anomaly sensitivity defines parameters to adjust thresholds for anomaly events \n*/\nexport class Sensitivity {\n \n    // How many anomaly events in a time unit \n    public events: number;\n \n    // Time unit (only DAY and WEEK are allowed) \n    public timeUnit: TimeUnitCode;\n \n    constructor(events?: number, timeUnit?: TimeUnitCode) { \n        this.events = events;\n        this.timeUnit = timeUnit;\n    }\n\n}\n\n\n","import { AnalysisResult } from '../common/AnalysisResult';\nimport { SensorAnomalyRuleInfo } from '../common/SensorAnomalyRuleInfo';\n\n/* \n   Sensor anomaly information\n   This data model is used by the inference process of Anomaly Detection \n*/\nexport class SensorAnomalyInfo {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // List of results (model + file path) \n    public results: AnalysisResult[];\n \n    // Anomaly rule info \n    public ruleInfo: SensorAnomalyRuleInfo;\n \n    constructor(sensorId?: string, results?: AnalysisResult[], ruleInfo?: SensorAnomalyRuleInfo) { \n        this.sensorId = sensorId;\n        this.results = results;\n        this.ruleInfo = ruleInfo;\n    }\n\n}\n\n\n","import { Sensitivity } from '../common/Sensitivity';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\n\n/* \n   Sensor anomaly rule information \n*/\nexport class SensorAnomalyRuleInfo {\n \n    // Indicates if the rule is active (default) or inactive \n    public active: boolean;\n \n    // Sensitivity (for Anomaly) \n    public sensitivity: Sensitivity;\n \n    // Object types: PERSON | VEHICLE | MOTORCYCLE ... \n    public objectTypes: ObjectTypeCode[];\n \n    constructor(active?: boolean, sensitivity?: Sensitivity, objectTypes?: ObjectTypeCode[]) { \n        this.active = active;\n        this.sensitivity = sensitivity;\n        this.objectTypes = objectTypes;\n    }\n\n}\n\n\n","import { SensorStatusTimestamped } from '../common/SensorStatusTimestamped';\n\n/* \n   Sensor status list over time \n*/\nexport class SensorStatusTimeSeries {\n \n    // Account Id (leave empty if unknown) \n    public accountId: string;\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Time series label (optional) \n    public label: string;\n \n    // Time series representing the status mask per timestamp (label field is ignored) \n    public data: SensorStatusTimestamped[];\n \n    constructor(accountId?: string, sensorId?: string, label?: string, data?: SensorStatusTimestamped[]) { \n        this.accountId = accountId;\n        this.sensorId = sensorId;\n        this.label = label;\n        this.data = data;\n    }\n\n}\n\n\n","import { SensorStatusMask } from '../enums/SensorStatusMask';\n\n/* \n   Data point in a series representing a sensor status value in a specific timestamp \n*/\nexport class SensorStatusTimestamped {\n \n    // Status mask \n    public mask: SensorStatusMask;\n \n    // Timestamp (Epoch milliseconds) \n    public timestamp: number;\n \n    // Data point label \n    public label: string;\n \n    constructor(mask?: SensorStatusMask, timestamp?: number, label?: string) { \n        this.mask = mask;\n        this.timestamp = timestamp;\n        this.label = label;\n    }\n\n}\n\n\n","\n/* \n   String Int Value tuple \n*/\nexport class StringIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: number;\n \n    constructor(key?: string, value?: number) { \n        this.key = key;\n        this.value = value;\n    }\n\n}\n\n\n","\n/* \n   Key Value string tuple \n*/\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n    constructor(key?: string, value?: string) { \n        this.key = key;\n        this.value = value;\n    }\n\n}\n\n\n","\n/* \n   Time frame (for search and reports) \n*/\nexport class TimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n","\n/* \n   Tree item for account hierarchy tree \n*/\nexport class TreeItem {\n \n    // Item Id \n    public itemId: string;\n \n    // Tree item type (0: account, 1: folder, 2: sensor) \n    public type: number;\n \n    // Tree item name \n    public name: string;\n \n    // Item type name (ACCOUNT | FOLDER | CCD | THERMAL) \n    public typeName: string;\n \n    constructor(itemId?: string, type?: number, name?: string, typeName?: string) { \n        this.itemId = itemId;\n        this.type = type;\n        this.name = name;\n        this.typeName = typeName;\n    }\n\n}\n\n\n","import { TreeItem } from '../common/TreeItem';\n\n/* \n   Tree node in account hierarchy tree \n*/\nexport class TreeNode {\n \n    // Node Id \n    public id: string;\n \n    // Node parent id (empty string to root node) \n    public parentId: string;\n \n    // Node name \n    public name: string;\n \n    // Node item \n    public item: TreeItem;\n \n    // Children (sub nodes) \n    public children: TreeNode[];\n \n    constructor(id?: string, parentId?: string, name?: string, item?: TreeItem, children?: TreeNode[]) { \n        this.id = id;\n        this.parentId = parentId;\n        this.name = name;\n        this.item = item;\n        this.children = children;\n    }\n\n}\n\n\n","import { AccountRole } from '../common/AccountRole';\nimport { TreeNode } from '../common/TreeNode';\n\n/* \n   User Account info (for adding new user to the account) \n*/\nexport class UserAccountInfo {\n \n    // Account Id + Role \n    public accountRole: AccountRole;\n \n    // Root node of the account hierarchy \n    public rootNode: TreeNode;\n \n    // List of features enabled for this account \n    public features: string[];\n \n    constructor(accountRole?: AccountRole, rootNode?: TreeNode, features?: string[]) { \n        this.accountRole = accountRole;\n        this.rootNode = rootNode;\n        this.features = features;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n   User invitation data model - used by account admin to invite user to the account \n*/\nexport class UserInvitation {\n \n    // User email \n    public email: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(email?: string, role?: AccountRoleCode) { \n        this.email = email;\n        this.role = role;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n   User registration data model - used by self registered users \n*/\nexport class UserRegistration {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // Account role: UNDEFINED | ADMIN | SUPERVISOR | OPERATOR | USER | INSTALLER \n    public role: AccountRoleCode;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // Temporary password (leave empty for system generated password) \n    public tempPassword: string;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // Flag to send email verification to the user \n    public verifyByEmail: boolean;\n \n    constructor(name?: string, email?: string, mobile?: string, defaultAccount?: string, role?: AccountRoleCode, type?: UserTypeCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean) { \n        this.name = name;\n        this.email = email;\n        this.mobile = mobile;\n        this.defaultAccount = defaultAccount;\n        this.role = role;\n        this.type = type;\n        this.tempPassword = tempPassword;\n        this.changePassword = changePassword;\n        this.verifyByEmail = verifyByEmail;\n    }\n\n}\n\n\n","\n/* \n   Base entity includes common fields for all entities (persistence objects) in the system \n*/\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n    constructor(id?: string, docType?: string, createdOn?: number, updatedOn?: number) { \n        this.id = id;\n        this._type = docType;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Coordinate } from '../common/Coordinate';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Account entity in the system represents customer account which groups set of folders, cameras, rules, integrations and customer specific operational configuration \n*/\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account key \n    public key: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    public suspendedOn: number;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // Account geo area polygon (the bounding polygon of the area) \n    public geoArea: Coordinate[];\n \n    // Account geo location (the center coordinate of the account region) \n    public geoLocation: Coordinate;\n \n    // Account timezone (IANA format, default is UTC) \n    public timezone: string;\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Limit the number of channels per account (0 means no limit) \n    public maxChannels: number;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { AgentStatusCode } from '../enums/AgentStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Agent represents the new edge analytics pipeline (including former agent + AS + CS in a single process)\n   Agent can process video from multiple sensors. Agent is hosted in the edge device (appliance) as single Docker container.\n   A single appliance can host multiple agents (container instances of the same Docker image) \n*/\nexport class Agent extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Appliance Id of the appliance hosting the agent \n    public applianceId: string;\n \n    // Agent status \n    public status: AgentStatusCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   API Key is used per application (e.g. Portal, Console, Mobile App) or service (e.g. Health Service, Search Service ...) for identifying the consumer.\n   The access to sets of REST endpoints is restricted according the API key.\n   API key also dictates the default session TTL per application (e.g. 20 minutes for Portal or Console, 30 days for Mobile app) \n*/\nexport class ApiKey extends BaseEntity {\n \n    // Application Name \n    public appName: string;\n \n    // Application key \n    public appKey: string;\n \n    // Key version (for key rotation) \n    public version: number;\n \n    // Flag to indicate if this a system key or user defined key \n    public isSystemKey: boolean;\n \n    // Flag to indicate if the key is enabled \n    public isEnabled: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { ApplianceStatusCode } from '../enums/ApplianceStatusCode';\nimport { ApplianceCapabilities } from '../entities/ApplianceCapabilities';\n\n/* \n   Appliance (referred also as Edge or Device) is the edge device in the camera network hosting the analytics agent(s) \n*/\nexport class Appliance extends BaseEntity {\n \n    // Appliance name \n    public name: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Folder Id \n    public folderId: string;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: ApplianceStatusCode;\n \n    // Appliance pairing ke (used to pair the device to the account on first installation) \n    public pairingKey: string;\n \n    // When appliance was deleted [Epoch milliseconds Timestamp] \n    public deletedOn: number;\n \n    // When appliance last reported status [Epoch milliseconds Timestamp] \n    public reportedOn: number;\n \n    // Physical machine identifier (serial number) \n    public machineId: string;\n \n    // Appliance SW configuration id \n    public configurationId: string;\n \n    // Appliance SW configuration version id \n    public configurationVersionId: string;\n \n    // Appliance capabilities \n    public capabilities: ApplianceCapabilities;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { ProductTypeCode } from '../enums/ProductTypeCode';\nimport { DiskInfo } from '../common/DiskInfo';\nimport { DockerCredentials } from '../common/DockerCredentials';\nimport { ConfigurationVersion } from '../entities/ConfigurationVersion';\n\n/* \n   Edge appliance capabilities full report <br>\n   This structure describes the HW and SW spec of the device, most of the data is collected by the software and provided by the device<br>\n   Some fields represents the device configuration (report intervals, docker credentials, components versions etc) and they are provided by the backend on device registration. \n*/\nexport class ApplianceCapabilities {\n \n    // Product type code ((provided by the device, injected) \n    public productType: ProductTypeCode;\n \n    // Appliance HW serial number (provided by the device) \n    public serialNumber: string;\n \n    // Appliance HW model name (provided by the device) \n    public deviceModel: string;\n \n    // Appliance CPU model name (provided by the device) \n    public cpuModel: string;\n \n    // Appliance UPnP UUID (provided by the device) \n    public uuid: string;\n \n    // Appliance IP address (provided by the device) \n    public ip: string;\n \n    // Appliance Host name (provided by the device) \n    public host: string;\n \n    // Docker engine version (provided by the device) \n    public dockerVersion: string;\n \n    // Linux Kernel version (provided by the device) \n    public kernelVersion: string;\n \n    // Total RAM size (bytes) (provided by the device) \n    public totalRam: number;\n \n    // Disk info about all the disks installed (provided by the device) \n    public disks: DiskInfo[];\n \n    // Command interval in seconds: how often to pull for commands (provided by the system)<br> The device shall provide a default value of 10, the system might provide different value \n    public commandInterval: number;\n \n    // Status interval in seconds: how often to send status info (provided by the system)<br> The device shall provide a default value of 120 seconds, the system might provide different value \n    public statusInterval: number;\n \n    // Docker repository credentials (provided by the system)<br> \n    public dockerCredentials: DockerCredentials;\n \n    // SW Components configuration version (provided by the system)<br> This structure describes the SW components version to be deployed in the device \n    public configurationVersion: ConfigurationVersion;\n \n    constructor(productType?: ProductTypeCode, serialNumber?: string, deviceModel?: string, cpuModel?: string, uuid?: string, ip?: string, host?: string, dockerVersion?: string, kernelVersion?: string, totalRam?: number, disks?: DiskInfo[], commandInterval?: number, statusInterval?: number, dockerCredentials?: DockerCredentials, configurationVersion?: ConfigurationVersion) { \n        this.productType = productType;\n        this.serialNumber = serialNumber;\n        this.deviceModel = deviceModel;\n        this.cpuModel = cpuModel;\n        this.uuid = uuid;\n        this.ip = ip;\n        this.host = host;\n        this.dockerVersion = dockerVersion;\n        this.kernelVersion = kernelVersion;\n        this.totalRam = totalRam;\n        this.disks = disks;\n        this.commandInterval = commandInterval;\n        this.statusInterval = statusInterval;\n        this.dockerCredentials = dockerCredentials;\n        this.configurationVersion = configurationVersion;\n    }\n\n}\n\n\n","import { ApplianceCommandCode } from '../enums/ApplianceCommandCode';\nimport { CommandStatusCode } from '../enums/CommandStatusCode';\nimport { ComponentConfiguration } from '../entities/ComponentConfiguration';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Appliance command - represents commands sent to the appliance \n*/\nexport class ApplianceCommand extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Appliance Id \n    public applianceId: string;\n \n    // Operation code: UNDEFINED | GET_CAPABILITIES | SET_COMPONENTS | REMOVE_COMPONENTS | RESTART_COMPONENTS | LIST_CONTAINERS ... \n    public opCode: ApplianceCommandCode;\n \n    // Command status flag: PENDING | EXECUTING | COMPLETED | FAILED \n    public status: CommandStatusCode;\n \n    // Components to add (payload for SET_COMPONENTS op-code) \n    public components: ComponentConfiguration[];\n \n    // List of component Ids to remove or reset (payload for REMOVE_COMPONENTS, RESTART_COMPONENTS op-codes) \n    public componentIds: string[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Appliance status - reported periodically by the appliance \n*/\nexport class ApplianceStatus extends BaseEntity {\n \n    // Appliance Id \n    public applianceId: string;\n \n    // Average CPU usage percentage [1-100] \n    public cpuAvg: number;\n \n    // Max CPU usage percentage [1-100] \n    public cpuMax: number;\n \n    // RAM usage percentage [1-100] \n    public ram: number;\n \n    // Load average percentage (could be more than 100, e.g. load average of 2.21 will be represented as 221) \n    public loadAvg: number;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Audit Log - each entry represents a single action done by user \n*/\nexport class AuditLog extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User role in the account when the action was performed \n    public userRole: AccountRoleCode;\n \n    // User name when the action was performed \n    public userName: string;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: string;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { AbsoluteTimeFrame } from '../common/AbsoluteTimeFrame';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Calendar type specifies list of events or holidays \n*/\nexport class Calendar extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Folder Id (use empty string to associate the calendar to the account level) \n    public folderId: string;\n \n    // Calendar name \n    public name: string;\n \n    // Calendar description \n    public description: string;\n \n    // Is this calendar is enabled \n    public enabled: boolean;\n \n    // List of time frames \n    public timeFrames: AbsoluteTimeFrame[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\n\n/* \n   SW Component version type \n*/\nexport class ComponentConfiguration {\n \n    // Component Id \n    public id: string;\n \n    // Docker image name (including tag and docker registry) \n    public dockerImage: string;\n \n    // List of environment variables to inject (as key-value pairs) \n    public variables: StringKeyValue[];\n \n    constructor(id?: string, dockerImage?: string, variables?: StringKeyValue[]) { \n        this.id = id;\n        this.dockerImage = dockerImage;\n        this.variables = variables;\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { ProductTypeCode } from '../enums/ProductTypeCode';\n\n/* \n   SW Configuration type \n*/\nexport class Configuration extends BaseEntity {\n \n    // Configuration description \n    public description: string;\n \n    // Current configuration version \n    public currentVersion: string;\n \n    // List of target product types this configuration applies to \n    public targets: ProductTypeCode[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   SW Configuration template type \n*/\nexport class ConfigurationTemplate extends BaseEntity {\n \n    // Docker image name (including tag and docker registry) \n    public dockerImage: string;\n \n    // List of environment variables with default values \n    public variables: StringKeyValue[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { ComponentConfiguration } from '../entities/ComponentConfiguration';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   SW Configuration version type \n*/\nexport class ConfigurationVersion extends BaseEntity {\n \n    // Configuration Id \n    public configurationId: string;\n \n    // Version Number \n    public versionNum: number;\n \n    // Version description \n    public description: string;\n \n    // List of Configuration version components \n    public components: ComponentConfiguration[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { Coordinate } from '../common/Coordinate';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { ObjectInfo } from '../common/ObjectInfo';\n\n/* \n   Detection event type \n*/\nexport class Event extends BaseEntity {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // When the event was detected [Epoch milliseconds Timestamp] \n    public eventTime: number;\n \n    // Rule Id \n    public ruleId: string;\n \n    // Event description (free text as provided by the event source - event engine, anomaly, custom, FR, LPR ...) \n    public description: string;\n \n    // Breached rule type \n    public ruleType: RuleTypeCode;\n \n    // Detected object type (UNKNOWN | PERSON | VEHICLE | BUS | TRACK ...) \n    public objectType: ObjectTypeCode;\n \n    // Detected object type (UNKNOWN | PERSON | VEHICLE | BUS | TRACK ...) \n    public behaviorType: BehaviorTypeCode;\n \n    // Validation status for event processing workflow: NEW | OPEN | CLOSE | IRRELEVANT | FALSE \n    public status: EventStatusCode;\n \n    // Event geo location (WGS-84 coordinate system). This field is applicable only if the sensor is geo-referenced. \n    public geoLocation: Coordinate;\n \n    // Event image path \n    public imagePath: string;\n \n    // Event clip path \n    public clipPath: string;\n \n    // Event severity level: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Event image time [Epoch milliseconds Timestamp] \n    public imageTime: number;\n \n    // Detected object information \n    public eventObjects: ObjectInfo[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Detection event type \n*/\nexport class EventStatistics extends BaseEntity {\n \n    // Sample time (hour granularity) \n    public sampleTime: number;\n \n    // Real time events count \n    public eventCount: number;\n \n    // Anomaly events count \n    public anomalyCount: number;\n \n    // Custom events count \n    public customCount: number;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   System functionality (feature) description \n*/\nexport class Feature extends BaseEntity {\n \n    // Feature name \n    public name: string;\n \n    // Feature description \n    public description: string;\n \n    // Feature category \n    public category: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Group of features \n*/\nexport class FeaturesGroup extends BaseEntity {\n \n    // Features group name \n    public name: string;\n \n    // List of associated features ids \n    public features: string[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Folder (container for sensors and sub folders) \n*/\nexport class Folder extends BaseEntity {\n \n    // Folder parent Id (Empty if folder is in the root) \n    public parentId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Folder name \n    public name: string;\n \n    // Folder hierarchy depth \n    public depth: number;\n \n    // Folder geo area polygon (the bounding polygon of the area) \n    public geoArea: Coordinate[];\n \n    // Folder geo location (the center coordinate of the account region) \n    public geoLocation: Coordinate;\n \n    // Folder timezone (IANA format, default is UTC) \n    public timezone: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { EventAction } from '../common/EventAction';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Integration action describes integration protocol and details to execute \n*/\nexport class IntegrationAction extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Folder Id (Empty if integration is associated to the account level) \n    public folderId: string;\n \n    // Integration name \n    public name: string;\n \n    // Integration action to perform per event \n    public eventAction: EventAction;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { IntegrationTypeCode } from '../enums/IntegrationTypeCode';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Integration target describes connectivity details of the integrated system\n   Definition of target systems is done by the account administrator only\n   Account administrator Supervisor roles can define specific integrations per account / folder \n*/\nexport class IntegrationTarget extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Integration name \n    public name: string;\n \n    // Integration type (SMTP | HTTP | IMMIX | SENTINEL | MILESTONE | GENETEC) \n    public type: IntegrationTypeCode;\n \n    // Integration protocol: smtp | http | https \n    public protocol: string;\n \n    // Operation: GET | POST | PUT (applicable for http/https protocols) \n    public operation: string;\n \n    // Host name or ip address (applicable for all protocols) \n    public host: string;\n \n    // Port number (applicable for all protocols) \n    public port: number;\n \n    // User (applicable for all protocols) \n    public user: string;\n \n    // Password (applicable for all protocols) \n    public password: string;\n \n    // URL path (applicable for http/https protocols) \n    public url: string;\n \n    // Headers (applicable for http/https protocols) \n    public headers: StringKeyValue[];\n \n    // List of recipients (applicable for smtp protocol) \n    public recipients: string[];\n \n    // Message subject template (applicable for smtp protocol) \n    public subject: string;\n \n    // Message body template (applicable for all protocols) \n    public body: string;\n \n    // Is clip required for the integration \n    public clipRequired: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   License information includes on-premises deployment's license restrictions \n*/\nexport class License extends BaseEntity {\n \n    // Customer Id (Provided by the CRM) \n    public customerId: string;\n \n    // Customer name (Provided by the CRM) \n    public customerName: string;\n \n    // Deployment name (site or system name) \n    public deploymentName: string;\n \n    // When the license will expire [Epoch milliseconds Timestamp] - 0 for no expiration \n    public expiration: number;\n \n    // Limit number of connected channels \n    public channelsLimit: number;\n \n    // Limit number of virtual devices \n    public devicesLimit: number;\n \n    // List of enabled features \n    public features: string[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Sensor preset represent specific sensor FOV attributes.\n   In a fixed camera there is only one preset (0), in a PTZ cameras, user can specify multiple FOVs each has its own preset \n*/\nexport class Preset extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Preset number (0 for default) \n    public presetNum: number;\n \n    // Reference Image Url \n    public refImageUrl: string;\n \n    // Sensor preset calibration info \n    public calibration: any;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Query definitions for report specification \n*/\nexport class ReportDefinition extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User who created the report \n    public userId: string;\n \n    // Report name \n    public name: string;\n \n    // Search Tag (for organizing report definitions in folder-like structure) \n    public tag: string;\n \n    // Is the search definition is private (accessible by owner only) or public (accessible by all account users) \n    public privateReport: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { Sensitivity } from '../common/Sensitivity';\nimport { RulePolygon } from '../common/RulePolygon';\n\n/* \n   Rule Represents real-time analytic rule, the structure is a union of all the attributes used by all the types of\n   real-time rules (crossing, moving, grouping ...) hence not all attributes are used for every rule type \n*/\nexport class Rule extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Rule name \n    public name: string;\n \n    // Rule description \n    public description: string;\n \n    // Schedule Id \n    public scheduleId: string;\n \n    // Indicate if the rule is active (default) or inactive \n    public active: boolean;\n \n    // Rule external id (how the rule is identified in other system) \n    public externalId: string;\n \n    // Rule type: MOVING | CROSSING | OCCUPANCY ... \n    public ruleType: RuleTypeCode;\n \n    // Rule behavior type: MOVING | CROSSING | OCCUPANCY ... \n    public behaviorType: BehaviorTypeCode;\n \n    // Rule object types: PERSON | VEHICLE | MOTORCYCLE ... \n    public objectTypes: ObjectTypeCode[];\n \n    // Default severity level for this rule: UNDEFINED | LOW | MEDIUM | HIGH | CRITICAL \n    public severity: SeverityTypeCode;\n \n    // Sensitivity (for Anomaly) \n    public sensitivity: Sensitivity;\n \n    // Dwell time [seconds] \n    public dwellTime: number;\n \n    // Max number of people in group (for Occupancy rule) \n    public maxObjectsInGroup: number;\n \n    // List of polygons \n    public polygons: RulePolygon[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { RecurrentTimeFrame } from '../common/RecurrentTimeFrame';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Schedule is a list of recurrent time frames to specify active analytics \n*/\nexport class Schedule extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Folder Id (use empty string to associate the schedule to the account level) \n    public folderId: string;\n \n    // Schedule name \n    public name: string;\n \n    // Schedule description \n    public description: string;\n \n    // Is this schedule is enabled \n    public enabled: boolean;\n \n    // Account timezone (IANA format, default is UTC) \n    public timezone: string;\n \n    // List of time frames \n    public timeFrames: RecurrentTimeFrame[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { Recurrent } from '../common/Recurrent';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Scheduled Report defines when to aut generate report and whet to do with it \n*/\nexport class ScheduledReport extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // report Id \n    public reportId: string;\n \n    // Schedule report name \n    public name: string;\n \n    // Recurrent definition \n    public recurrent: Recurrent;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { SearchObject } from '../common/SearchObject';\nimport { SearchTimeCode } from '../enums/SearchTimeCode';\nimport { TimeFrame } from '../common/TimeFrame';\nimport { SearchScopeCode } from '../enums/SearchScopeCode';\nimport { GeoCircle } from '../common/GeoCircle';\nimport { GeoPolygon } from '../common/GeoPolygon';\n\n/* \n   Query definitions for ad-hoc search specification \n*/\nexport class SearchDefinition extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User Id who created the search \n    public userId: string;\n \n    // Search name \n    public name: string;\n \n    // Search Tag (for organizing search definitions in folder-like structure) \n    public tag: string;\n \n    // Is the search definition is private (accessible by owner only) or public (accessible by all account users) \n    public privateSearch: boolean;\n \n    // Objects attributes to search for (what) \n    public objects: SearchObject[];\n \n    // Time scope to search for (CUSTOM or Duration format [PnDTnHnMn] e.g. PT24H) \n    public timeScope: SearchTimeCode;\n \n    // Time frame to search for (applicative only if search scope is CUSTOM) \n    public timeFrame: TimeFrame;\n \n    // Scope of source: UNDEFINED | SENSORS | FOLDERS | GEO_CIRCLE | GEO_POLYGON \n    public sourceScope: SearchScopeCode;\n \n    // Cameras scope - list of sensor ids to perform search on (applicable for search scope = SENSORS) \n    public sensorIds: string[];\n \n    // Folders scope - list of folder ids to perform search on (applicable for search scope = FOLDERS) \n    public folderIds: string[];\n \n    // Circular area on map to limit the search (applicable for search scope = GEO_CIRCLE) \n    public geoCircle: GeoCircle;\n \n    // Polygon area on the map to limit the search (applicable for search scope = GEO_POLYGON) \n    public geoPolygon: GeoPolygon;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { SensorResolutionCode } from '../enums/SensorResolutionCode';\nimport { FovGeoAttributes } from '../common/FovGeoAttributes';\nimport { StringKeyValue } from '../common/StringKeyValue';\nimport { SensorDebugInfo } from '../entities/SensorDebugInfo';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\nimport { Coordinate } from '../common/Coordinate';\n\n/* \n   Sensor type \n*/\nexport class Sensor extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Folder Id (empty for root folder) \n    public folderId: string;\n \n    // Appliance Id \n    public applianceId: string;\n \n    // Agent Id (Relevant for new pipeline only) \n    public agentId: string;\n \n    // Sensor name \n    public name: string;\n \n    // Sensor type: CCD | THERMAL \n    public type: SensorTypeCode;\n \n    // Sensor status: UNDEFINED | ACTIVE | WARNING | ERROR | INACTIVE | SUSPENDED | PENDING \n    public status: SensorStatusCode;\n \n    // Sensor video stream type: UNDEFINED | RTSP | ONVIF | CLIP | RTP | MULTICAST | KINESIS \n    public streamType: StreamTypeCode;\n \n    // Sensor resolution (image quality): LOW (0) | MEDIUM (1) | HIGH (2) \n    public imageResolution: SensorResolutionCode;\n \n    // Flag to indicate if sensor is recording video \n    public recording: boolean;\n \n    // Flag to indicate if sensor should send metadata \n    public metadata: boolean;\n \n    // Flag to indicate if anomaly detection is enabled for this sensor \n    public anomalyDetection: boolean;\n \n    // Flag to indicate if sensor was enabled by user \n    public enabledByUser: boolean;\n \n    // Minimal time interval between alarms (in seconds) - 0 for no interval \n    public alarmInterval: number;\n \n    // Max number of bounding box per frame \n    public maxBBoxPerFrame: number;\n \n    // Max frame rate \n    public maxFrameRate: number;\n \n    // Video stream source URI \n    public streamUri: string;\n \n    // Sensor geo location (WGS-84 coordinate system) \n    public geoLocation: Coordinate;\n \n    // Sensor FOV azimuth (0 - 359) \n    public azimuth: number;\n \n    // Field of View Geo attributes (used for FOV to WGS-84 transformations) \n    public fovAttributes: FovGeoAttributes;\n \n    // Flag to indicate if sensor optimization is enabled \n    public optimizationEnabled: boolean;\n \n    // External id (camera id in external system) \n    public externalId: string;\n \n    // User defined tags (list of key-value pairs) \n    public tags: StringKeyValue[];\n \n    // Sensor debug information flags \n    public debugInfo: SensorDebugInfo;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { AnalysisResult } from '../common/AnalysisResult';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Sensor training analysis results\n   This data is used by the training process of Anomaly Detection\n   The entity Id is the sensorId \n*/\nexport class SensorAnalysisResults extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // List of analysis results (model + file path) \n    public results: AnalysisResult[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","\n/* \n   Sensor debug information \n*/\nexport class SensorDebugInfo {\n \n    // Flag to indicate the agent to save Deep Learning image crops for debugging \n    public saveCrops: boolean;\n \n    // Flag to indicate the agent to save frames for debugging \n    public saveFrames: boolean;\n \n    // Flag to indicate the agent to save event images for debugging \n    public saveEventImages: boolean;\n \n    constructor(saveCrops?: boolean, saveFrames?: boolean, saveEventImages?: boolean) { \n        this.saveCrops = saveCrops;\n        this.saveFrames = saveFrames;\n        this.saveEventImages = saveEventImages;\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { SensorStatusMask } from '../enums/SensorStatusMask';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\n\n/* \n   Sensor health status \n*/\nexport class SensorHealth extends BaseEntity {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Sensor status mask \n    public mask: SensorStatusMask;\n \n    // UNDEFINED | ACTIVE | WARNING | ERROR | INACTIVE | SUSPENDED | PENDING \n    public status: SensorStatusCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { SensorStatusMask } from '../enums/SensorStatusMask';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Sensor health status \n*/\nexport class SensorStatus extends BaseEntity {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Sensor status mask \n    public mask: SensorStatusMask;\n \n    // UNDEFINED | ACTIVE | WARNING | ERROR | INACTIVE | SUSPENDED | PENDING \n    public status: SensorStatusCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Software update status type \n*/\nexport class UpdateStatus extends BaseEntity {\n \n    // Update time [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Account Id \n    public accountId: string;\n \n    // Appliance Id \n    public applianceId: string;\n \n    // Software component \n    public component: string;\n \n    // Software component version \n    public version: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   User type \n*/\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Password salt \n    public salt: string;\n \n    // Password hash \n    public hash: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    public suspendedOn: number;\n \n    // Number of Sign-in Attempts \n    public signInAttempts: number;\n \n    // Last Failed Sign-in [Epoch milliseconds Timestamp] \n    public lastFailedSignIn: number;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // When user created his password [Epoch milliseconds Timestamp] \n    public passwordChangedOn: number;\n \n    // List of accounts and roles the user has access to \n    public accountRoles: AccountRole[];\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Verification type used to verify user with a temporary code \n*/\nexport class Verification extends BaseEntity {\n \n    // Verification code \n    public code: string;\n \n    // Verification for user id \n    public userId: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    public sent: number;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","/* \n   Account role code (represent role of user in the account) \n*/\nexport enum AccountRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Supervisor can perform all operations on folders [2] \n    SUPERVISOR = 2,\n \n    // Account operator can perform operations on events [3] \n    OPERATOR = 3,\n \n    // Registered account user [4] \n    USER = 4,\n \n    // Edge config user (installer) [5 \n    INSTALLER = 5,\n \n}","/* \n   Account status code \n*/\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","/* \n   Account type code \n*/\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for Agent Vi [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for partner [3] \n    PARTNER = 3,\n \n    // Deleted account [4] \n    CUSTOMER = 4,\n \n}","/* \n   Agent (New Pipeline) status code \n*/\nexport enum AgentStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Agent is running [1] \n    ACTIVE = 1,\n \n    // Agent in Warning state [2] \n    WARNING = 2,\n \n    // Agent in Error state [3] \n    ERROR = 3,\n \n    // Agent is not active [4] \n    INACTIVE = 4,\n \n    // Agent was added but did not establish connection yet [5] \n    PENDING = 5,\n \n}","/* \n   Appliance command code.\n   Message payload includes command specific data \n*/\nexport enum ApplianceCommandCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Send capabilities (no payload) [1] \n    GET_CAPABILITIES = 1,\n \n    // Set components configuration (or add it if not exists) [2] \n    SET_COMPONENTS = 2,\n \n    // Remove components (command payload described in ApplianceCommandRemoveChannel) [3] \n    REMOVE_COMPONENTS = 3,\n \n    // Restart component containers (currently do not implement) [4] \n    RESTART_COMPONENTS = 4,\n \n    // Send list of all running containers (no payload) [5] \n    LIST_CONTAINERS = 5,\n \n    // Send logs of specified component (provided in the command payload) [6] \n    SEND_LOGS = 6,\n \n    // Send status (no payload) [7] \n    SEND_STATUS = 7,\n \n    // Reset appliance credentials (no payload) [8] \n    RESET_CREDENTIALS = 8,\n \n    // Reboot host (no payload) [9] \n    REBOOT_HOST = 9,\n \n    // Reset to factory mode (remove all container except manager) [10] \n    FACTORY_RESET = 10,\n \n    // Open SSH tunnel [11] \n    OPEN_SSH = 11,\n \n    // Close SSH tunnel [12] \n    CLOSE_SSH = 12,\n \n}","/* \n   Appliance status code \n*/\nexport enum ApplianceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Appliance is running [1] \n    ACTIVE = 1,\n \n    // Appliance in Warning state [2] \n    WARNING = 2,\n \n    // Appliance in Error state [3] \n    ERROR = 3,\n \n    // Appliance is not active [4] \n    INACTIVE = 4,\n \n    // Appliance was added but did not establish connection yet [5] \n    PENDING = 5,\n \n    // Appliance is paired but not registered yet [6] \n    UNREGISTERED = 6,\n \n    // Appliance deleted from the system [9] \n    DELETED = 9,\n \n}","/* \n   Detected object behavior type code\n   Values with INNOVI prefix represents standard innoVi model behaviour, all other values represent custom models behaviour \n*/\nexport enum BehaviorTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Crossing a Line (innoVi) [1] \n    INNOVI_CROSSING = 1,\n \n    // Moving in an area (innoVi) [2] \n    INNOVI_MOVING = 2,\n \n    // Stopped vehicle (innoVi) [3] \n    INNOVI_STOPPED = 3,\n \n    // Occupancy (innoVi) [4] \n    INNOVI_OCCUPANCY = 4,\n \n    // Grouping (innoVi) [5] \n    INNOVI_GROUPING = 5,\n \n    // Ignore mask (innovi 1) [100] \n    INNOVI_MASK_IGNORE = 100,\n \n    // Shutdown mask (Currently unused) [101] \n    INNOVI_MASK_SHUTDOWN = 101,\n \n    // General Anomaly (innoVi) [200] \n    INNOVI_ANOMALY = 200,\n \n    // Hard hat object exists (custom: Hard Hat) [1001] \n    HARD_HAT_EXISTS = 1001,\n \n    // Hard hat object not exists (custom: Hard Hat) [1002] \n    HARD_HAT_NOT_EXISTS = 1002,\n \n    // Trash object exists (custom: Trash Dumping) [1101] \n    TRASH_EXISTS = 1101,\n \n    // Trash object not exists (custom: Trash Dumping) [1102] \n    TRASH_NOT_EXISTS = 1102,\n \n    // MCC object exists (custom: MCC) [1201] \n    MCC_EXISTS = 1201,\n \n    // MCC object not exists (custom: MCC) [1202] \n    MCC_NOT_EXISTS = 1202,\n \n}","/* \n   Detected color of object (or partial object) \n*/\nexport enum ColorCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // No color [1] \n    NONE = 1,\n \n    // Unknown color [2] \n    UNKNOWN = 2,\n \n    // Multiple colors [3] \n    MULTICOLORED = 3,\n \n    // White [4] \n    WHITE = 4,\n \n    // Black [5] \n    BLACK = 5,\n \n    // Gray [6] \n    GRAY = 6,\n \n    // Blue [7] \n    BLUE = 7,\n \n    // Brown [8] \n    BROWN = 8,\n \n    // Green [9] \n    GREEN = 9,\n \n    // Yellow [10] \n    YELLOW = 10,\n \n    // Orange [11] \n    ORANGE = 11,\n \n    // Red [12] \n    RED = 12,\n \n    // Pink [13] \n    PINK = 13,\n \n    // Purple [14] \n    PURPLE = 14,\n \n    // Cyan [15] \n    CYAN = 15,\n \n    // Silver [16] \n    SILVER = 16,\n \n}","/* \n   Detected color type (colored location of object) \n*/\nexport enum ColorTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Body color (for person) [1] \n    BODY = 1,\n \n    // Upper body color (for person) [2] \n    UPPER_BODY = 2,\n \n    // Lower body color (for person) [3] \n    LOWER_BODY = 3,\n \n    // Hat color (for person) [4] \n    HAT = 4,\n \n    // Hair color (for person) [5] \n    HAIR = 5,\n \n    // Bag color (for person) [6] \n    BAG = 6,\n \n}","/* \n   Appliance command status \n*/\nexport enum CommandStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Pending command [1] \n    PENDING = 1,\n \n    // Command in progress [2] \n    EXECUTING = 2,\n \n    // Command completed successfully [3] \n    COMPLETED = 3,\n \n    // Command failed [4] \n    FAILED = 4,\n \n}","/* \n   Day of week code (based on ISO-8601) \n*/\nexport enum DayOfWeekCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sunday [7] \n    SUN = 7,\n \n    // Monday [1] \n    MON = 1,\n \n    // Tuesday [2] \n    TUE = 2,\n \n    // Wednesday [3] \n    WED = 3,\n \n    // Thursday [4] \n    THU = 4,\n \n    // Friday [5] \n    FRI = 5,\n \n    // Saturday [6] \n    SAT = 6,\n \n}","/* \n   Event status code \n*/\nexport enum EventStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // New event [1] \n    NEW = 1,\n \n    // Open (in-progress) event [2] \n    OPEN = 2,\n \n    // Closed event (tagged as True event) [7] \n    CLOSED_TRUE = 7,\n \n    // Closed event (tagged as False event) [8] \n    CLOSED_FALSE = 8,\n \n    // Closed event (tagged as irrelevant anomaly event) [9] \n    CLOSED_IRRELEVANT = 9,\n \n}","/* \n   Integration type code \n*/\nexport enum IntegrationTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // General SMTP based integration [1] \n    SMTP = 1,\n \n    // Immix integration (based on smtp protocol) [2 \n    IMMIX = 2,\n \n    // Sentinel integration (based on smtp protocol) [3] \n    SENTINEL = 3,\n \n    // Web-hook integration (based on http protocol) [4] \n    WEBHOOK = 4,\n \n    // Milestone integration (based on http protocol) [5] \n    MILESTONE = 5,\n \n    // Genetec integration (based on http protocol) [6] \n    GENETEC = 6,\n \n}","/* \n   Line crossing direction (used by rule definition) \n*/\nexport enum LineCrossDirectionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // In direction [1] \n    IN = 1,\n \n    // Out direction [2] \n    OUT = 2,\n \n    // Bi-direction (both IN and Out) [3] \n    BI = 3,\n \n}","/* \n   Map client code (represent which map client library to use in the UI) \n*/\nexport enum MapClientCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Google maps client [1] \n    GOOGLE = 1,\n \n    // LeafLet map client [2] \n    LEAFLET = 2,\n \n    // ESRI client (not implemented) [3] \n    ESRI = 3,\n \n    // MapInfo client (not implemented) [4] \n    MAPINFO = 4,\n \n}","/* \n   Detected object type code\n   Values with INNOVI prefix represents standard innoVi model objects, all other values represent custom models objects \n*/\nexport enum ObjectTypeCode {\n \n    // Undefined 0 \n    UNDEFINED = 0,\n \n    // Unknown group of objects 16842752 \n    INNOVI_UNKNOWNS = 16842752,\n \n    // Unknown object 16843008 \n    INNOVI_UNKNOWNS_UNKNOWN = 16843008,\n \n    // Vegetation 16843264 \n    INNOVI_UNKNOWNS_VEGETATION = 16843264,\n \n    // Cloud 16843520 \n    INNOVI_UNKNOWNS_CLOUD = 16843520,\n \n    // Abstract group of people 16908288 \n    INNOVI_PEOPLE = 16908288,\n \n    // Person standing upright 16908544 \n    INNOVI_PEOPLE_PERSON_STANDING = 16908544,\n \n    // Person sitting/lying down 16908800 \n    INNOVI_PEOPLE_PERSON_ON_THE_GROUND = 16908800,\n \n    // Person from an overhead camera 16909056 \n    INNOVI_PEOPLE_PERSON_OVERHEAD = 16909056,\n \n    // Abstract group of vehicles 16973824 \n    INNOVI_VEHICLE = 16973824,\n \n    // Car 16974080 \n    INNOVI_VEHICLE_CAR = 16974080,\n \n    // Bus 16974336 \n    INNOVI_VEHICLE_BUS = 16974336,\n \n    // School Bus 16974337 \n    INNOVI_VEHICLE_SCHOOL_BUS = 16974337,\n \n    // Mini Bus 16974338 \n    INNOVI_VEHICLE_MINI_BUS = 16974338,\n \n    // Pickup Truck 16974592 \n    INNOVI_VEHICLE_PICKUP_TRUCK = 16974592,\n \n    // SUV 16974848 \n    INNOVI_VEHICLE_SUV = 16974848,\n \n    // Van 16975104 \n    INNOVI_VEHICLE_VAN = 16975104,\n \n    // Small Truck 16975360 \n    INNOVI_VEHICLE_SMALL_TRUCK = 16975360,\n \n    // Medium Truck 16975616 \n    INNOVI_VEHICLE_MEDIUM_TRUCK = 16975616,\n \n    // Big Truck 16975872 \n    INNOVI_VEHICLE_BIG_TRUCK = 16975872,\n \n    // Tractor 16976128 \n    INNOVI_VEHICLE_TRACTOR = 16976128,\n \n    // Any vehicle at night 16977920 \n    INNOVI_VEHICLE_NIGHT = 16977920,\n \n    // Abstract group of two wheelers 17039360 \n    INNOVI_TWOWHEELED = 17039360,\n \n    // Bicycle 17039616 \n    INNOVI_TWOWHEELED_BICYCLE = 17039616,\n \n    // Motorcycle 17039872 \n    INNOVI_TWOWHEELED_MOTORCYCLE = 17039872,\n \n    // Abstract group of animals 17104896 \n    INNOVI_ANIMAL = 17104896,\n \n    // Bird 17105152 \n    INNOVI_ANIMAL_BIRD = 17105152,\n \n    // Small animal (ie. Cats/Dogs) 17105408 \n    INNOVI_ANIMAL_SMALL = 17105408,\n \n    // Large animal (ie. Horses/Cows) 17105664 \n    INNOVI_ANIMAL_LARGE = 17105664,\n \n    // Abstract group of Hard Hat 33619968 \n    HARD_HAT_PERSON = 33619968,\n \n    // Person with hard hat 33620224 \n    HARD_HAT_PERSON_WITH_HARDHAT = 33620224,\n \n    // Person without hard hat 33620480 \n    HARD_HAT_PERSON_WITHOUT_HARDHAT = 33620480,\n \n    // Abstract group of trash bin 50397184 \n    TRASH_BIN = 50397184,\n \n    // Trash bin 50397440 \n    TRASH_BIN_TRASH = 50397440,\n \n    // Abstract group of MCC vehicle 67174400 \n    MCC_VEHICLE = 67174400,\n \n    // MCC Taxi 67174656 \n    MCC_VEHICLE_TAXI = 67174656,\n \n    // MCC School Bus 67174912 \n    MCC_VEHICLE_SCHOOL_BUS = 67174912,\n \n}","/* \n   Product type code \n*/\nexport enum ProductTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Edge 200 [200] \n    EDGE_200 = 200,\n \n    // Edge 220 [220] \n    EDGE_220 = 220,\n \n    // Edge 250 [250] \n    EDGE_250 = 250,\n \n    // Edge 500 [500] \n    EDGE_500 = 500,\n \n    // Virtual Edge [1] \n    VIRTUAL = 1,\n \n}","/* \n   Detection rule type code\n   Values with INNOVI prefix represents standard innoVi rules, all other values represent custom rules \n*/\nexport enum RuleTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Crossing a Line (innoVi) [1] \n    INNOVI_RULE_CROSSING = 1,\n \n    // Moving in an area (innoVi) [2] \n    INNOVI_RULE_MOVING = 2,\n \n    // Stopped vehicle (innoVi) [4] \n    INNOVI_RULE_STOPPED = 4,\n \n    // Occupancy (innoVi) [8] \n    INNOVI_RULE_OCCUPANCY = 8,\n \n    // Grouping (innoVi) [16] \n    INNOVI_RULE_GROPPING = 16,\n \n    // Anomaly (innoVi) [2048] \n    INNOVI_ANOMALY = 2048,\n \n    // Hard hat custom rule (custom: Hard Hat) [4096] \n    CUSTOM_HARD_HAT = 4096,\n \n    // Trash dumping custom rule (custom: Trash Dumping) [8192] \n    CUSTOM_TRASH = 8192,\n \n    // MCC custom rules (custom: MCC) [16384] \n    CUSTOM_MCC = 16384,\n \n}","/* \n   Search scope \n*/\nexport enum SearchScopeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Search by sensors [1] \n    SENSORS = 1,\n \n    // Search by folders [2] \n    FOLDERS = 2,\n \n    // Search by circle on map [3] \n    GEO_CIRCLE = 3,\n \n    // Search by polygon on map [4] \n    GEO_POLYGON = 4,\n \n}","/* \n   Search time \n*/\nexport enum SearchTimeCode {\n \n    // Custom time frame [0] \n    CUSTOM = 0,\n \n    // Last hour [1] \n    LAST_1H = 1,\n \n    // Last 3 hours [3] \n    LAST_3H = 3,\n \n    // Last 6 hours [6] \n    LAST_6H = 6,\n \n    // Last 12 hours [12] \n    LAST_12H = 12,\n \n    // Last 24 hours [24] \n    LAST_24H = 24,\n \n    // Last 48 hours [48] \n    LAST_48H = 48,\n \n}","/* \n   Bit mask to indicate sensor configuration changes (what part of the sensor configuration has changed)\n   Since it is a bit mask, the actual value can be a combination of the listed enum values \n*/\nexport enum SensorConfigChangeMask {\n \n    // Sensor has been removed from the system \n    DELETED = 0,\n \n    // Sensor data has changed in the sensor configuration (requires agent reload) \n    SENSOR = 1,\n \n    // Rules attributes changed in the sensor configuration \n    RULES = 2,\n \n    // Sensor calibration has changed in the sensor configuration \n    CALIBRATION = 4,\n \n}","/* \n   Sensor resolution (image quality) code \n*/\nexport enum SensorResolutionCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Low resolution [1] \n    LOW = 1,\n \n    // Medium resolution [2] \n    MEDIUM = 2,\n \n    // High resolution [3] \n    HIGH = 3,\n \n}","/* \n   Sensor status code \n*/\nexport enum SensorStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sensor is running [1] \n    ACTIVE = 1,\n \n    // Sensor in Warning state [2] \n    WARNING = 2,\n \n    // Sensor in Error state [3] \n    ERROR = 3,\n \n    // Sensor is not active [4] \n    INACTIVE = 4,\n \n    // Suspended (banned) sensor [5] \n    SUSPENDED = 5,\n \n    // Sensor was added but did not establish connection yet [6] \n    PENDING = 6,\n \n}","/* \n   Sensor status mask code - the bit mask representing detailed sensor status \n*/\nexport enum SensorStatusMask {\n \n    // [OK] No error [0x0000000000000000] \n    SENSOR_OK = 0,\n \n    // [ERROR] General sensor error [0x0000000000000001] \n    SENSOR_ERROR = 1,\n \n    // [ERROR] Sensor can't read video stream or stream is not valid [0x0000000000000010] \n    SOURCE_ERROR = 16,\n \n    // [ERROR] Video stream format is not supported [0x0000000000000020] \n    UNSUPPORTED_FORMAT = 32,\n \n    // [ERROR] Video stream resolution is not supported [0x0000000000000040] \n    UNSUPPORTED_RESOLUTION = 64,\n \n    // [ERROR] Video stream FPS is 0 for one minute [0x0000000000000100] \n    FRAMERATE_CRITICAL = 256,\n \n    // [WARNING] Video stream FPS is less than 6 for one minute [0x0000000000000200] \n    FRAMERATE_LOW = 512,\n \n    // [WARNING] Video stream FPS is more than 30 for one minute [0x0000000000000400] \n    FRAMERATE_HIGH = 1024,\n \n    // [WARNING] Image from video source is blocked [0x0000000000001000] \n    IMAGE_BLOCKED = 4096,\n \n    // [WARNING] Image from video source is saturated [0x0000000000002000] \n    IMAGE_SATURATED = 8192,\n \n    // [WARNING] Image from video source is dark [0x0000000000004000] \n    IMAGE_DARK = 16384,\n \n}","/* \n   Sensor type code \n*/\nexport enum SensorTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // CCD color camera [1] \n    CCD = 1,\n \n    // Thermal camera [2] \n    THERMAL = 2,\n \n}","/* \n   Severity type (level) code \n*/\nexport enum SeverityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Low severity [1] \n    LOW = 1,\n \n    // Medium severity [2] \n    MEDIUM = 2,\n \n    // High severity [3] \n    HIGH = 3,\n \n    // Critical severity [4] \n    CRITICAL = 4,\n \n}","/* \n   Video stream type (source) code \n*/\nexport enum StreamTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // RTSP stream [1] \n    RTSP = 1,\n \n    // ONVIF stream [2] \n    ONVIF = 2,\n \n    // Video clip from file [3] \n    CLIP = 3,\n \n    // RTP stream [4] \n    RTP = 4,\n \n    // MULTICAST stream [5] \n    MULTICAST = 5,\n \n    // AWS KINESIS stream [6] \n    KINESIS = 6,\n \n}","/* \n   Time unit interval \n*/\nexport enum TimeUnitCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Second interval [1] \n    SECOND = 1,\n \n    // Minute interval [2] \n    MINUTE = 2,\n \n    // Hour interval [3] \n    HOUR = 3,\n \n    // Day interval [4] \n    DAY = 4,\n \n    // Week interval [5] \n    WEEK = 5,\n \n    // Month interval [6] \n    MONTH = 6,\n \n}","/* \n   User status code \n*/\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 4,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 8,\n \n}","/* \n   User type code \n*/\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // System user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n}","/* \n   Sensor visual quality code \n*/\nexport enum VisualQualityCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Low visual quality [1] \n    LOW = 1,\n \n    // Medium visual quality [2] \n    MEDIUM = 2,\n \n    // High visual quality [3] \n    HIGH = 3,\n \n}","/* \n   Zone type code (used by rule definition) \n*/\nexport enum ZoneTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Area of interest [1] \n    AOI = 1,\n \n    // Masked area [2] \n    MASK = 2,\n \n    // Block [3] \n    BLOCK = 3,\n \n    // Shutdown mask [4] \n    SHUTDOWN = 4,\n \n}","\n/*  \n*/\nexport class AccountIdRequest {\n \n    // Account Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AccountIdsRequest {\n \n    // Account Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AccountsServiceChangeGroupsRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account Group Id list (e.g. ?groupId=1&groupId=2&groupId=3 ...) \n    public groupId: string[];\n \n    constructor(id?: string, groupId?: string[]) { \n        this.id = id;\n        this.groupId = groupId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AccountsServiceChangeNameRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/*  \n*/\nexport class AccountsServiceChangeStatusRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account status to update \n    public status: AccountStatusCode;\n \n    constructor(id?: string, status?: AccountStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\n\n/*  \n*/\nexport class AccountsServiceChangeTypeRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account type to update \n    public type: AccountTypeCode;\n \n    constructor(id?: string, type?: AccountTypeCode) { \n        this.id = id;\n        this.type = type;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n/*  \n*/\nexport class AccountsServiceCreateRequest {\n \n    // Account data \n    public body: Account;\n \n    constructor(body?: Account) { \n        this.body = body;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/*  \n*/\nexport class AccountsServiceFindRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by account type(s) (empty or UNDEFINED for no filter) \n    public type: AccountTypeCode[];\n \n    // Filter by account status(s) (empty or UNDEFINED for no filter) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n/*  \n*/\nexport class AccountsServiceUpdateRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account data \n    public body: Account;\n \n    constructor(id?: string, body?: Account) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/* \n   Entity action response message returned for any create/update action on entity \n*/\nexport class ActionResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Entity key \n    public key: string;\n \n    // Additional data \n    public data: string;\n \n    constructor(code?: number, error?: string, key?: string, data?: string) { \n        this.code = code;\n        this.error = error;\n        this.key = key;\n        this.data = data;\n    }\n\n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\n\n/*  \n*/\nexport class AnomalyServiceFindEventsRequest {\n \n    // Filter by account Id \n    public accountId: string;\n \n    // Filter by sensor Id \n    public sensorId: string;\n \n    // Filter by event status (empty for no filter) \n    public status: EventStatusCode;\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, sensorId?: string, status?: EventStatusCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.sensorId = sensorId;\n        this.status = status;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AnomalyServiceFindRequest {\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(page?: number, pageSize?: number) { \n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { AnalysisResult } from '../common/AnalysisResult';\n\n/*  \n*/\nexport class AnomalyServiceUpdateRequest {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // Sensor analysis results to update \n    public body: AnalysisResult;\n \n    constructor(sensorId?: string, body?: AnalysisResult) { \n        this.sensorId = sensorId;\n        this.body = body;\n    }\n\n}\n\n\n","import { SensorAnomalyRuleInfo } from '../common/SensorAnomalyRuleInfo';\n\n/*  \n*/\nexport class AnomalyServiceUpdateRuleRequest {\n \n    // Sensor Id \n    public sensorId: string;\n \n    // \n    public body: SensorAnomalyRuleInfo;\n \n    constructor(sensorId?: string, body?: SensorAnomalyRuleInfo) { \n        this.sensorId = sensorId;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ApiKeyIdRequest {\n \n    // API Key Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ApplianceCommandIdRequest {\n \n    // Command Id \n    public commandId: string;\n \n    constructor(commandId?: string) { \n        this.commandId = commandId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ApplianceIdRequest {\n \n    // Appliance Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\n\n/*  \n*/\nexport class AppliancesServiceAddSensorRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Sensor data to add \n    public body: Sensor;\n \n    constructor(id?: string, body?: Sensor) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AppliancesServiceChangeConfigurationRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Configuration Id \n    public configId: string;\n \n    // Configuration Version Id \n    public versionId: string;\n \n    constructor(id?: string, configId?: string, versionId?: string) { \n        this.id = id;\n        this.configId = configId;\n        this.versionId = versionId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AppliancesServiceChangeFolderRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Folder name \n    public folderId: string;\n \n    constructor(id?: string, folderId?: string) { \n        this.id = id;\n        this.folderId = folderId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AppliancesServiceChangeMachineIdRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Machine Id \n    public machineId: string;\n \n    constructor(id?: string, machineId?: string) { \n        this.id = id;\n        this.machineId = machineId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AppliancesServiceChangeNameRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Appliance name \n    public name: string;\n \n    constructor(id?: string, name?: string) { \n        this.id = id;\n        this.name = name;\n    }\n\n}\n\n\n","import { ApplianceStatusCode } from '../enums/ApplianceStatusCode';\n\n/*  \n*/\nexport class AppliancesServiceFindRequest {\n \n    // Filter by folder Id (empty for no filter) \n    public folderId: string;\n \n    // If true, search all appliances in folder and all its sub-folders \n    public subFolders: boolean;\n \n    // Filter by name or mac address or serial number \n    public search: string;\n \n    // Filter by appliance status(es) (empty or UNDEFINED means no filter) \n    public status: ApplianceStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(folderId?: string, subFolders?: boolean, search?: string, status?: ApplianceStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.folderId = folderId;\n        this.subFolders = subFolders;\n        this.search = search;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\n\n/*  \n*/\nexport class AppliancesServiceFindSensorsRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Filter by name or id or external id \n    public search: string;\n \n    // Filter by sensor type(s) (empty or UNDEFINED means no filter) \n    public type: SensorTypeCode[];\n \n    // Filter by sensor status(s) (empty or UNDEFINED means no filter) \n    public status: SensorStatusCode[];\n \n    // Filter by sensor stream type(s) (empty or UNDEFINED means no filter) \n    public stream: StreamTypeCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(id?: string, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) { \n        this.id = id;\n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.stream = stream;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { CommandStatusCode } from '../enums/CommandStatusCode';\n\n/*  \n*/\nexport class AppliancesServiceGetCommandsRequest {\n \n    // Filter by account Id (empty for no filter) \n    public accountId: string;\n \n    // Filter by command status(es) (empty or UNDEFINED means no filter) \n    public status: CommandStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, status?: CommandStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { ApplianceRegistration } from '../common/ApplianceRegistration';\n\n/*  \n*/\nexport class AppliancesServiceRegisterApplianceRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Appliance registration data \n    public body: ApplianceRegistration;\n \n    constructor(id?: string, body?: ApplianceRegistration) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { CommandStatusCode } from '../enums/CommandStatusCode';\n\n/*  \n*/\nexport class AppliancesServiceSetCommandRequest {\n \n    // Command Id \n    public commandId: string;\n \n    // Appliance command status \n    public status: CommandStatusCode;\n \n    constructor(commandId?: string, status?: CommandStatusCode) { \n        this.commandId = commandId;\n        this.status = status;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AppliancesServiceStatusOvertimeRequest {\n \n    // Appliance Id \n    public id: string;\n \n    // Series start timestamp (Epoch millis) - 0 to set beginning according to the period \n    public from: number;\n \n    // Series end timestamp (Epoch millis) - 0 to set current time \n    public to: number;\n \n    constructor(id?: string, from?: number, to?: number) { \n        this.id = id;\n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AuditLogIdRequest {\n \n    // Audit log entry Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AuditLogServiceFindRequest {\n \n    // Filter by user id (empty means no filter) \n    public userId: string;\n \n    // Filter by time period (lower bound in epoch time milliseconds) - 0 for no filter \n    public from: number;\n \n    // Filter by time period (upper bound in epoch time milliseconds) - 0 for no filter \n    public to: number;\n \n    // Filter by item type or partial type - empty for no filter \n    public itemType: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, from?: number, to?: number, itemType?: string, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.from = from;\n        this.to = to;\n        this.itemType = itemType;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class CalendarIdRequest {\n \n    // Calendar Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class CalendarIdsRequest {\n \n    // Calendar Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { Calendar } from '../entities/Calendar';\n\n/*  \n*/\nexport class CalendarsServiceCreateRequest {\n \n    // Calendar data \n    public body: Calendar;\n \n    constructor(body?: Calendar) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class CalendarsServiceFindRequest {\n \n    // Filter by name/description or partial name \n    public search: string;\n \n    // Filter by folder Id \n    public folderId: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, folderId?: string, sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.folderId = folderId;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class CalendarsServiceFolderIdRequest {\n \n    // Folder Id \n    public folderId: string;\n \n    constructor(folderId?: string) { \n        this.folderId = folderId;\n    }\n\n}\n\n\n","import { Calendar } from '../entities/Calendar';\n\n/*  \n*/\nexport class CalendarsServiceUpdateRequest {\n \n    // Calendar Id \n    public id: string;\n \n    // Calendar data \n    public body: Calendar;\n \n    constructor(id?: string, body?: Calendar) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/*  \n*/\nexport class ChangeGeoAreaRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account geo-area to change \n    public body: Coordinate[];\n \n    constructor(id?: string, body?: Coordinate[]) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/*  \n*/\nexport class ChangeGeoLocationRequest {\n \n    // Account Id \n    public id: string;\n \n    // Account geo-location to change \n    public body: Coordinate;\n \n    constructor(id?: string, body?: Coordinate) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/* \n   Change Password request message \n*/\nexport class ChangePasswordRequest {\n \n    // User Id \n    public userId: string;\n \n    // Old Password \n    public oldPassword: string;\n \n    // New Password \n    public newPassword: string;\n \n    constructor(userId?: string, oldPassword?: string, newPassword?: string) { \n        this.userId = userId;\n        this.oldPassword = oldPassword;\n        this.newPassword = newPassword;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ConfigurationIdRequest {\n \n    // Configuration Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","import { ProductTypeCode } from '../enums/ProductTypeCode';\n\n/*  \n*/\nexport class ConfigurationTargetRequest {\n \n    // Configuration Target \n    public target: ProductTypeCode;\n \n    constructor(target?: ProductTypeCode) { \n        this.target = target;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ConfigurationTemplateIdRequest {\n \n    // Configuration template Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ConfigurationVersionIdRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration version Id \n    public versionId: string;\n \n    constructor(id?: string, versionId?: string) { \n        this.id = id;\n        this.versionId = versionId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EmptyRequest {\n \n    constructor() { \n    }\n\n}\n\n\n","\n/* \n   Entities response message returned for read operation on multiple entities \n*/\nexport class EntitiesResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { Account } from '../entities/Account';\n\n/*  \n*/\nexport class EntitiesResponseOfAccount extends EntitiesResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { AccountTypeSummary } from '../common/AccountTypeSummary';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfAccountTypeSummary extends EntitiesResponse {\n \n    // Account list \n    public list: AccountTypeSummary[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { ApiKey } from '../entities/ApiKey';\n\n/*  \n*/\nexport class EntitiesResponseOfApiKey extends EntitiesResponse {\n \n    // API Key \n    public list: ApiKey[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Appliance } from '../entities/Appliance';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfAppliance extends EntitiesResponse {\n \n    // Appliance list \n    public list: Appliance[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { ApplianceCommand } from '../entities/ApplianceCommand';\n\n/*  \n*/\nexport class EntitiesResponseOfApplianceCommand extends EntitiesResponse {\n \n    // Appliance Commands list \n    public list: ApplianceCommand[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ApplianceConfiguration } from '../common/ApplianceConfiguration';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfApplianceConfiguration extends EntitiesResponse {\n \n    // Appliance Commands list \n    public list: ApplianceConfiguration[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { AuditLog } from '../entities/AuditLog';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfAuditLog extends EntitiesResponse {\n \n    // Audit log entry list \n    public list: AuditLog[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Calendar } from '../entities/Calendar';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfCalendar extends EntitiesResponse {\n \n    // Calendar list \n    public list: Calendar[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ComponentConfiguration } from '../entities/ComponentConfiguration';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfComponentConfiguration extends EntitiesResponse {\n \n    // Component Configuration list \n    public list: ComponentConfiguration[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ConfigurationVersion } from '../entities/ConfigurationVersion';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfConfiguration extends EntitiesResponse {\n \n    // Configuration Version list \n    public list: ConfigurationVersion[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Event } from '../entities/Event';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfEvent extends EntitiesResponse {\n \n    // Event list \n    public list: Event[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Feature } from '../entities/Feature';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfFeature extends EntitiesResponse {\n \n    // Feature list \n    public list: Feature[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { FeaturesGroup } from '../entities/FeaturesGroup';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfFeaturesGroup extends EntitiesResponse {\n \n    // Features group list \n    public list: FeaturesGroup[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { Folder } from '../entities/Folder';\n\n/*  \n*/\nexport class EntitiesResponseOfFolder extends EntitiesResponse {\n \n    // Folder list \n    public list: Folder[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { IntegrationTarget } from '../entities/IntegrationTarget';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfIntegration extends EntitiesResponse {\n \n    // Integration Target list \n    public list: IntegrationTarget[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ReportDefinition } from '../entities/ReportDefinition';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfReportDefinition extends EntitiesResponse {\n \n    // ReportDefinition list \n    public list: ReportDefinition[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Rule } from '../entities/Rule';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfRule extends EntitiesResponse {\n \n    // Rule list \n    public list: Rule[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { RuleSpec } from '../common/RuleSpec';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfRuleSpec extends EntitiesResponse {\n \n    // Rule Spec list \n    public list: RuleSpec[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Schedule } from '../entities/Schedule';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfSchedule extends EntitiesResponse {\n \n    // Schedule list \n    public list: Schedule[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { ScheduledReport } from '../entities/ScheduledReport';\n\n/*  \n*/\nexport class EntitiesResponseOfScheduledReport extends EntitiesResponse {\n \n    // Scheduled Report list \n    public list: ScheduledReport[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfSearchDefinition extends EntitiesResponse {\n \n    // Search Definition list \n    public list: SearchDefinition[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfSensor extends EntitiesResponse {\n \n    // Sensor list \n    public list: Sensor[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SensorHealth } from '../entities/SensorHealth';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfSensorHealth extends EntitiesResponse {\n \n    // Sensor Health status list \n    public list: SensorHealth[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","\n/* \n   Entity response message returned for read operation on a single entity \n*/\nexport class EntityResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfAccount extends EntityResponse {\n \n    // Account \n    public entity: Account;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ApiKey } from '../entities/ApiKey';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfApiKey extends EntityResponse {\n \n    // API Key \n    public entity: ApiKey;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Appliance } from '../entities/Appliance';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfAppliance extends EntityResponse {\n \n    // Appliance \n    public entity: Appliance;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ApplianceStatusTimeSeries } from '../common/ApplianceStatusTimeSeries';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfApplianceStatusTimeSeries extends EntityResponse {\n \n    // Appliance status time series \n    public entity: ApplianceStatusTimeSeries;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { AuditLog } from '../entities/AuditLog';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfAuditLog extends EntityResponse {\n \n    // Audit log entry \n    public entity: AuditLog;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Calendar } from '../entities/Calendar';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfCalendar extends EntityResponse {\n \n    // Calendar \n    public entity: Calendar;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ComponentConfiguration } from '../entities/ComponentConfiguration';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfComponentConfiguration extends EntityResponse {\n \n    // Component Configuration \n    public entity: ComponentConfiguration;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Configuration } from '../entities/Configuration';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfConfiguration extends EntityResponse {\n \n    // Configuration \n    public entity: Configuration;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ConfigurationTemplate } from '../entities/ConfigurationTemplate';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfConfigurationTemplate extends EntityResponse {\n \n    // Configuration template \n    public entity: ConfigurationTemplate;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ConfigurationVersion } from '../entities/ConfigurationVersion';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfConfigurationVersion extends EntityResponse {\n \n    // Configuration Version \n    public entity: ConfigurationVersion;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfCoordinate extends EntityResponse {\n \n    // Coordinate \n    public entity: Coordinate;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Event } from '../entities/Event';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfEvent extends EntityResponse {\n \n    // Event \n    public entity: Event;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EventCountTimeSeries } from '../common/EventCountTimeSeries';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfEventCountTimeSeries extends EntityResponse {\n \n    // Event \n    public entity: EventCountTimeSeries;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Feature } from '../entities/Feature';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfFeature extends EntityResponse {\n \n    // Feature \n    public entity: Feature;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { FeaturesGroup } from '../entities/FeaturesGroup';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfFeaturesGroup extends EntityResponse {\n \n    // Features Group \n    public entity: FeaturesGroup;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Folder } from '../entities/Folder';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfFolder extends EntityResponse {\n \n    // Folder \n    public entity: Folder;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { GeoReferenceData } from '../common/GeoReferenceData';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfGeoReferenceData extends EntityResponse {\n \n    // GeoReferenceData \n    public entity: GeoReferenceData;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { InnoviClientConfig } from '../common/InnoviClientConfig';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfInnoviClientConfig extends EntityResponse {\n \n    // innoVi client configuration \n    public entity: InnoviClientConfig;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { IntegrationTarget } from '../entities/IntegrationTarget';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfIntegration extends EntityResponse {\n \n    // Integration Target \n    public entity: IntegrationTarget;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { License } from '../entities/License';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfLicense extends EntityResponse {\n \n    // License \n    public entity: License;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { LoginData } from '../common/LoginData';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfLoginData extends EntityResponse {\n \n    // Login data \n    public entity: LoginData;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ReportDefinition } from '../entities/ReportDefinition';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfReportDefinition extends EntityResponse {\n \n    // ReportDefinition \n    public entity: ReportDefinition;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Rule } from '../entities/Rule';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfRule extends EntityResponse {\n \n    // Rule \n    public entity: Rule;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Schedule } from '../entities/Schedule';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSchedule extends EntityResponse {\n \n    // Schedule \n    public entity: Schedule;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { ScheduledReport } from '../entities/ScheduledReport';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfScheduledReport extends EntityResponse {\n \n    // Scheduled Report \n    public entity: ScheduledReport;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSearchDefinition extends EntityResponse {\n \n    // Search Definition \n    public entity: SearchDefinition;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSensor extends EntityResponse {\n \n    // Sensor \n    public entity: Sensor;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { SensorAnalysisResults } from '../entities/SensorAnalysisResults';\n\n/*  \n*/\nexport class EntityResponseOfSensorAnalysisResults extends EntityResponse {\n \n    // Sensor Analysis Results \n    public entity: SensorAnalysisResults;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SensorAnomalyInfo } from '../common/SensorAnomalyInfo';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSensorAnomalyInfo extends EntityResponse {\n \n    // Sensor Anomaly Info \n    public entity: SensorAnomalyInfo;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SensorHealth } from '../entities/SensorHealth';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSensorHealth extends EntityResponse {\n \n    // Sensor Health \n    public entity: SensorHealth;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { SensorStatusTimeSeries } from '../common/SensorStatusTimeSeries';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfSensorStatusTimeSeries extends EntityResponse {\n \n    // Sensor status time series \n    public entity: SensorStatusTimeSeries;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { TreeNode } from '../common/TreeNode';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfTreeNode extends EntityResponse {\n \n    // TreeNode \n    public entity: TreeNode;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { User } from '../entities/User';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfUser extends EntityResponse {\n \n    // User data \n    public entity: User;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { UserAccountInfo } from '../common/UserAccountInfo';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfUserAccountInfo extends EntityResponse {\n \n    // User account info \n    public entity: UserAccountInfo;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","\n/*  \n*/\nexport class EventIdRequest {\n \n    // Event Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EventIdsRequest {\n \n    // Event Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { Event } from '../entities/Event';\n\n/*  \n*/\nexport class EventsServiceCreateRequest {\n \n    // Event data \n    public body: Event;\n \n    constructor(body?: Event) { \n        this.body = body;\n    }\n\n}\n\n\n","import { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { Coordinate } from '../common/Coordinate';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\n\n/*  \n*/\nexport class EventsServiceFindInAreaRequest {\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Polygon representing the search area @QBodyParam \n    public searchArea: Coordinate[];\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by object type (empty for no filter) \n    public objectType: ObjectTypeCode;\n \n    // Filter by behavior type (empty for no filter) \n    public behaviorType: BehaviorTypeCode;\n \n    // Filter by severity (empty for no filter) \n    public severity: SeverityTypeCode;\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(folderId?: string, searchArea?: Coordinate[], sensorId?: string, objectType?: ObjectTypeCode, behaviorType?: BehaviorTypeCode, severity?: SeverityTypeCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.folderId = folderId;\n        this.searchArea = searchArea;\n        this.sensorId = sensorId;\n        this.objectType = objectType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\n\n/*  \n*/\nexport class EventsServiceFindRequest {\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Indicate that the search scope is on all sub-folders hierarchy under the provided folder \n    public subFolders: boolean;\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by object type (empty for no filter) \n    public objectType: ObjectTypeCode;\n \n    // Filter by behavior type (empty for no filter) \n    public behaviorType: BehaviorTypeCode;\n \n    // Filter by severity (empty for no filter) \n    public severity: SeverityTypeCode;\n \n    // Filter by event status (empty for no filter) \n    public status: EventStatusCode;\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(folderId?: string, subFolders?: boolean, sensorId?: string, objectType?: ObjectTypeCode, behaviorType?: BehaviorTypeCode, severity?: SeverityTypeCode, status?: EventStatusCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.folderId = folderId;\n        this.subFolders = subFolders;\n        this.sensorId = sensorId;\n        this.objectType = objectType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.status = status;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EventsServiceSetClipPathRequest {\n \n    // Event Id \n    public id: string;\n \n    // Clip path \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EventsServiceSetImagePathRequest {\n \n    // Event Id \n    public id: string;\n \n    // Image path \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { EventStatusCode } from '../enums/EventStatusCode';\n\n/*  \n*/\nexport class EventsServiceSetStatusRequest {\n \n    // Event Id \n    public id: string;\n \n    // Event data \n    public status: EventStatusCode;\n \n    constructor(id?: string, status?: EventStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n","import { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\n\n/*  \n*/\nexport class EventsServiceStatisticsRequest {\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by object type(s) (empty for no filter) \n    public objectType: ObjectTypeCode[];\n \n    // Filter by behavior type(s) (empty for no filter) \n    public behaviorType: BehaviorTypeCode[];\n \n    // Filter by severity(ies) (empty for no filter) \n    public severity: SeverityTypeCode[];\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Time series interval unit (MINUTE, HOUR, DAY, MINUTE) \n    public interval: TimeUnitCode;\n \n    // Label format of Y axis \n    public format: string;\n \n    constructor(folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, interval?: TimeUnitCode, format?: string) { \n        this.folderId = folderId;\n        this.sensorId = sensorId;\n        this.objectType = objectType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.from = from;\n        this.to = to;\n        this.interval = interval;\n        this.format = format;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeatureIdRequest {\n \n    // Feature Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeatureIdsRequest {\n \n    // Feature Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesGroupIdRequest {\n \n    // Features Group Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesGroupIdsRequest {\n \n    // Features Group Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { FeaturesGroup } from '../entities/FeaturesGroup';\n\n/*  \n*/\nexport class FeaturesGroupsServiceCreateRequest {\n \n    // Features group data \n    public body: FeaturesGroup;\n \n    constructor(body?: FeaturesGroup) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesGroupsServiceFindRequest {\n \n    // Filter by name \n    public search: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    constructor(search?: string, sort?: string) { \n        this.search = search;\n        this.sort = sort;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesGroupsServiceSetFeaturesRequest {\n \n    // Features Group Id list \n    public id: string;\n \n    // List of feature Ids to update \n    public body: string[];\n \n    constructor(id?: string, body?: string[]) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesGroupsServiceSetNameRequest {\n \n    // Features Group Id list \n    public id: string;\n \n    // Features group name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { FeaturesGroup } from '../entities/FeaturesGroup';\n\n/*  \n*/\nexport class FeaturesGroupsServiceUpdateRequest {\n \n    // Features Group Id \n    public id: string;\n \n    // Features group data \n    public body: FeaturesGroup;\n \n    constructor(id?: string, body?: FeaturesGroup) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Feature } from '../entities/Feature';\n\n/*  \n*/\nexport class FeaturesServiceCreateRequest {\n \n    // Feature data \n    public body: Feature;\n \n    constructor(body?: Feature) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FeaturesServiceFindRequest {\n \n    // Filter by name or full name or description \n    public search: string;\n \n    // Filter by category \n    public category: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    constructor(search?: string, category?: string, sort?: string) { \n        this.search = search;\n        this.category = category;\n        this.sort = sort;\n    }\n\n}\n\n\n","import { Feature } from '../entities/Feature';\n\n/*  \n*/\nexport class FeaturesServiceUpdateRequest {\n \n    // Feature Id \n    public id: string;\n \n    // Feature data \n    public body: Feature;\n \n    constructor(id?: string, body?: Feature) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FolderIdRequest {\n \n    // Folder Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FolderIdsRequest {\n \n    // Folder Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/*  \n*/\nexport class FoldersServiceChangeGeoAreaRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Folder geo-area to change \n    public body: Coordinate[];\n \n    constructor(id?: string, body?: Coordinate[]) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/*  \n*/\nexport class FoldersServiceChangeGeoLocationRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Folder geo-location to change \n    public body: Coordinate;\n \n    constructor(id?: string, body?: Coordinate) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FoldersServiceChangeNameRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Folder name \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FoldersServiceChangeParentRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Parent folder id \n    public parentId: string;\n \n    constructor(id?: string, parentId?: string) { \n        this.id = id;\n        this.parentId = parentId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FoldersServiceChangeTimezoneRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Timezone to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Folder } from '../entities/Folder';\n\n/*  \n*/\nexport class FoldersServiceCreateRequest {\n \n    // Folder data \n    public body: Folder;\n \n    constructor(body?: Folder) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FoldersServiceFindRequest {\n \n    // Folder Id \n    public id: string;\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by parent folder Id \n    public parentId: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(id?: string, search?: string, parentId?: string, sort?: string, page?: number, pageSize?: number) { \n        this.id = id;\n        this.search = search;\n        this.parentId = parentId;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class FoldersServiceGetHierarchyRequest {\n \n    // Flag to include sensors in the tree (default is true) \n    public includeSensors: boolean;\n \n    constructor(includeSensors?: boolean) { \n        this.includeSensors = includeSensors;\n    }\n\n}\n\n\n","import { GeoControlPoints } from '../common/GeoControlPoints';\n\n/*  \n*/\nexport class GeoServicesReferenceRequest {\n \n    // List of control points Each control point is a pair of point in the FOV and the referenced coordinate in WGS-84 coordinate system \n    public body: GeoControlPoints;\n \n    constructor(body?: GeoControlPoints) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class IntegrationIdRequest {\n \n    // Integration Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class IntegrationIdsRequest {\n \n    // Calendar Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { IntegrationTarget } from '../entities/IntegrationTarget';\n\n/*  \n*/\nexport class IntegrationsServiceCreateRequest {\n \n    // Integration data \n    public body: IntegrationTarget;\n \n    constructor(body?: IntegrationTarget) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class IntegrationsServiceFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by integration type \n    public type: string;\n \n    constructor(search?: string, type?: string) { \n        this.search = search;\n        this.type = type;\n    }\n\n}\n\n\n","import { IntegrationTarget } from '../entities/IntegrationTarget';\n\n/*  \n*/\nexport class IntegrationsServiceUpdateRequest {\n \n    // Integration Id \n    public id: string;\n \n    // Integration data \n    public body: IntegrationTarget;\n \n    constructor(id?: string, body?: IntegrationTarget) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/* \n   Query response message returned for find operation (with pagination) on multiple entities \n*/\nexport class QueryResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n    constructor(code?: number, error?: string, page?: number, pageSize?: number, pages?: number, total?: number, queryDef?: string, docType?: string) { \n        this.code = code;\n        this.error = error;\n        this.page = page;\n        this.pageSize = pageSize;\n        this.pages = pages;\n        this.total = total;\n        this.queryDef = queryDef;\n        this.docType = docType;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfAccount extends QueryResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { AnomalyEventInfo } from '../common/AnomalyEventInfo';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfAnomalyEventInfo extends QueryResponse {\n \n    // List of Anomaly Event Info \n    public list: AnomalyEventInfo[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Appliance } from '../entities/Appliance';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfAppliance extends QueryResponse {\n \n    // Appliance list \n    public list: Appliance[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { AuditLog } from '../entities/AuditLog';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfAuditLog extends QueryResponse {\n \n    // Audit log entry list \n    public list: AuditLog[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Calendar } from '../entities/Calendar';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfCalendar extends QueryResponse {\n \n    // Calendar list \n    public list: Calendar[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { ComponentConfiguration } from '../entities/ComponentConfiguration';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfComponentConfiguration extends QueryResponse {\n \n    // Component Configuration list \n    public list: ComponentConfiguration[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Configuration } from '../entities/Configuration';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfConfiguration extends QueryResponse {\n \n    // Appliance list \n    public list: Configuration[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { ConfigurationTemplate } from '../entities/ConfigurationTemplate';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfConfigurationTemplate extends QueryResponse {\n \n    // Configuration templates list \n    public list: ConfigurationTemplate[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { ConfigurationVersion } from '../entities/ConfigurationVersion';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfConfigurationVersion extends QueryResponse {\n \n    // Configuration Version list \n    public list: ConfigurationVersion[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Event } from '../entities/Event';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfEvent extends QueryResponse {\n \n    // Event list \n    public list: Event[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Folder } from '../entities/Folder';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfFolder extends QueryResponse {\n \n    // Folder list \n    public list: Folder[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { QueryResponse } from '../messages/QueryResponse';\nimport { IntegrationTarget } from '../entities/IntegrationTarget';\n\n/*  \n*/\nexport class QueryResponseOfIntegrationTarget extends QueryResponse {\n \n    // Integration Target list \n    public list: IntegrationTarget[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { ObjectInfo } from '../common/ObjectInfo';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfObjectInfo extends QueryResponse {\n \n    // Object Info list \n    public list: ObjectInfo[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { ReportDefinition } from '../entities/ReportDefinition';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfReportDefinition extends QueryResponse {\n \n    // ReportDefinition list \n    public list: ReportDefinition[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Rule } from '../entities/Rule';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfRule extends QueryResponse {\n \n    // Rule list \n    public list: Rule[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Schedule } from '../entities/Schedule';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfSchedule extends QueryResponse {\n \n    // Schedule list \n    public list: Schedule[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfSearchDefinition extends QueryResponse {\n \n    // Search Definition list \n    public list: SearchDefinition[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfSensor extends QueryResponse {\n \n    // Sensor list \n    public list: Sensor[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { SensorAnalysisResults } from '../entities/SensorAnalysisResults';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfSensorAnalysisResults extends QueryResponse {\n \n    // List of Sensor Analysis Results \n    public list: SensorAnalysisResults[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { TreeItem } from '../common/TreeItem';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfTreeItem extends QueryResponse {\n \n    // TreeItem list \n    public list: TreeItem[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { User } from '../entities/User';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfUser extends QueryResponse {\n \n    // User list \n    public list: User[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","\n/*  \n*/\nexport class ReportIdRequest {\n \n    // Report Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ReportIdsRequest {\n \n    // Report Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { ReportDefinition } from '../entities/ReportDefinition';\n\n/*  \n*/\nexport class ReportsServiceCreateRequest {\n \n    // Report data \n    public body: ReportDefinition;\n \n    constructor(body?: ReportDefinition) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ReportsServiceFindRequest {\n \n    // Filter by name/tag or partial name \n    public search: string;\n \n    constructor(search?: string) { \n        this.search = search;\n    }\n\n}\n\n\n","import { ReportDefinition } from '../entities/ReportDefinition';\n\n/*  \n*/\nexport class ReportsServiceUpdateRequest {\n \n    // Report Id \n    public id: string;\n \n    // Report data \n    public body: ReportDefinition;\n \n    constructor(id?: string, body?: ReportDefinition) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class RuleIdRequest {\n \n    // Rule Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class RuleIdsRequest {\n \n    // Rule Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { Rule } from '../entities/Rule';\n\n/*  \n*/\nexport class RulesServiceCreateRequest {\n \n    // Rule data \n    public body: Rule;\n \n    constructor(body?: Rule) { \n        this.body = body;\n    }\n\n}\n\n\n","import { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n/*  \n*/\nexport class RulesServiceFindRequest {\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by name or description or external id or partial (using * wildcard) \n    public search: string;\n \n    // Filter by rule type(s) (empty for no filter) \n    public ruleType: RuleTypeCode[];\n \n    // Filter by behavior type(s) (empty for no filter) \n    public behaviorType: BehaviorTypeCode[];\n \n    // Filter by severity(ies) (empty for no filter) \n    public severity: SeverityTypeCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(folderId?: string, sensorId?: string, search?: string, ruleType?: RuleTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, pageSize?: number) { \n        this.folderId = folderId;\n        this.sensorId = sensorId;\n        this.search = search;\n        this.ruleType = ruleType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { Rule } from '../entities/Rule';\n\n/*  \n*/\nexport class RulesServiceUpdateRequest {\n \n    // Rule Id \n    public id: string;\n \n    // Rule data \n    public body: Rule;\n \n    constructor(id?: string, body?: Rule) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ScheduleIdRequest {\n \n    // Schedule Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ScheduleIdsRequest {\n \n    // Schedule Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ScheduledReportIdRequest {\n \n    // Scheduled Report Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ScheduledReportIdsRequest {\n \n    // Scheduled Report Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { ScheduledReport } from '../entities/ScheduledReport';\n\n/*  \n*/\nexport class ScheduledReportsServiceCreateRequest {\n \n    // Scheduled Report data \n    public body: ScheduledReport;\n \n    constructor(body?: ScheduledReport) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class ScheduledReportsServiceFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    constructor(search?: string) { \n        this.search = search;\n    }\n\n}\n\n\n","import { ScheduledReport } from '../entities/ScheduledReport';\n\n/*  \n*/\nexport class ScheduledReportsServiceUpdateRequest {\n \n    // Scheduled Report Id \n    public id: string;\n \n    // Scheduled Report data \n    public body: ScheduledReport;\n \n    constructor(id?: string, body?: ScheduledReport) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { Schedule } from '../entities/Schedule';\n\n/*  \n*/\nexport class SchedulesServiceCreateRequest {\n \n    // Schedule data \n    public body: Schedule;\n \n    constructor(body?: Schedule) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SchedulesServiceFindRequest {\n \n    // Filter by name/description or partial name \n    public search: string;\n \n    // Filter by folder Id \n    public folderId: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, folderId?: string, sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.folderId = folderId;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SchedulesServiceFolderIdRequest {\n \n    // Folder Id \n    public folderId: string;\n \n    constructor(folderId?: string) { \n        this.folderId = folderId;\n    }\n\n}\n\n\n","import { Schedule } from '../entities/Schedule';\n\n/*  \n*/\nexport class SchedulesServiceUpdateRequest {\n \n    // Schedule Id \n    public id: string;\n \n    // Schedule data \n    public body: Schedule;\n \n    constructor(id?: string, body?: Schedule) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SearchIdRequest {\n \n    // Search Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SearchIdsRequest {\n \n    // Search Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\n\n/*  \n*/\nexport class SearchServiceCreateRequest {\n \n    // Search data \n    public body: SearchDefinition;\n \n    constructor(body?: SearchDefinition) { \n        this.body = body;\n    }\n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\n\n/*  \n*/\nexport class SearchServiceExecuteRequest {\n \n    // Search definition \n    public body: SearchDefinition;\n \n    constructor(body?: SearchDefinition) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SearchServiceFindRequest {\n \n    // Filter by name/tag or partial name \n    public search: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { SearchDefinition } from '../entities/SearchDefinition';\n\n/*  \n*/\nexport class SearchServiceUpdateRequest {\n \n    // Search Id \n    public id: string;\n \n    // Search data \n    public body: SearchDefinition;\n \n    constructor(id?: string, body?: SearchDefinition) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorAnalysisIdRequest {\n \n    // Sensor Id \n    public sensorId: string;\n \n    constructor(sensorId?: string) { \n        this.sensorId = sensorId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorIdRequest {\n \n    // Sensor Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorIdsRequest {\n \n    // Sensor Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorsServiceChangeFolderRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Parent folder id \n    public folderId: string;\n \n    constructor(id?: string, folderId?: string) { \n        this.id = id;\n        this.folderId = folderId;\n    }\n\n}\n\n\n","import { FovGeoAttributes } from '../common/FovGeoAttributes';\n\n/*  \n*/\nexport class SensorsServiceChangeFovRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Sensor azimuth (0 - 359) \n    public azimuth: number;\n \n    // Sensor geo-location to update \n    public body: FovGeoAttributes;\n \n    constructor(id?: string, azimuth?: number, body?: FovGeoAttributes) { \n        this.id = id;\n        this.azimuth = azimuth;\n        this.body = body;\n    }\n\n}\n\n\n","import { Coordinate } from '../common/Coordinate';\n\n/*  \n*/\nexport class SensorsServiceChangeGeoLocationRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Sensor geo-location to update \n    public body: Coordinate;\n \n    constructor(id?: string, body?: Coordinate) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorsServiceChangeNameRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Sensor name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { SensorStatusCode } from '../enums/SensorStatusCode';\n\n/*  \n*/\nexport class SensorsServiceChangeStatusRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Event data \n    public status: SensorStatusCode;\n \n    constructor(id?: string, status?: SensorStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\n\n/*  \n*/\nexport class SensorsServiceCreateRequest {\n \n    // Sensor data \n    public body: Sensor;\n \n    constructor(body?: Sensor) { \n        this.body = body;\n    }\n\n}\n\n\n","import { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\n\n/*  \n*/\nexport class SensorsServiceFindRequest {\n \n    // Filter by folder Id (empty for no filter) \n    public folderId: string;\n \n    // If true, search all sensors in folder and all its sub-folders \n    public subFolders: boolean;\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by sensor type(s) (empty or UNDEFINED for no filter) \n    public type: SensorTypeCode[];\n \n    // Filter by sensor status(es) (empty or UNDEFINED for no filter) \n    public status: SensorStatusCode[];\n \n    // Filter by stream type(s) (empty or UNDEFINED for no filter) \n    public stream: StreamTypeCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(folderId?: string, subFolders?: boolean, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) { \n        this.folderId = folderId;\n        this.subFolders = subFolders;\n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.stream = stream;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorsServiceSetRefImageRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Reference image as base64 string \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SensorsServiceStatusOvertimeRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Series start timestamp (Epoch millis) - 0 to set beginning according to the period \n    public from: number;\n \n    // Series end timestamp (Epoch millis) - 0 to set current time \n    public to: number;\n \n    constructor(id?: string, from?: number, to?: number) { \n        this.id = id;\n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n","import { Sensor } from '../entities/Sensor';\n\n/*  \n*/\nexport class SensorsServiceUpdateRequest {\n \n    // Sensor Id \n    public id: string;\n \n    // Sensor data \n    public body: Sensor;\n \n    constructor(id?: string, body?: Sensor) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/* \n   Response of byte array \n*/\nexport class StreamResponse {\n \n    // \n    public content: string;\n \n    constructor(content?: string) { \n        this.content = content;\n    }\n\n}\n\n\n","import { ApplianceStatusCode } from '../enums/ApplianceStatusCode';\n\n/*  \n*/\nexport class SysAppliancesServiceFindRequest {\n \n    // Filter by account Id (empty for no filter) \n    public accountId: string;\n \n    // Filter by name or mac address or serial number \n    public search: string;\n \n    // Filter by appliance status(es) (empty or UNDEFINED means no filter) \n    public status: ApplianceStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, search?: string, status?: ApplianceStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.search = search;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { CommandStatusCode } from '../enums/CommandStatusCode';\n\n/*  \n*/\nexport class SysAppliancesServiceGetCommandsRequest {\n \n    // Filter by account Id (empty for no filter) \n    public accountId: string;\n \n    // Filter by appliance Id (empty for no filter) \n    public applianceId: string;\n \n    // Filter by command status(es) (empty or UNDEFINED means no filter) \n    public status: CommandStatusCode[];\n \n    constructor(accountId?: string, applianceId?: string, status?: CommandStatusCode[]) { \n        this.accountId = accountId;\n        this.applianceId = applianceId;\n        this.status = status;\n    }\n\n}\n\n\n","import { Configuration } from '../entities/Configuration';\n\n/*  \n*/\nexport class SysConfigurationsServiceCreateRequest {\n \n    // Configuration data \n    public body: Configuration;\n \n    constructor(body?: Configuration) { \n        this.body = body;\n    }\n\n}\n\n\n","import { ConfigurationTemplate } from '../entities/ConfigurationTemplate';\n\n/*  \n*/\nexport class SysConfigurationsServiceCreateTemplateRequest {\n \n    // Configuration template data \n    public body: ConfigurationTemplate;\n \n    constructor(body?: ConfigurationTemplate) { \n        this.body = body;\n    }\n\n}\n\n\n","import { ConfigurationVersion } from '../entities/ConfigurationVersion';\n\n/*  \n*/\nexport class SysConfigurationsServiceCreateVersionRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration version data \n    public body: ConfigurationVersion;\n \n    constructor(id?: string, body?: ConfigurationVersion) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SysConfigurationsServiceDeleteVersionRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration version Id \n    public versionId: string;\n \n    constructor(id?: string, versionId?: string) { \n        this.id = id;\n        this.versionId = versionId;\n    }\n\n}\n\n\n","import { ProductTypeCode } from '../enums/ProductTypeCode';\n\n/*  \n*/\nexport class SysConfigurationsServiceFindRequest {\n \n    // Filter by product target type(s) (Use UNDEFINED for all products) \n    public target: ProductTypeCode[];\n \n    // Search by name or description \n    public search: string;\n \n    // Filter by status (empty or UNDEFINED means no filter) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(target?: ProductTypeCode[], search?: string, sort?: string, page?: number, pageSize?: number) { \n        this.target = target;\n        this.search = search;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SysConfigurationsServiceFindTemplateRequest {\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(page?: number, pageSize?: number) { \n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { Configuration } from '../entities/Configuration';\n\n/*  \n*/\nexport class SysConfigurationsServiceUpdateRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration data \n    public body: Configuration;\n \n    constructor(id?: string, body?: Configuration) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { ConfigurationTemplate } from '../entities/ConfigurationTemplate';\n\n/*  \n*/\nexport class SysConfigurationsServiceUpdateTemplateRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration template data \n    public body: ConfigurationTemplate;\n \n    constructor(id?: string, body?: ConfigurationTemplate) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { ConfigurationVersion } from '../entities/ConfigurationVersion';\n\n/*  \n*/\nexport class SysConfigurationsServiceUpdateVersionRequest {\n \n    // Configuration Id \n    public id: string;\n \n    // Configuration version data \n    public body: ConfigurationVersion;\n \n    constructor(id?: string, body?: ConfigurationVersion) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SysEventIdRequest {\n \n    // Event Id \n    public id: string;\n \n    // Account Id \n    public accountId: string;\n \n    constructor(id?: string, accountId?: string) { \n        this.id = id;\n        this.accountId = accountId;\n    }\n\n}\n\n\n","import { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n/*  \n*/\nexport class SysEventsServiceFindInAreaRequest {\n \n    // Filter by account (must not be empty - cross accounts search is not supported) \n    public accountId: string;\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by object type(s) (empty for no filter) \n    public objectType: ObjectTypeCode[];\n \n    // Filter by behavior type(s) (empty for no filter) \n    public behaviorType: BehaviorTypeCode[];\n \n    // Filter by severity(ies) (empty for no filter) \n    public severity: SeverityTypeCode[];\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.folderId = folderId;\n        this.sensorId = sensorId;\n        this.objectType = objectType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\n\n/*  \n*/\nexport class SysEventsServiceStatisticsRequest {\n \n    // Filter by account (must not be empty - cross accounts search is not supported) \n    public accountId: string;\n \n    // Filter by folder (empty for no filter) \n    public folderId: string;\n \n    // Filter by sensor Id (empty for no filter) \n    public sensorId: string;\n \n    // Filter by object type(s) (empty for no filter) \n    public objectType: ObjectTypeCode[];\n \n    // Filter by behavior type(s) (empty for no filter) \n    public behaviorType: BehaviorTypeCode[];\n \n    // Filter by severity(ies) (empty for no filter) \n    public severity: SeverityTypeCode[];\n \n    // Filter events after the provided timestamp (epoch milliseconds) \n    public from: number;\n \n    // Filter events before the provided timestamp (epoch milliseconds) \n    public to: number;\n \n    // Time series interval unit (MINUTE, HOUR, DAY, MINUTE) \n    public interval: TimeUnitCode;\n \n    // Label format of Y axis \n    public format: string;\n \n    constructor(accountId?: string, folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, interval?: TimeUnitCode, format?: string) { \n        this.accountId = accountId;\n        this.folderId = folderId;\n        this.sensorId = sensorId;\n        this.objectType = objectType;\n        this.behaviorType = behaviorType;\n        this.severity = severity;\n        this.from = from;\n        this.to = to;\n        this.interval = interval;\n        this.format = format;\n    }\n\n}\n\n\n","import { ApiKey } from '../entities/ApiKey';\n\n/*  \n*/\nexport class SysKeysServiceCreateApiKeyRequest {\n \n    // API Key data \n    public body: ApiKey;\n \n    constructor(body?: ApiKey) { \n        this.body = body;\n    }\n\n}\n\n\n","import { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\nimport { SensorTypeCode } from '../enums/SensorTypeCode';\n\n/*  \n*/\nexport class SysSensorsServiceFindRequest {\n \n    // Filter by account Id (empty for no filter) \n    public accountId: string;\n \n    // Filter by folder Id (empty for no filter) \n    public folderId: string;\n \n    // If true, search all sensors in folder and all its sub-folders \n    public subFolders: boolean;\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by sensor type(s) (empty or UNDEFINED for no filter) \n    public type: SensorTypeCode[];\n \n    // Filter by sensor status(es) (empty or UNDEFINED for no filter) \n    public status: SensorStatusCode[];\n \n    // Filter by stream type(s) (empty or UNDEFINED for no filter) \n    public stream: StreamTypeCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, folderId?: string, subFolders?: boolean, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.folderId = folderId;\n        this.subFolders = subFolders;\n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.stream = stream;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/* \n   Token request message \n*/\nexport class TokenRequest {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Account Id \n    public accountId: string;\n \n    constructor(code?: number, error?: string, accountId?: string) { \n        this.code = code;\n        this.error = error;\n        this.accountId = accountId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserByEmailRequest {\n \n    // User email \n    public email: string;\n \n    constructor(email?: string) { \n        this.email = email;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserIdRequest {\n \n    // User Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserIdsRequest {\n \n    // User Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceChangeMobileRequest {\n \n    // User mobile to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceChangeNameRequest {\n \n    // User name to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\n\n/*  \n*/\nexport class UserServiceChangePasswordRequest {\n \n    // \n    public body: ChangePasswordRequest;\n \n    constructor(body?: ChangePasswordRequest) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceCheckPasswordRequest {\n \n    // \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { LoginParams } from '../common/LoginParams';\n\n/*  \n*/\nexport class UserServiceLoginRequest {\n \n    // \n    public body: LoginParams;\n \n    constructor(body?: LoginParams) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceResetPasswordRequest {\n \n    // Verification code \n    public code: string;\n \n    constructor(code?: string) { \n        this.code = code;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceSendVerificationRequest {\n \n    // Email to send code \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { TokenRequest } from '../messages/TokenRequest';\n\n/*  \n*/\nexport class UserServiceSwitchAccountRequest {\n \n    // Token request info \n    public body: TokenRequest;\n \n    constructor(body?: TokenRequest) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceVerifyLoginRequest {\n \n    // \n    public key: string;\n \n    constructor(key?: string) { \n        this.key = key;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    public id: string;\n \n    // Default account Id \n    public accountId: string;\n \n    constructor(id?: string, accountId?: string) { \n        this.id = id;\n        this.accountId = accountId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeMobileRequest {\n \n    // User Id \n    public id: string;\n \n    // User mobile to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeNameRequest {\n \n    // User Id \n    public id: string;\n \n    // User name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/*  \n*/\nexport class UsersServiceChangeRoleRequest {\n \n    // User Id \n    public id: string;\n \n    // User role to update \n    public role: AccountRoleCode;\n \n    constructor(id?: string, role?: AccountRoleCode) { \n        this.id = id;\n        this.role = role;\n    }\n\n}\n\n\n","import { UserStatusCode } from '../enums/UserStatusCode';\n\n/*  \n*/\nexport class UsersServiceChangeStatusRequest {\n \n    // User Id \n    public id: string;\n \n    // User status to update \n    public status: UserStatusCode;\n \n    constructor(id?: string, status?: UserStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\n\n/*  \n*/\nexport class UsersServiceChangeTypeRequest {\n \n    // User Id \n    public id: string;\n \n    // User type to update \n    public type: UserTypeCode;\n \n    constructor(id?: string, type?: UserTypeCode) { \n        this.id = id;\n        this.type = type;\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/*  \n*/\nexport class UsersServiceFindRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    public type: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { UserInvitation } from '../common/UserInvitation';\n\n/*  \n*/\nexport class UsersServiceInviteRequest {\n \n    // \n    public body: UserInvitation;\n \n    constructor(body?: UserInvitation) { \n        this.body = body;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/*  \n*/\nexport class UsersServiceSetRolesRequest {\n \n    // User Id \n    public id: string;\n \n    // User roles to update \n    public roles: AccountRoleCode[];\n \n    constructor(id?: string, roles?: AccountRoleCode[]) { \n        this.id = id;\n        this.roles = roles;\n    }\n\n}\n\n\n","import { User } from '../entities/User';\n\n/*  \n*/\nexport class UsersServiceUpdateRequest {\n \n    // User Id \n    public id: string;\n \n    // User data to update \n    public body: User;\n \n    constructor(id?: string, body?: User) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class CoreConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Coordinate } from '../common/Coordinate';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions \n */\n@Injectable()\nexport class AccountsService {\n\n  // URL to web api\n  private baseUrl = '/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Change account geo-area (polygon)\n   * @Return: EntityResponse<Account>\n   */\n  changeGeoArea(id?: string, body?: Coordinate[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoArea`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change account geo-location (center)\n   * @Return: EntityResponse<Account> The changed account\n   */\n  changeGeoLocation(id?: string, body?: Coordinate) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoLocation`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get default geo location\n   * @Return: EntityResponse<Coordinate> The account location\n   */\n  getDefaultLocation(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/geoLocation`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AnalysisResult } from '../common/AnalysisResult';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { SensorAnomalyRuleInfo } from '../common/SensorAnomalyRuleInfo';\nimport { Event } from '../entities/Event';\n\n\n/**\n * List of anomaly related actions for the anomaly detection service\n * @RequestHeader X-API-KEY The key to identify the application (console) \n */\n@Injectable()\nexport class AnomalyService {\n\n  // URL to web api\n  private baseUrl = '/anomaly';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get training results of all sensors with anomaly enabled flag ordered by the last training time\n   * @Return: QueryResponse<SensorAnalysisResults>\n   */\n  getSensorsAnalysisResults(page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/results`, ...params);\n  }\n\n  /**\n   * Update sensor analysis results bach for a specific sensors\n   * @Return: EntityResponse<SensorAnalysisResults>\n   */\n  update(sensorId?: string, body?: AnalysisResult) {\n    return this.rest.put(`${this.baseUrl}/sensor/${sensorId}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete all analysis results for a specific sensors\n   * @Return: ActionResponse\n   */\n  delete(sensorId?: string) {\n    return this.rest.delete(`${this.baseUrl}/sensor/${sensorId}`);\n  }\n\n  /**\n   * Get sensor info for anomaly\n   * @Return: EntityResponse<SensorAnomalyInfo>\n   */\n  getSensorAnomalyInfo(sensorId?: string) {\n    return this.rest.get(`${this.baseUrl}/sensor/${sensorId}/info`);\n  }\n\n  /**\n   * Find list of anomaly event info objects per sensor in a given time period\n   * @return QueryResponse<AnomalyEventInfo> List of anomaly event info objects\n   */\n  findAnomalyEventInfo(accountId?: string, sensorId?: string, status?: EventStatusCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/events`, ...params);\n  }\n\n  /**\n   * Update sensor anomaly rule attributed\n   * @return ActionResponse\n   */\n  updateAnomalyRule(sensorId?: string, body?: SensorAnomalyRuleInfo) {\n    return this.rest.put(`${this.baseUrl}/rule/${sensorId}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Create dummy event (for anomaly tests only)\n   * This method is used for testing only, the only service generates events in the system is the event service\n   * @param event Event data to create\n   * Some of the event fields are mandatory: (the other are optional)\n   * <ul>\n   * <li><b>id:</b> Unique event id (e.g. GUID string)</li>\n   * <li><b>accountId</b> Account Id</li>\n   * <li><b>sensorId</b> Sensor Id</li>\n   * <li><b>objectType</b> Detected object type</li>\n   * <li><b>behaviorType</b> Behavior</li>\n   * <li><b>ruleId</b> Rule Id</li>\n   * <li><b>RuleType</b> Rule type</li>\n   * <li><b>startTime:</b> If set to 0, server time will be set</li>\n   * </ul>\n   * @return EntityResponse<Event>\n   */\n  createDummyEvent(body?: Event) {\n    return this.rest.post(`${this.baseUrl}/event`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\nimport { Sensor } from '../entities/Sensor';\nimport { ApplianceRegistration } from '../common/ApplianceRegistration';\nimport { ProductTypeCode } from '../enums/ProductTypeCode';\nimport { CommandStatusCode } from '../enums/CommandStatusCode';\nimport { ApplianceStatusCode } from '../enums/ApplianceStatusCode';\nimport { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\n\n\n/**\n * List of appliance related actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AppliancesService {\n\n  // URL to web api\n  private baseUrl = '/appliances';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of appliances and filter\n   * @Return: QueryResponse<Appliance>\n   */\n  find(folderId?: string, subFolders?: boolean, search?: string, status?: ApplianceStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (subFolders != null) { params.push(`subFolders=${subFolders}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single appliance by id\n   * @Return: EntityResponse<Appliance>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get all sensors assigned to the appliance (getSensors)\n   * @Return: QueryResponse<Sensor>\n   */\n  findApplianceSensors(id?: string, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (stream != null) { params.push(`stream=${stream}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.put(`${this.baseUrl}/${id}/sensors`, null, ...params);\n  }\n\n  /**\n   * Add new sensor and assigned it to a specific appliance\n   * The sensor will be created with status PENDING, the status will be changed when the agent will establish connection to the proxy\n   * @Return: EntityResponse<Sensor> The updated sensor\n   */\n  addApplianceSensor(id?: string, body?: Sensor) {\n    return this.rest.post(`${this.baseUrl}/${id}/sensors`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Register new appliance in the system\n   * @Return: EntityResponse<Appliance> The registered appliance\n   */\n  registerAppliance(id?: string, body?: ApplianceRegistration) {\n    return this.rest.post(`${this.baseUrl}/register`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get appliance runtime configuration components\n   * @Return: EntitiesResponse<ComponentConfiguration>\n   */\n  getRuntimeConfiguration(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/components`);\n  }\n\n  /**\n   * Get list of appliance configurations for the specific product\n   * @Return: EntitiesResponse<ApplianceConfiguration>\n   */\n  getConfigurations(target?: ProductTypeCode) {\n    return this.rest.get(`${this.baseUrl}/configurations/${target}`);\n  }\n\n  /**\n   * Change appliance name\n   * @Return: EntityResponse<Appliance>\n   */\n  changeName(id?: string, name?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, null);\n  }\n\n  /**\n   * Change appliance folder\n   * @Return: EntityResponse<Appliance>\n   */\n  changeFolder(id?: string, folderId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/folder/${folderId}`, null);\n  }\n\n  /**\n   * Change appliance machine Id (for VIRTUAL device only)\n   * @Return: EntityResponse<Appliance> - Updated appliance\n   */\n  changeMachineId(id?: string, machineId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/machine/${machineId}`, null);\n  }\n\n  /**\n   * Change appliance configuration\n   * @Return: EntityResponse<Appliance> - Updated appliance\n   */\n  changeConfiguration(id?: string, configId?: string, versionId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/config/${configId}/${versionId}`, null);\n  }\n\n  /**\n   * Delete appliance from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of appliance commands and filter\n   * @Return: EntitiesResponse<ApplianceCommand> List of appliance commands\n   */\n  getCommands(accountId?: string, status?: CommandStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/commands`, ...params);\n  }\n\n  /**\n   * Delete command\n   * @Return: ActionResponse\n   */\n  deleteCommand(commandId?: string) {\n    return this.rest.delete(`${this.baseUrl}/commands/${commandId}`);\n  }\n\n  /**\n   * Get appliance status history over time\n   * @Return:  EntityResponse<ApplianceStatusTimeSeries>\n   */\n  getStatusOverTime(id?: string, from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/status/overtime`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Audit log queries for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AuditLogService {\n\n  // URL to web api\n  private baseUrl = '/auditlog';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of audit log entries and filter\n   * @Return: QueryResponse<AuditLog>\n   */\n  find(userId?: string, from?: number, to?: number, itemType?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (itemType != null) { params.push(`itemType=${itemType}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single audit log entry by id\n   * @Return: EntityResponse<Appliance>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Calendar } from '../entities/Calendar';\n\n\n/**\n * Services for calendars (holidays) actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class CalendarsService {\n\n  // URL to web api\n  private baseUrl = '/calendars';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new calendar\n   * @Return: EntityResponse<Calendar>\n   */\n  create(body?: Calendar) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update calendar\n   * @Return: EntityResponse<Calendar>\n   */\n  update(id?: string, body?: Calendar) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete calendar from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single calendar by id\n   * @Return: EntityResponse<Calendar>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get calendars by list of ids\n   * @Return: EntitiesResponse<Calendar>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find calendars by filters\n   * @Return: QueryResponse<Calendar>\n   */\n  find(search?: string, folderId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find all calendars for a specified level in the folder hierarchy\n   * This method returns all the calendars of the current folder and all parent folders\n   * @Return: EntitiesResponse<Calendar>\n   */\n  getFolderCalendars(folderId?: string) {\n    return this.rest.get(`${this.baseUrl}/folder/${folderId}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\nimport { Event } from '../entities/Event';\nimport { EventStatusCode } from '../enums/EventStatusCode';\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\n\n\n/**\n * Services for events actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class EventsService {\n\n  // URL to web api\n  private baseUrl = '/events';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new event\n   * @Return: EntityResponse<Event>\n   */\n  create(body?: Event) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change event workflow status\n   * @Return: EntityResponse<Event>\n   */\n  changeStatus(id?: string, status?: EventStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Set event image path\n   * @Return: EntityResponse<Event>\n   */\n  setImagePath(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/imagePath`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Set event clip path\n   * @Return: EntityResponse<Event>\n   */\n  setClipPath(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/clipPath`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get single event by id\n   * @Return: EntityResponse<Event>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get events by list of ids\n   * @Return: EntitiesResponse<Event>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find events by filters\n   * @Return: QueryResponse<Event>\n   */\n  find(folderId?: string, subFolders?: boolean, sensorId?: string, objectType?: ObjectTypeCode, behaviorType?: BehaviorTypeCode, severity?: SeverityTypeCode, status?: EventStatusCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (subFolders != null) { params.push(`subFolders=${subFolders}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (objectType != null) { params.push(`objectType=${objectType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find events generated in area using spatial query\n   * @Return: QueryResponse<Event>\n   */\n  findInArea(folderId?: string, sensorId?: string, objectType?: ObjectTypeCode, behaviorType?: BehaviorTypeCode, severity?: SeverityTypeCode, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (objectType != null) { params.push(`objectType=${objectType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/area`, null, ...params);\n  }\n\n  /**\n   * Get event image [response content type: image/jpeg]\n   * @Return: StreamingOutput of the image\n   */\n  getEventImage(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/image`);\n  }\n\n  /**\n   * Get event clip [response content type: video/mp4]\n   * @Return: StreamingOutput of the clip\n   */\n  getEventClip(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/clip`);\n  }\n\n  /**\n   * Get events count overtime for all events in the system\n   * @Return: EntityResponse<EventCountTimeSeries>\n   */\n  getEventsCountOvertime(folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, interval?: TimeUnitCode, format?: string) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (objectType != null) { params.push(`objectType=${objectType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (interval != null) { params.push(`interval=${interval}`); }\n    if (format != null) { params.push(`format=${format}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/overtime`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Coordinate } from '../common/Coordinate';\nimport { Folder } from '../entities/Folder';\n\n\n/**\n * Services for folders actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class FoldersService {\n\n  // URL to web api\n  private baseUrl = '/folders';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new folder in the account hierarchy\n   * @Return: EntityResponse<Folder>\n   */\n  create(body?: Folder) {\n    return this.rest.post(`${this.baseUrl}/folders`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change folder name\n   * @Return: EntityResponse<Folder>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change folder parent id\n   * @Return: EntityResponse<Folder>\n   */\n  changeParent(id?: string, parentId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/parent/${parentId}`, null);\n  }\n\n  /**\n   * Change folder geo-area (polygon)\n   * @Return: EntityResponse<Folder>\n   */\n  changeGeoArea(id?: string, body?: Coordinate[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoArea`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change folder geo-location (center)\n   * @Return: EntityResponse<Folder>\n   */\n  changeGeoLocation(id?: string, body?: Coordinate) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoLocation`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change folder timezone\n   * @Return: EntityResponse<Folder>\n   */\n  changeTimezone(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/timezone`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete folder from the system (only if it is empty)\n   * @Return: ActionResponse error will be returned if the folder is not empty\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single folder by id\n   * @Return: EntityResponse<Folder>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get folders by list of ids\n   * @Return: EntitiesResponse<Folder>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find events by filters\n   * @Return: QueryResponse<Folder>\n   */\n  find(id?: string, search?: string, parentId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (parentId != null) { params.push(`parentId=${parentId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find and filter list of folders\n   * @Return: QueryResponse<Folder>\n   */\n  getSubFolders(id?: string, search?: string, parentId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (parentId != null) { params.push(`parentId=${parentId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/folders`, ...params);\n  }\n\n  /**\n   * Get items (folders and sensors) by parent folder id\n   * @Return: QueryResponse<TreeItem>\n   */\n  getSubItems(id?: string, search?: string, parentId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (parentId != null) { params.push(`parentId=${parentId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/items`, ...params);\n  }\n\n  /**\n   * Get account tree hierarchy (folders and sensors) - starting from the account level as root\n   * @Return: EntityResponse<TreeNode>\n   */\n  getHierarchy(includeSensors?: boolean) {\n    const params = new Array();\t\t\n    if (includeSensors != null) { params.push(`includeSensors=${includeSensors}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/tree`, ...params);\n  }\n\n  /**\n   * Get default geo bounds\n   * @Return: EntityResponse<Coordinate> The folder location\n   */\n  getDefaultLocation(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/geoLocation`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { GeoControlPoints } from '../common/GeoControlPoints';\n\n\n/**\n * List of Geo-spatial utilities\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class GeoService {\n\n  // URL to web api\n  private baseUrl = '/geo';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Digitize sensor FOV on WGS-84 coordinate system\n   * Each GeoControlPoint in the list composed of point in the FOV and its referenced coordinate.\n   * The point represents the x,y values a normalized scale (each axis is 0 - 1000)\n   * The returned value is a GeoReference data structure describes the contours of the\n   * FOV on the image and the map and X,Y factors and offsets for transformation\n   * @Return: EntityResponse<GeoReferenceData>\n   */\n  geoReference(body?: GeoControlPoints) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Health check service, no X-API-KEY or X-ACCESS-TOKEN are required \n */\n@Injectable()\nexport class HealthCheckService {\n\n  // URL to web api\n  private baseUrl = '/health';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Health check to test service availability\n   * @Return: ActionResponse - with version info\n   */\n  health() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { IntegrationTarget } from '../entities/IntegrationTarget';\n\n\n/**\n * Services for integrations targets (templates)\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class IntegrationsService {\n\n  // URL to web api\n  private baseUrl = '/integrations';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new integration target\n   * @Return: EntityResponse<IntegrationTarget>\n   */\n  create(body?: IntegrationTarget) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update integration target\n   * @Return: EntityResponse<IntegrationTarget>\n   */\n  update(id?: string, body?: IntegrationTarget) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete integration target from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single integration target by id\n   * @Return: EntityResponse<IntegrationTarget>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get integration targets by list of ids\n   * @Return: EntitiesResponse<IntegrationTarget>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find integration targets by filters\n   * @Return: EntitiesResponse<IntegrationTarget>\n   */\n  find(search?: string, type?: string) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ReportDefinition } from '../entities/ReportDefinition';\n\n\n/**\n * Services for reports definition actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class ReportsService {\n\n  // URL to web api\n  private baseUrl = '/reports';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new report definition\n   * @Return: EntityResponse<ReportDefinition>\n   */\n  create(body?: ReportDefinition) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update report definition\n   * @Return: EntityResponse<ReportDefinition>\n   */\n  update(id?: string, body?: ReportDefinition) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete report definition from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single report definition by id\n   * @Return: EntityResponse<ReportDefinition>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get multiple report definitions by list of ids\n   * @Return: EntitiesResponse<ReportDefinition>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find report definitions by filters\n   * @Return: QueryResponse<ReportDefinition>\n   */\n  find(search?: string) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Rule } from '../entities/Rule';\nimport { RuleTypeCode } from '../enums/RuleTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\n\n\n/**\n * Services for rules actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class RulesService {\n\n  // URL to web api\n  private baseUrl = '/rules';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new rule\n   * @Return: EntityResponse<Rule>\n   */\n  create(body?: Rule) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update rule\n   * @Return: EntityResponse<Rule>\n   */\n  update(id?: string, body?: Rule) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete rule from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single rule by id\n   * @Return: EntityResponse<Rule>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get rules by list of ids\n   * @Return: EntitiesResponse<Rule>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find rules by filters\n   * @Return: QueryResponse<Rule>\n   */\n  find(folderId?: string, sensorId?: string, search?: string, ruleType?: RuleTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (ruleType != null) { params.push(`ruleType=${ruleType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get rules specifications available by account features\n   * @Return: EntitiesResponse<RuleSpec>\n   */\n  getSpecs() {\n    return this.rest.get(`${this.baseUrl}/spec`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ScheduledReport } from '../entities/ScheduledReport';\n\n\n/**\n * Services for scheduled reports definition actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class ScheduledReportsService {\n\n  // URL to web api\n  private baseUrl = '/scheduled-reports';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new scheduled report definition\n   * @Return: EntityResponse<ScheduledReport>\n   */\n  create(body?: ScheduledReport) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update scheduled report definition\n   * @Return: EntityResponse<ScheduledReport>\n   */\n  update(id?: string, body?: ScheduledReport) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete scheduled report definition from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single scheduled report definition by id\n   * @Return: EntityResponse<ScheduledReport>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get multiple scheduled report definitions by list of ids\n   * @Return: EntitiesResponse<ScheduledReport>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find scheduled report definitions by filters\n   * @Return: QueryResponse<ScheduledReport>\n   */\n  find(search?: string) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Schedule } from '../entities/Schedule';\n\n\n/**\n * Services for schedules actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SchedulesService {\n\n  // URL to web api\n  private baseUrl = '/schedules';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new schedule\n   * @Return: EntityResponse<Schedule>\n   */\n  create(body?: Schedule) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update schedule\n   * @Return: EntityResponse<Schedule>\n   */\n  update(id?: string, body?: Schedule) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete schedule from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single schedule by id\n   * @Return: EntityResponse<Schedule>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get schedules by list of ids\n   * @Return: EntitiesResponse<Schedule>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find schedule by filters\n   * @Return: QueryResponse<Schedule>\n   */\n  find(search?: string, folderId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find all schedules for a specified level in the folder hierarchy\n   * This method returns all the schedules of the current folder and all parent folders\n   * @Return: EntitiesResponse<Schedule>\n   */\n  getFolderSchedules(folderId?: string) {\n    return this.rest.get(`${this.baseUrl}/folder/${folderId}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { SearchDefinition } from '../entities/SearchDefinition';\n\n\n/**\n * Services for metadata search actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SearchService {\n\n  // URL to web api\n  private baseUrl = '/search';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new search definition\n   * @Return: EntityResponse<SearchDefinition>\n   */\n  create(body?: SearchDefinition) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update search definition\n   * @Return: EntityResponse<SearchDefinition>\n   */\n  update(id?: string, body?: SearchDefinition) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete search definition from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single search definition by id\n   * @Return: EntityResponse<SearchDefinition>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get multiple search definitions by list of ids\n   * @Return: EntitiesResponse<SearchDefinition>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find search definitions by filters\n   * @Return: QueryResponse<SearchDefinition>\n   */\n  find(search?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Perform metadata search by the search definition\n   * @Return: QueryResponse<ObjectInfo> - list of detected objects\n   * Search image web socket (/ws/search?search=searchId) must be open before this method invocation.\n   * Please provide search id to query definition and use the same id for the web socket\n   */\n  execute(body?: SearchDefinition) {\n    return this.rest.post(`${this.baseUrl}/execute`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Perform metadata saved search by the search id\n   * @Return: QueryResponse<ObjectInfo> - list of detected objects\n   */\n  executeById(id?: string) {\n    return this.rest.get(`${this.baseUrl}/execute/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Sensor } from '../entities/Sensor';\nimport { Coordinate } from '../common/Coordinate';\nimport { FovGeoAttributes } from '../common/FovGeoAttributes';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\n\n\n/**\n * Services for sensor actions\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SensorsService {\n\n  // URL to web api\n  private baseUrl = '/sensors';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new sensor\n   * @Return: EntityResponse<Sensor>\n   */\n  create(body?: Sensor) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update sensor parameters\n   * @Return: EntityResponse<Sensor>\n   */\n  update(id?: string, body?: Sensor) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change sensor name\n   * @Return: EntityResponse<Sensor>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change sensor parent folder id\n   * @Return: EntityResponse<Sensor>\n   */\n  changeFolder(id?: string, folderId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/folder/${folderId}`, null);\n  }\n\n  /**\n   * Change sensor geo-location\n   * @Return: EntityResponse<Sensor>\n   */\n  changeGeoLocation(id?: string, body?: Coordinate) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoLocation`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change sensor field of view transformation attributes\n   * @Return: EntityResponse<Sensor>\n   */\n  changeFovAttributes(id?: string, azimuth?: number, body?: FovGeoAttributes) {\n    const params = new Array();\t\t\n    if (azimuth != null) { params.push(`azimuth=${azimuth}`); }\n\n\t\treturn this.rest.put(`${this.baseUrl}/${id}/fov`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Change sensor status\n   * @Return: EntityResponse<Sensor>\n   */\n  changeStatus(id?: string, status?: SensorStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Delete sensor from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single sensor by id\n   * @Return: EntityResponse<Sensor>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get sensors by list of ids\n   * @Return: EntitiesResponse<Sensor>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find sensors by filters\n   * @Return: QueryResponse<Sensor>\n   */\n  find(folderId?: string, subFolders?: boolean, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (subFolders != null) { params.push(`subFolders=${subFolders}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (stream != null) { params.push(`stream=${stream}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get sensor reference image [response content type: image/jpeg]\n   * @Return: StreamingOutput of the reference image\n   */\n  getRefImage(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/ref-image`);\n  }\n\n  /**\n   * Set sensor reference image [put binary image in body with content type: image/jpeg]\n   * @Return: ActionResponse\n   */\n  setRefImage(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/ref-image`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get default geo location\n   * @Return: EntityResponse<Coordinate>\n   */\n  getDefaultLocation(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/geoLocation`);\n  }\n\n  /**\n   * Get single sensor health by sensor id\n   * @Return: EntityResponse<SensorHealth>\n   */\n  getSensorHealthStatus(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/health`);\n  }\n\n  /**\n   * Get all sensors health status\n   * @Return: EntitiesResponse<SensorHealth>\n   */\n  getSensorsHealthStatus() {\n    return this.rest.get(`${this.baseUrl}/health`);\n  }\n\n  /**\n   * Get sensor status history over time\n   * @Return:  EntityResponse<SensorStatusTimeSeries>\n   */\n  getStatusOverTime(id?: string, from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/status/overtime`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\nimport { TokenRequest } from '../messages/TokenRequest';\n\n\n/**\n * Services for user registration and login \n */\n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Login to the system with user email and password\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<LoginData>\n   */\n  login(body?: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/login`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<LoginData>\n   */\n  refreshToken() {\n    return this.rest.post(`${this.baseUrl}/refresh-token`, null);\n  }\n\n  /**\n   * Verify user by temporary login key\n   * @Return: EntityResponse<User>\n   */\n  verifyLoginKey(key?: string) {\n    const params = new Array();\t\t\n    if (key != null) { params.push(`key=${key}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/login/verify`, ...params);\n  }\n\n  /**\n   * Send verification code by email\n   * @Return: ActionResponse\n   */\n  sendVerificationCode(body?: string) {\n    return this.rest.post(`${this.baseUrl}/verify`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Validate verification code and reset password\n   * @Return: ActionResponse\n   */\n  resetPassword(code?: string) {\n    return this.rest.post(`${this.baseUrl}/reset-password`, typeof code === 'object' ? JSON.stringify(code) : code);\n  }\n\n  /**\n   * Change password\n   * @Return: ActionResponse\n   */\n  changePassword(body?: ChangePasswordRequest) {\n    return this.rest.post(`${this.baseUrl}/change-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Check if password was used before (according to password policy)\n   * @Return: ActionResponse\n   */\n  checkUnusedPassword(body?: string) {\n    return this.rest.post(`${this.baseUrl}/check-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user name\n   * @Return: ActionResponse\n   */\n  changeName(body?: string) {\n    return this.rest.put(`${this.baseUrl}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user mobile\n   * @Return: ActionResponse\n   */\n  changeMobile(body?: string) {\n    return this.rest.put(`${this.baseUrl}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchAccount(body?: TokenRequest) {\n    return this.rest.post(`${this.baseUrl}/switch-account`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get innoVi client configuration (map clients and other configurations)\n   * @Return: EntityResponse<InnoviClientConfig>\n   */\n  getConfig() {\n    return this.rest.get(`${this.baseUrl}/config`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserInvitation } from '../common/UserInvitation';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class UsersService {\n\n  // URL to web api\n  private baseUrl = '/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  invite(body?: UserInvitation) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.post(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change user role\n   * @Return: EntityResponse<User>\n   */\n  changeRole(id?: string, role?: AccountRoleCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/role/${role}`, null);\n  }\n\n  /**\n   * Delete user from the system\n   * The user will be removed from the account, if no accounts associated with the user, it will be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by email\n   * @Return: EntityResponse<User>\n   */\n  getByEmail(email?: string) {\n    return this.rest.get(`${this.baseUrl}/byEmail/${email}`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<User>\n   */\n  find(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Coordinate } from '../common/Coordinate';\n\n\n/**\n * List of account related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body?: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(id?: string, body?: Account) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update account name\n   * @Return: EntityResponse<Account>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change account type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: AccountTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change account status\n   * @Return: EntityResponse<Account>\n   */\n  changeStatus(id?: string, status?: AccountStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Change account groups\n   * @Return: EntityResponse<Account>\n   */\n  changeGroups(id?: string, groupId?: string[]) {\n    const params = new Array();\t\t\n    if (groupId != null) { params.push(`groupId=${groupId}`); }\n\n\t\treturn this.rest.put(`${this.baseUrl}/${id}/groups/{groups}`, null, ...params);\n  }\n\n  /**\n   * Change account geo-location (center)\n   * @Return: EntityResponse<Account> The changed account\n   */\n  changeGeoLocation(id?: string, body?: Coordinate) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoLocation`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change account geo area\n   * @Return: EntityResponse<Account> The changed account\n   */\n  changeGeoArea(id?: string, body?: Coordinate[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/geoArea`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get default geo location\n   * @Return: EntityResponse<Coordinate> The account location\n   */\n  getDefaultLocation(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/geoLocation`);\n  }\n\n  /**\n   * Delete account from the system\n   * The account is moved to DELETED mode and will be deleted after 90 days\n   * Only account marked as SUSPENDED can be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Delete account immediately without account status restrictions\n   * @Return: ActionResponse\n   */\n  purge(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/purge/${id}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get accounts by list of ids\n   * @Return: EntitiesResponse<Account>\n   */\n  list(id?: string[]) {\n    const params = new Array();\t\t\n    if (id != null) { params.push(`id=${id}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/list`, ...params);\n  }\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get account types statistics for all accounts in the system\n   * @Return: EntitiesResponse<AccountTypeSummary>\n   */\n  getAccountTypeStatistics() {\n    return this.rest.get(`${this.baseUrl}/statistics/type`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ApplianceStatusCode } from '../enums/ApplianceStatusCode';\nimport { CommandStatusCode } from '../enums/CommandStatusCode';\n\n\n/**\n * List of appliance queries for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAppliancesService {\n\n  // URL to web api\n  private baseUrl = '/sys/appliances';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single appliance by id\n   * @Return: EntityResponse<Appliance>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of appliances and filter\n   * @Return: QueryResponse<Appliance>\n   */\n  find(accountId?: string, search?: string, status?: ApplianceStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Delete appliance from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of appliance commands and filter\n   * @Return: EntitiesResponse<ApplianceCommand> List of appliance commands\n   */\n  getCommands(accountId?: string, applianceId?: string, status?: CommandStatusCode[]) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (applianceId != null) { params.push(`applianceId=${applianceId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/commands`, ...params);\n  }\n\n  /**\n   * Update command status\n   * @Return: ActionResponse\n   */\n  setCommandStatus(commandId?: string, status?: CommandStatusCode) {\n    return this.rest.put(`${this.baseUrl}/commands/${commandId}/${status}`, null);\n  }\n\n  /**\n   * Delete command\n   * @Return: ActionResponse\n   */\n  deleteCommand(commandId?: string) {\n    return this.rest.delete(`${this.baseUrl}/commands/${commandId}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Configuration } from '../entities/Configuration';\nimport { ProductTypeCode } from '../enums/ProductTypeCode';\nimport { ConfigurationVersion } from '../entities/ConfigurationVersion';\nimport { ConfigurationTemplate } from '../entities/ConfigurationTemplate';\n\n\n/**\n * List of configurations related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysConfigurationsService {\n\n  // URL to web api\n  private baseUrl = '/sys/configurations';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new configuration in the system\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<Configuration>\n   */\n  create(body?: Configuration) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update configuration in the system\n   * @Return: EntityResponse<Configuration>\n   */\n  update(id?: string, body?: Configuration) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete configuration by id\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Set default version for configuration\n   * @Return: ActionResponse\n   */\n  setDefaultVersion(id?: string, versionId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/default-version/${versionId}`, null);\n  }\n\n  /**\n   * Get configuration by id\n   * @Return: EntityResponse<Configuration>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get list of configurations by filter\n   * @Return: QueryResponse<Configuration>\n   */\n  find(target?: ProductTypeCode[], search?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (target != null) { params.push(`target=${target}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Create new configuration version in the system\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<ConfigurationVersion>\n   */\n  createVersion(id?: string, body?: ConfigurationVersion) {\n    return this.rest.post(`${this.baseUrl}/${id}/versions`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update configuration version in the system\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<ConfigurationVersion>\n   */\n  updateVersion(id?: string, body?: ConfigurationVersion) {\n    return this.rest.put(`${this.baseUrl}/${id}/versions`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete configuration version by id\n   * @Return: ActionResponse\n   */\n  deleteVersion(id?: string, versionId?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}/versions/${versionId}`);\n  }\n\n  /**\n   * Get specific configuration version\n   * @Return: EntityResponse<ConfigurationVersion>\n   */\n  getVersion(id?: string, versionId?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/versions/${versionId}`);\n  }\n\n  /**\n   * Get all versions of specific configuration\n   * @Return: EntitiesResponse<ConfigurationVersion>\n   */\n  getVersions(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/versions`);\n  }\n\n  /**\n   * Create new configuration template in the system\n   * @Return: EntityResponse<ConfigurationTemplate>\n   */\n  createTemplate(body?: ConfigurationTemplate) {\n    return this.rest.post(`${this.baseUrl}/templates`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update configuration template in the system\n   * @Return: EntityResponse<ConfigurationTemplate>\n   */\n  updateTemplate(id?: string, body?: ConfigurationTemplate) {\n    return this.rest.put(`${this.baseUrl}/templates/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete configuration template by id\n   * @Return: ActionResponse\n   */\n  deleteTemplate(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/templates/${id}`);\n  }\n\n  /**\n   * Get configuration template by id\n   * @Return: EntityResponse<ConfigurationTemplate>\n   */\n  getTemplate(id?: string) {\n    return this.rest.get(`${this.baseUrl}/templates/${id}`);\n  }\n\n  /**\n   * Get list of configuration templates\n   * @Return: QueryResponse<ConfigurationTemplate>\n   */\n  findTemplates(page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/templates`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ObjectTypeCode } from '../enums/ObjectTypeCode';\nimport { BehaviorTypeCode } from '../enums/BehaviorTypeCode';\nimport { SeverityTypeCode } from '../enums/SeverityTypeCode';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\n\n\n/**\n * Services for event queries for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysEventsService {\n\n  // URL to web api\n  private baseUrl = '/sys/events';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single event by id\n   * @Return: EntityResponse<Event>\n   */\n  get(id?: string, accountId?: string) {\n    return this.rest.get(`${this.baseUrl}/${accountId}/${id}`);\n  }\n\n  /**\n   * Find events by filters\n   * @Return: QueryResponse<Event>\n   */\n  find(accountId?: string, folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (objectType != null) { params.push(`objectType=${objectType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${accountId}/`, ...params);\n  }\n\n  /**\n   * Get events count overtime for all events in the system\n   * @Return: EntityResponse<EventCountTimeSeries>\n   */\n  getEventsCountOvertime(accountId?: string, folderId?: string, sensorId?: string, objectType?: ObjectTypeCode[], behaviorType?: BehaviorTypeCode[], severity?: SeverityTypeCode[], from?: number, to?: number, interval?: TimeUnitCode, format?: string) {\n    const params = new Array();\t\t\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (sensorId != null) { params.push(`sensorId=${sensorId}`); }\n    if (objectType != null) { params.push(`objectType=${objectType}`); }\n    if (behaviorType != null) { params.push(`behaviorType=${behaviorType}`); }\n    if (severity != null) { params.push(`severity=${severity}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (interval != null) { params.push(`interval=${interval}`); }\n    if (format != null) { params.push(`format=${format}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${accountId}/overtime`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { FeaturesGroup } from '../entities/FeaturesGroup';\n\n\n/**\n * Features groups services for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysFeaturesGroupsService {\n\n  // URL to web api\n  private baseUrl = '/sys/features/groups';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new features group\n   * @Return: EntityResponse<FeaturesGroup>\n   */\n  create(body?: FeaturesGroup) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update features group\n   * @Return: EntityResponse<FeaturesGroup>\n   */\n  update(id?: string, body?: FeaturesGroup) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change features group name\n   * @Return: EntityResponse<FeaturesGroup>\n   */\n  setName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change features group features list\n   * @Return: EntityResponse<FeaturesGroup>\n   */\n  setFeatures(id?: string, body?: string[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/features`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete Feature from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single features group by id\n   * @Return: EntityResponse<FeaturesGroup>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find features groups by filters\n   * @Return: QueryResponse<FeaturesGroup>\n   */\n  find(search?: string, sort?: string) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Feature } from '../entities/Feature';\n\n\n/**\n * Features services for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysFeaturesService {\n\n  // URL to web api\n  private baseUrl = '/sys/features';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new Feature\n   * @Return: EntityResponse<Feature>\n   */\n  create(body?: Feature) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update Feature\n   * @Return: EntityResponse<Feature>\n   */\n  update(id?: string, body?: Feature) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete Feature from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single feature by id\n   * @Return: EntityResponse<Feature>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find features by filters\n   * @Return: QueryResponse<Feature>\n   */\n  find(search?: string, category?: string, sort?: string) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (category != null) { params.push(`category=${category}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ApiKey } from '../entities/ApiKey';\n\n\n/**\n * List of all key (API key + User token) related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysKeysService {\n\n  // URL to web api\n  private baseUrl = '/sys/keys';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new API key for specific application name\n   * @Return: EntityResponse<ApiKey>\n   */\n  create(body?: ApiKey) {\n    return this.rest.post(`${this.baseUrl}/api-keys`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change API Key version (rotate key)\n   * @Return: EntityResponse<ApiKey>\n   */\n  rotate(id?: string) {\n    return this.rest.put(`${this.baseUrl}/api-keys/${id}/rotate`, null);\n  }\n\n  /**\n   * Delete API Key\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/api-keys/${id}`);\n  }\n\n  /**\n   * Get single API Key by id\n   * @Return: EntityResponse<ApiKey>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/api-keys/${id}`);\n  }\n\n  /**\n   * Get list of all keys\n   * @Return: EntitiesResponse<ApiKey>\n   */\n  getAll() {\n    return this.rest.get(`${this.baseUrl}/api-keys`);\n  }\n\n  /**\n   * Enable key\n   * @Return: EntityResponse<ApiKey>\n   */\n  enable(id?: string) {\n    return this.rest.put(`${this.baseUrl}/api-keys/${id}/enable`, null);\n  }\n\n  /**\n   * Disable key\n   * @Return: EntityResponse<ApiKey>\n   */\n  disable(id?: string) {\n    return this.rest.put(`${this.baseUrl}/api-keys/${id}/disable`, null);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { SensorTypeCode } from '../enums/SensorTypeCode';\nimport { SensorStatusCode } from '../enums/SensorStatusCode';\nimport { StreamTypeCode } from '../enums/StreamTypeCode';\n\n\n/**\n * Services for sensor actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysSensorsService {\n\n  // URL to web api\n  private baseUrl = '/sys/sensors';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single sensor by id\n   * @Return: EntityResponse<Sensor>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find sensors by filters\n   * @Return: QueryResponse<Sensor>\n   */\n  find(accountId?: string, folderId?: string, subFolders?: boolean, search?: string, type?: SensorTypeCode[], status?: SensorStatusCode[], stream?: StreamTypeCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (folderId != null) { params.push(`folderId=${folderId}`); }\n    if (subFolders != null) { params.push(`subFolders=${subFolders}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (stream != null) { params.push(`stream=${stream}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single sensor health by sensor id\n   * @Return: EntityResponse<SensorHealth>\n   */\n  getSensorHealthStatus(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/health`);\n  }\n\n  /**\n   * Get all sensors health status\n   * @Return: EntitiesResponse<SensorHealth>\n   */\n  getSensorsHealthStatus() {\n    return this.rest.get(`${this.baseUrl}/health`);\n  }\n\n  /**\n   * Get sensor status history over time\n   * @Return:  EntityResponse<SensorStatusTimeSeries>\n   */\n  getStatusOverTime(id?: string, from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/status/overtime`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * List of general system configuration actions for system administrator only \n */\n@Injectable()\nexport class SysSystemService {\n\n  // URL to web api\n  private baseUrl = '/sys/system';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get system license\n   * @Return: EntityResponse<License>\n   */\n  getLicense() {\n    return this.rest.get(`${this.baseUrl}/license`);\n  }\n\n  /**\n   * Import license data from file\n   * @Return: ActionResponse\n   */\n  importLicense() {\n    return this.rest.post(`${this.baseUrl}/license`, null);\n  }\n\n  /**\n   * Get system version\n   * @Return: ActionResponse\n   */\n  getSystemVersion() {\n    return this.rest.get(`${this.baseUrl}/license`);\n  }\n\n  /**\n   * Export account configuration data\n   * @Return: StreamingOutput of the content (gzip)\n   */\n  exportAccountData(id?: string) {\n    return this.rest.get(`${this.baseUrl}/export`);\n  }\n\n  /**\n   * Import account configuration data from byte array (zip content)\n   * @Return: ActionResponse\n   */\n  importAccountData() {\n    return this.rest.post(`${this.baseUrl}/import`, null);\n  }\n\n  /**\n   * Export SW package configurations data\n   * @Return: StreamingOutput of the content (gzip)\n   */\n  exportConfigurations(id?: string) {\n    return this.rest.get(`${this.baseUrl}/configurations/export`);\n  }\n\n  /**\n   * Import SW package configurations data from byte array (zip content)\n   * @Return: ActionResponse\n   */\n  importConfigurations() {\n    return this.rest.post(`${this.baseUrl}/configurations/import`, null);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserInvitation } from '../common/UserInvitation';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * List of all user related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  create(body?: UserInvitation) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change user status\n   * @Return: EntityResponse<User>\n   */\n  changeStatus(id?: string, status?: UserStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Change user default account\n   * @Return: EntityResponse<User>\n   */\n  changeDefaultAccount(id?: string, accountId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/defaultAccount/${accountId}`, null);\n  }\n\n  /**\n   * Set user roles in his accounts (override previous roles)\n   * @Return: EntityResponse<User>\n   */\n  setRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.post(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Update user roles in his accounts (merge with existing roles)\n   * @Return: EntityResponse<User>\n   */\n  mergeRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Delete user from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by Id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by filter\n   * @Return: QueryResponse<User>\n   */\n  find(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { AccountsService } from './accountsService';\nimport { AppliancesService } from './appliancesService';\nimport { AuditLogService } from './auditLogService';\nimport { CalendarsService } from './calendarsService';\nimport { EventsService } from './eventsService';\nimport { FoldersService } from './foldersService';\nimport { GeoService } from './geoService';\nimport { IntegrationsService } from './integrationsService';\nimport { ReportsService } from './reportsService';\nimport { RulesService } from './rulesService';\nimport { ScheduledReportsService } from './scheduledReportsService';\nimport { SchedulesService } from './schedulesService';\nimport { SearchService } from './searchService';\nimport { SensorsService } from './sensorsService';\nimport { UserService } from './userService';\nimport { UsersService } from './usersService';\nimport { AnomalyService } from './anomalyService';\nimport { HealthCheckService } from './healthCheckService';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysAppliancesService } from './sysAppliancesService';\nimport { SysConfigurationsService } from './sysConfigurationsService';\nimport { SysEventsService } from './sysEventsService';\nimport { SysFeaturesGroupsService } from './sysFeaturesGroupsService';\nimport { SysFeaturesService } from './sysFeaturesService';\nimport { SysKeysService } from './sysKeysService';\nimport { SysSensorsService } from './sysSensorsService';\nimport { SysSystemService } from './sysSystemService';\nimport { SysUsersService } from './sysUsersService';\n\nexport const Services = [\n    AccountsService,\n    AppliancesService,\n    AuditLogService,\n    CalendarsService,\n    EventsService,\n    FoldersService,\n    GeoService,\n    IntegrationsService,\n    ReportsService,\n    RulesService,\n    ScheduledReportsService,\n    SchedulesService,\n    SearchService,\n    SensorsService,\n    UserService,\n    UsersService,\n    AnomalyService,\n    HealthCheckService,\n    SysAccountsService,\n    SysAppliancesService,\n    SysConfigurationsService,\n    SysEventsService,\n    SysFeaturesGroupsService,\n    SysFeaturesService,\n    SysKeysService,\n    SysSensorsService,\n    SysSystemService,\n    SysUsersService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CoreConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class CoreLibModule {\n  static forRoot(config: CoreConfig): ModuleWithProviders {\n    // console.log(config);\n    return {\n      ngModule: CoreLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n"]}