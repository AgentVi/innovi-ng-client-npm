/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseEntity } from '../entities/BaseEntity';
/*
   Query definitions for ad-hoc search specification
*/
export class SearchDefinition extends BaseEntity {
}
if (false) {
    /** @type {?} */
    SearchDefinition.prototype.accountId;
    /** @type {?} */
    SearchDefinition.prototype.userId;
    /** @type {?} */
    SearchDefinition.prototype.name;
    /** @type {?} */
    SearchDefinition.prototype.tag;
    /** @type {?} */
    SearchDefinition.prototype.privateSearch;
    /** @type {?} */
    SearchDefinition.prototype.objects;
    /** @type {?} */
    SearchDefinition.prototype.timeScope;
    /** @type {?} */
    SearchDefinition.prototype.timeFrame;
    /** @type {?} */
    SearchDefinition.prototype.sourceScope;
    /** @type {?} */
    SearchDefinition.prototype.sensorIds;
    /** @type {?} */
    SearchDefinition.prototype.folderIds;
    /** @type {?} */
    SearchDefinition.prototype.geoCircle;
    /** @type {?} */
    SearchDefinition.prototype.geoPolygon;
    /** @type {?} */
    SearchDefinition.prototype.id;
    /** @type {?} */
    SearchDefinition.prototype._type;
    /** @type {?} */
    SearchDefinition.prototype.createdOn;
    /** @type {?} */
    SearchDefinition.prototype.updatedOn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoRGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZ2VudHZpL25nLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2VudGl0aWVzL1NlYXJjaERlZmluaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQVdwRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVTtDQXFEL0M7OztJQWxERyxxQ0FBeUI7O0lBR3pCLGtDQUFzQjs7SUFHdEIsZ0NBQW9COztJQUdwQiwrQkFBbUI7O0lBR25CLHlDQUE4Qjs7SUFHOUIsbUNBQStCOztJQUcvQixxQ0FBaUM7O0lBR2pDLHFDQUE0Qjs7SUFHNUIsdUNBQW9DOztJQUdwQyxxQ0FBMkI7O0lBRzNCLHFDQUEyQjs7SUFHM0IscUNBQTRCOztJQUc1QixzQ0FBOEI7O0lBRzlCLDhCQUFrQjs7SUFHbEIsaUNBQXFCOztJQUdyQixxQ0FBeUI7O0lBR3pCLHFDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuLi9lbnRpdGllcy9CYXNlRW50aXR5JztcbmltcG9ydCB7IFNlYXJjaE9iamVjdCB9IGZyb20gJy4uL2NvbW1vbi9TZWFyY2hPYmplY3QnO1xuaW1wb3J0IHsgU2VhcmNoVGltZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZWFyY2hUaW1lQ29kZSc7XG5pbXBvcnQgeyBUaW1lRnJhbWUgfSBmcm9tICcuLi9jb21tb24vVGltZUZyYW1lJztcbmltcG9ydCB7IFNlYXJjaFNjb3BlQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlYXJjaFNjb3BlQ29kZSc7XG5pbXBvcnQgeyBHZW9DaXJjbGUgfSBmcm9tICcuLi9jb21tb24vR2VvQ2lyY2xlJztcbmltcG9ydCB7IEdlb1BvbHlnb24gfSBmcm9tICcuLi9jb21tb24vR2VvUG9seWdvbic7XG5cbi8qIFxuICAgUXVlcnkgZGVmaW5pdGlvbnMgZm9yIGFkLWhvYyBzZWFyY2ggc3BlY2lmaWNhdGlvbiBcbiovXG5leHBvcnQgY2xhc3MgU2VhcmNoRGVmaW5pdGlvbiBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIEFjY291bnQgSWQgXG4gICAgcHVibGljIGFjY291bnRJZDogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgSWQgd2hvIGNyZWF0ZWQgdGhlIHNlYXJjaCBcbiAgICBwdWJsaWMgdXNlcklkOiBzdHJpbmc7XG4gXG4gICAgLy8gU2VhcmNoIG5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBTZWFyY2ggVGFnIChmb3Igb3JnYW5pemluZyBzZWFyY2ggZGVmaW5pdGlvbnMgaW4gZm9sZGVyLWxpa2Ugc3RydWN0dXJlKSBcbiAgICBwdWJsaWMgdGFnOiBzdHJpbmc7XG4gXG4gICAgLy8gSXMgdGhlIHNlYXJjaCBkZWZpbml0aW9uIGlzIHByaXZhdGUgKGFjY2Vzc2libGUgYnkgb3duZXIgb25seSkgb3IgcHVibGljIChhY2Nlc3NpYmxlIGJ5IGFsbCBhY2NvdW50IHVzZXJzKSBcbiAgICBwdWJsaWMgcHJpdmF0ZVNlYXJjaDogYm9vbGVhbjtcbiBcbiAgICAvLyBPYmplY3RzIGF0dHJpYnV0ZXMgdG8gc2VhcmNoIGZvciAod2hhdCkgXG4gICAgcHVibGljIG9iamVjdHM6IFNlYXJjaE9iamVjdFtdO1xuIFxuICAgIC8vIFRpbWUgc2NvcGUgdG8gc2VhcmNoIGZvciAoQ1VTVE9NIG9yIER1cmF0aW9uIGZvcm1hdCBbUG5EVG5Ibk1uXSBlLmcuIFBUMjRIKSBcbiAgICBwdWJsaWMgdGltZVNjb3BlOiBTZWFyY2hUaW1lQ29kZTtcbiBcbiAgICAvLyBUaW1lIGZyYW1lIHRvIHNlYXJjaCBmb3IgKGFwcGxpY2F0aXZlIG9ubHkgaWYgc2VhcmNoIHNjb3BlIGlzIENVU1RPTSkgXG4gICAgcHVibGljIHRpbWVGcmFtZTogVGltZUZyYW1lO1xuIFxuICAgIC8vIFNjb3BlIG9mIHNvdXJjZTogVU5ERUZJTkVEIHwgU0VOU09SUyB8IEZPTERFUlMgfCBHRU9fQ0lSQ0xFIHwgR0VPX1BPTFlHT04gXG4gICAgcHVibGljIHNvdXJjZVNjb3BlOiBTZWFyY2hTY29wZUNvZGU7XG4gXG4gICAgLy8gQ2FtZXJhcyBzY29wZSAtIGxpc3Qgb2Ygc2Vuc29yIGlkcyB0byBwZXJmb3JtIHNlYXJjaCBvbiAoYXBwbGljYWJsZSBmb3Igc2VhcmNoIHNjb3BlID0gU0VOU09SUykgXG4gICAgcHVibGljIHNlbnNvcklkczogc3RyaW5nW107XG4gXG4gICAgLy8gRm9sZGVycyBzY29wZSAtIGxpc3Qgb2YgZm9sZGVyIGlkcyB0byBwZXJmb3JtIHNlYXJjaCBvbiAoYXBwbGljYWJsZSBmb3Igc2VhcmNoIHNjb3BlID0gRk9MREVSUykgXG4gICAgcHVibGljIGZvbGRlcklkczogc3RyaW5nW107XG4gXG4gICAgLy8gQ2lyY3VsYXIgYXJlYSBvbiBtYXAgdG8gbGltaXQgdGhlIHNlYXJjaCAoYXBwbGljYWJsZSBmb3Igc2VhcmNoIHNjb3BlID0gR0VPX0NJUkNMRSkgXG4gICAgcHVibGljIGdlb0NpcmNsZTogR2VvQ2lyY2xlO1xuIFxuICAgIC8vIFBvbHlnb24gYXJlYSBvbiB0aGUgbWFwIHRvIGxpbWl0IHRoZSBzZWFyY2ggKGFwcGxpY2FibGUgZm9yIHNlYXJjaCBzY29wZSA9IEdFT19QT0xZR09OKSBcbiAgICBwdWJsaWMgZ2VvUG9seWdvbjogR2VvUG9seWdvbjtcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gXG4gICAgLy8gRW50aXR5IGRvY3VtZW50IHR5cGUgKHN5c3RlbSBmaWVsZCkgXG4gICAgcHVibGljIF90eXBlOiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgY3JlYXRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgdXBkYXRlZE9uOiBudW1iZXI7XG4gXG59XG5cblxuIl19