/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseEntity } from '../entities/BaseEntity';
/*
   Query definitions for ad-hoc search specification
*/
export class SearchDefinition extends BaseEntity {
}
if (false) {
    /** @type {?} */
    SearchDefinition.prototype.accountId;
    /** @type {?} */
    SearchDefinition.prototype.userId;
    /** @type {?} */
    SearchDefinition.prototype.name;
    /** @type {?} */
    SearchDefinition.prototype.tag;
    /** @type {?} */
    SearchDefinition.prototype.privateSearch;
    /** @type {?} */
    SearchDefinition.prototype.objects;
    /** @type {?} */
    SearchDefinition.prototype.timeScope;
    /** @type {?} */
    SearchDefinition.prototype.timeFrame;
    /** @type {?} */
    SearchDefinition.prototype.sourceScope;
    /** @type {?} */
    SearchDefinition.prototype.sensorRules;
    /** @type {?} */
    SearchDefinition.prototype.geoRule;
    /** @type {?} */
    SearchDefinition.prototype.folderIds;
    /** @type {?} */
    SearchDefinition.prototype.geoCircle;
    /** @type {?} */
    SearchDefinition.prototype.geoPolygon;
    /** @type {?} */
    SearchDefinition.prototype.id;
    /** @type {?} */
    SearchDefinition.prototype._type;
    /** @type {?} */
    SearchDefinition.prototype.createdOn;
    /** @type {?} */
    SearchDefinition.prototype.updatedOn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoRGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhZ2VudHZpL25nLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2VudGl0aWVzL1NlYXJjaERlZmluaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQVNwRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVTtDQXlEL0M7OztJQXRERyxxQ0FBeUI7O0lBR3pCLGtDQUFzQjs7SUFHdEIsZ0NBQW9COztJQUdwQiwrQkFBbUI7O0lBR25CLHlDQUE4Qjs7SUFHOUIsbUNBQStCOztJQUcvQixxQ0FBaUM7O0lBR2pDLHFDQUE0Qjs7SUFHNUIsdUNBQW9DOztJQUdwQyx1Q0FBaUM7O0lBR2pDLG1DQUF3Qjs7SUFHeEIscUNBQTJCOztJQUczQixxQ0FBNEI7O0lBRzVCLHNDQUE4Qjs7SUFHOUIsOEJBQWtCOztJQUdsQixpQ0FBcUI7O0lBR3JCLHFDQUF5Qjs7SUFHekIscUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VhcmNoVGltZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZWFyY2hUaW1lQ29kZSc7XG5pbXBvcnQgeyBTZWFyY2hTY29wZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZWFyY2hTY29wZUNvZGUnO1xuaW1wb3J0IHsgU2Vuc29yUnVsZSB9IGZyb20gJy4uL2VudGl0aWVzL1NlbnNvclJ1bGUnO1xuaW1wb3J0IHsgR2VvUG9seWdvbiB9IGZyb20gJy4uL2NvbW1vbi9HZW9Qb2x5Z29uJztcbmltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuLi9lbnRpdGllcy9CYXNlRW50aXR5JztcbmltcG9ydCB7IFNlYXJjaE9iamVjdCB9IGZyb20gJy4uL2NvbW1vbi9TZWFyY2hPYmplY3QnO1xuaW1wb3J0IHsgVGltZUZyYW1lIH0gZnJvbSAnLi4vY29tbW9uL1RpbWVGcmFtZSc7XG5pbXBvcnQgeyBHZW9SdWxlIH0gZnJvbSAnLi4vZW50aXRpZXMvR2VvUnVsZSc7XG5pbXBvcnQgeyBHZW9DaXJjbGUgfSBmcm9tICcuLi9jb21tb24vR2VvQ2lyY2xlJztcblxuLyogXG4gICBRdWVyeSBkZWZpbml0aW9ucyBmb3IgYWQtaG9jIHNlYXJjaCBzcGVjaWZpY2F0aW9uIFxuKi9cbmV4cG9ydCBjbGFzcyBTZWFyY2hEZWZpbml0aW9uIGV4dGVuZHMgQmFzZUVudGl0eSB7XG4gXG4gICAgLy8gQWNjb3VudCBJZCBcbiAgICBwdWJsaWMgYWNjb3VudElkOiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBJZCB3aG8gY3JlYXRlZCB0aGUgc2VhcmNoIFxuICAgIHB1YmxpYyB1c2VySWQ6IHN0cmluZztcbiBcbiAgICAvLyBTZWFyY2ggbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFNlYXJjaCBUYWcgKGZvciBvcmdhbml6aW5nIHNlYXJjaCBkZWZpbml0aW9ucyBpbiBmb2xkZXItbGlrZSBzdHJ1Y3R1cmUpIFxuICAgIHB1YmxpYyB0YWc6IHN0cmluZztcbiBcbiAgICAvLyBJcyB0aGUgc2VhcmNoIGRlZmluaXRpb24gaXMgcHJpdmF0ZSAoYWNjZXNzaWJsZSBieSBvd25lciBvbmx5KSBvciBwdWJsaWMgKGFjY2Vzc2libGUgYnkgYWxsIGFjY291bnQgdXNlcnMpIFxuICAgIHB1YmxpYyBwcml2YXRlU2VhcmNoOiBib29sZWFuO1xuIFxuICAgIC8vIE9iamVjdHMgYXR0cmlidXRlcyB0byBzZWFyY2ggZm9yICh3aGF0KSBcbiAgICBwdWJsaWMgb2JqZWN0czogU2VhcmNoT2JqZWN0W107XG4gXG4gICAgLy8gVGltZSBzY29wZSB0byBzZWFyY2ggZm9yIChDVVNUT00gb3IgRHVyYXRpb24gZm9ybWF0IFtQbkRUbkhuTW5dIGUuZy4gUFQyNEgpIFxuICAgIHB1YmxpYyB0aW1lU2NvcGU6IFNlYXJjaFRpbWVDb2RlO1xuIFxuICAgIC8vIFRpbWUgZnJhbWUgdG8gc2VhcmNoIGZvciAoYXBwbGljYXRpdmUgb25seSBpZiBzZWFyY2ggc2NvcGUgaXMgQ1VTVE9NKSBcbiAgICBwdWJsaWMgdGltZUZyYW1lOiBUaW1lRnJhbWU7XG4gXG4gICAgLy8gU2NvcGUgb2Ygc291cmNlOiBVTkRFRklORUQgfCBTRU5TT1JTIHwgRk9MREVSUyB8IEdFT19DSVJDTEUgfCBHRU9fUE9MWUdPTiBcbiAgICBwdWJsaWMgc291cmNlU2NvcGU6IFNlYXJjaFNjb3BlQ29kZTtcbiBcbiAgICAvLyBDYW1lcmFzIHNjb3BlIC0gbGlzdCBvZiBzZW5zb3IgaWRzIGFuZCBydWxlIHBlciBzZW5zb3IgdG8gcGVyZm9ybSBzZWFyY2ggb24gKGFwcGxpY2FibGUgZm9yIHNlYXJjaCBzY29wZSA9IFNFTlNPUlMpIFxuICAgIHB1YmxpYyBzZW5zb3JSdWxlczogU2Vuc29yUnVsZVtdO1xuIFxuICAgIC8vIEdlbyBydWxlIGRlZmluaXRpb25zIHRvIHBlcmZvcm0gc2VhcmNoIG9uIChhcHBsaWNhYmxlIGZvciBzZWFyY2ggc2NvcGUgPSBHRU9fKikgXG4gICAgcHVibGljIGdlb1J1bGU6IEdlb1J1bGU7XG4gXG4gICAgLy8gRm9sZGVycyBzY29wZSAtIGxpc3Qgb2YgZm9sZGVyIGlkcyB0byBwZXJmb3JtIHNlYXJjaCBvbiAoYXBwbGljYWJsZSBmb3Igc2VhcmNoIHNjb3BlID0gRk9MREVSUykgXG4gICAgcHVibGljIGZvbGRlcklkczogc3RyaW5nW107XG4gXG4gICAgLy8gQ2lyY3VsYXIgYXJlYSBvbiBtYXAgdG8gbGltaXQgdGhlIHNlYXJjaCAoYXBwbGljYWJsZSBmb3Igc2VhcmNoIHNjb3BlID0gR0VPX0NJUkNMRSkgXG4gICAgcHVibGljIGdlb0NpcmNsZTogR2VvQ2lyY2xlO1xuIFxuICAgIC8vIFBvbHlnb24gYXJlYSBvbiB0aGUgbWFwIHRvIGxpbWl0IHRoZSBzZWFyY2ggKGFwcGxpY2FibGUgZm9yIHNlYXJjaCBzY29wZSA9IEdFT19QT0xZR09OKSBcbiAgICBwdWJsaWMgZ2VvUG9seWdvbjogR2VvUG9seWdvbjtcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gXG4gICAgLy8gRW50aXR5IGRvY3VtZW50IHR5cGUgKHN5c3RlbSBmaWVsZCkgXG4gICAgcHVibGljIF90eXBlOiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgY3JlYXRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgdXBkYXRlZE9uOiBudW1iZXI7XG4gXG5cbn1cblxuXG4iXX0=