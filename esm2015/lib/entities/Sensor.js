import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
export class Sensor extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY29yZS1saWIvc3JjL2xpYi9lbnRpdGllcy9TZW5zb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS3BEOztFQUVFO0FBQ0YsTUFBTSxPQUFPLE1BQU8sU0FBUSxVQUFVO0NBdUlyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmluZ0tleVZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL1N0cmluZ0tleVZhbHVlJztcbmltcG9ydCB7IFRocmVzaG9sZHMgfSBmcm9tICcuLi9jb21tb24vVGhyZXNob2xkcyc7XG5pbXBvcnQgeyBWaWV3VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9WaWV3VHlwZUNvZGUnO1xuaW1wb3J0IHsgU2Vuc29yQW5vbnltaXphdGlvblR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yQW5vbnltaXphdGlvblR5cGVDb2RlJztcbmltcG9ydCB7IFNlbnNvclN0YXR1c0NvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JTdGF0dXNDb2RlJztcbmltcG9ydCB7IFNlbnNvclJlc29sdXRpb25Db2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yUmVzb2x1dGlvbkNvZGUnO1xuaW1wb3J0IHsgRm92R2VvQXR0cmlidXRlcyB9IGZyb20gJy4uL2NvbW1vbi9Gb3ZHZW9BdHRyaWJ1dGVzJztcbmltcG9ydCB7IFNlbnNvckRlYnVnSW5mbyB9IGZyb20gJy4uL2NvbW1vbi9TZW5zb3JEZWJ1Z0luZm8nO1xuaW1wb3J0IHsgQmFzZUVudGl0eSB9IGZyb20gJy4uL2VudGl0aWVzL0Jhc2VFbnRpdHknO1xuaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBTdHJlYW1UeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1N0cmVhbVR5cGVDb2RlJztcbmltcG9ydCB7IENvb3JkaW5hdGUgfSBmcm9tICcuLi9jb21tb24vQ29vcmRpbmF0ZSc7XG5cbi8qIFxuICAgU2Vuc29yIHR5cGUgXG4qL1xuZXhwb3J0IGNsYXNzIFNlbnNvciBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIEFjY291bnQgSWQgXG4gICAgcHVibGljIGFjY291bnRJZDogc3RyaW5nO1xuIFxuICAgIC8vIEZvbGRlciBJZCAoZW1wdHkgZm9yIHJvb3QgZm9sZGVyKSBcbiAgICBwdWJsaWMgZm9sZGVySWQ6IHN0cmluZztcbiBcbiAgICAvLyBBcHBsaWFuY2UgSWQgXG4gICAgcHVibGljIGFwcGxpYW5jZUlkOiBzdHJpbmc7XG4gXG4gICAgLy8gQWdlbnQgSWQgKFJlbGV2YW50IGZvciBuZXcgcGlwZWxpbmUgb25seSkgXG4gICAgcHVibGljIGFnZW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFNlbnNvciB0eXBlOiBDQ0QgfCBUSEVSTUFMIFxuICAgIHB1YmxpYyB0eXBlOiBTZW5zb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3Igc3RhdHVzOiBVTkRFRklORUQgfCBBQ1RJVkUgfCBXQVJOSU5HIHwgRVJST1IgfCBJTkFDVElWRSB8IFNVU1BFTkRFRCB8IFBFTkRJTkcgXG4gICAgcHVibGljIHN0YXR1czogU2Vuc29yU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVhbCB0aW1lIHN0YXRlIGJpdCBtYXNrIGZsYWdzIFxuICAgIHB1YmxpYyBzdGF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gd2FzIHRoZSBsYXN0IHN0YXRlIHJlcG9ydCB1cGRhdGUgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBzdGF0ZVJlcG9ydGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBTZW5zb3IgdmlkZW8gc3RyZWFtIHR5cGU6IFVOREVGSU5FRCB8IFJUU1AgfCBPTlZJRiB8IENMSVAgfCBSVFAgfCBNVUxUSUNBU1QgXG4gICAgcHVibGljIHN0cmVhbVR5cGU6IFN0cmVhbVR5cGVDb2RlO1xuIFxuICAgIC8vIFNlbnNvciByZXNvbHV0aW9uIChpbWFnZSBxdWFsaXR5KTogTE9XICgwKSB8IE1FRElVTSAoMSkgfCBISUdIICgyKSBcbiAgICBwdWJsaWMgaW1hZ2VSZXNvbHV0aW9uOiBTZW5zb3JSZXNvbHV0aW9uQ29kZTtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBpcyByZWNvcmRpbmcgdmlkZW8gXG4gICAgcHVibGljIHJlY29yZGluZzogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBzaG91bGQgc2VuZCBtZXRhZGF0YSBcbiAgICBwdWJsaWMgbWV0YWRhdGE6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBhbm9tYWx5IGRldGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIHNlbnNvciBcbiAgICBwdWJsaWMgYW5vbWFseURldGVjdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHVuYXR0ZW5kZWQgb2JqZWN0IGRldGVjdGlvbiBtb2RlbCBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyB1bmF0dGVuZGVkT2JqZWN0OiBib29sZWFuO1xuIFxuICAgIC8vIE1pbmltYWwgdGltZSBpbnRlcnZhbCBiZXR3ZWVuIGFsYXJtcyAoaW4gc2Vjb25kcykgLSAwIGZvciBubyBpbnRlcnZhbCBcbiAgICBwdWJsaWMgYWxhcm1JbnRlcnZhbDogbnVtYmVyO1xuIFxuICAgIC8vIE1heCBudW1iZXIgb2YgYm91bmRpbmcgYm94IHBlciBmcmFtZSBcbiAgICBwdWJsaWMgbWF4QkJveFBlckZyYW1lOiBudW1iZXI7XG4gXG4gICAgLy8gTWF4IGZyYW1lIHJhdGUgXG4gICAgcHVibGljIG1heEZyYW1lUmF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFZpZGVvIHN0cmVhbSBzb3VyY2UgVVJJLCBmb3JtYXQgYW5kIHNjaGVtZXMgaXMgZGVyaXZlZCBmcm9tIHRoZSBzdHJlYW0gdHlwZSwgc2VlIFN0cmVhbVR5cGVDb2RlKSBcbiAgICBwdWJsaWMgc3RyZWFtVXJpOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIGdlbyBsb2NhdGlvbiAoV0dTLTg0IGNvb3JkaW5hdGUgc3lzdGVtKSBcbiAgICBwdWJsaWMgZ2VvTG9jYXRpb246IENvb3JkaW5hdGU7XG4gXG4gICAgLy8gU2Vuc29yIEZPViBhemltdXRoICgwIC0gMzU5KSBcbiAgICBwdWJsaWMgYXppbXV0aDogbnVtYmVyO1xuIFxuICAgIC8vIEZpZWxkIG9mIFZpZXcgR2VvIGF0dHJpYnV0ZXMgKHVzZWQgZm9yIEZPViB0byBXR1MtODQgdHJhbnNmb3JtYXRpb25zKSBcbiAgICBwdWJsaWMgZm92QXR0cmlidXRlczogRm92R2VvQXR0cmlidXRlcztcbiBcbiAgICAvLyBFeHRlcm5hbCBpZCAoY2FtZXJhIGlkIGluIGV4dGVybmFsIHN5c3RlbSkgXG4gICAgcHVibGljIGV4dGVybmFsSWQ6IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGRlZmluZWQgdGFncyAobGlzdCBvZiBrZXktdmFsdWUgcGFpcnMpIFxuICAgIHB1YmxpYyB0YWdzOiBTdHJpbmdLZXlWYWx1ZVtdO1xuIFxuICAgIC8vIEhlYWx0aCBub3RpZmljYXRpb25zIHRocmVzaG9sZHMgXG4gICAgcHVibGljIGhlYWx0aFRocmVzaG9sZHM6IFRocmVzaG9sZHM7XG4gXG4gICAgLy8gU2Vuc29yIGRlYnVnIGluZm9ybWF0aW9uIGZsYWdzIFxuICAgIHB1YmxpYyBkZWJ1Z0luZm86IFNlbnNvckRlYnVnSW5mbztcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHRoZSBhZ2VudCBzaG91bGQgc3luYyB0aGUgZnJhbWUgdGltZXN0YW1wcyBmcm9tIHRoZSBSVFNQIHN0cmVhbSBcbiAgICBwdWJsaWMgc3luY1RpbWVUb1N0cmVhbTogYm9vbGVhbjtcbiBcbiAgICAvLyBTdHJlYW0gY29kZWMgKGkuZS4gaC4yNjQsIGguMjY1IGV0YykgXG4gICAgcHVibGljIGNvZGVjOiBzdHJpbmc7XG4gXG4gICAgLy8gU3RyZWFtIHJlc29sdXRpb24gKGkuZS4gMTI4MHg3MjAsIDE5MjB4MTA4MCBldGMpIFxuICAgIHB1YmxpYyByZXNvbHV0aW9uOiBzdHJpbmc7XG4gXG4gICAgLy8gU3RyZWFtIGZyYW1lcmF0ZSAoZnJhbWVzIHBlciBzZWNvbmQpIFxuICAgIHB1YmxpYyBmcmFtZXJhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIHRvIHVzZSBGUiBmb3IgZmFyIG9iamVjdCBkZXRlY3Rpb24gKG9uIHRoZXJtYWwgY2FtZXJhcyBvbmx5KSBcbiAgICBwdWJsaWMgaGlnaFNlbnNpdGl2aXR5OiBib29sZWFuO1xuIFxuICAgIC8vIFZpZXcgdHlwZTogTk9STUFMIHwgRklTSEVZRV9PVkVSSEVBRCBcbiAgICBwdWJsaWMgdmlld1R5cGU6IFZpZXdUeXBlQ29kZTtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHBvc2UgZXN0aW1hdGlvbiBtb2RlbCBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyBwb3NlRXN0aW1hdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIGV2ZW50IGZpbHRlcmluZyBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyBldmVudEZpbHRlcmluZzogYm9vbGVhbjtcbiBcbiAgICAvLyBNYXggY2xpcCBsZW5ndGggaW4gc2VjcywgMCBtZWFucyBpbmhlcml0ZWQgZnJvbSBhY2NvdW50IGxldmVsIFxuICAgIHB1YmxpYyBldmVudENsaXBMZW5ndGhTZWM6IG51bWJlcjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHBlcnNvbiByZWNvZ25pdGlvbiBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyBwZXJzb25SZWNvZ25pdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBBbm9ueW1pemF0aW9uIHR5cGU6IE5PTkUgfCBHUkFZU0NBTEVfTk9ORV9HUkFZU0NBTEVfQURBUFRJVkUgfCBDSFJPTUFUSUNfTk9ORV9DSFJPTUFUSUNfQURBUFRJVkUgXG4gICAgcHVibGljIGFub255bWl6YXRpb25UeXBlOiBTZW5zb3JBbm9ueW1pemF0aW9uVHlwZUNvZGU7XG4gXG4gICAgLy8gSW50ZXJ2YWwgaW4gbXMgZm9yIG92ZXJyaWRpbmcgZGV0ZWN0aW9uIG1vZGVsIHRyYWNrZXIgaW1wcm92ZW1lbnQsIGRlZmF1bHQgdmFsdWUgMjAwMCBcbiAgICBwdWJsaWMgdHJhY2tlckltcHJvdmVtZW50SW50ZXJ2YWw6IG51bWJlcjtcbiBcbiAgICAvLyBBZHZhY2VkIHNlYXJjaCBmcmVlIHRleHQgc3dpdGNoIHRvZ2dsZSBcbiAgICBwdWJsaWMgYWR2YW5jZWRTZWFyY2g6IGJvb2xlYW47XG4gXG4gICAgLy8gRW50aXR5IElkIFxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuIFxuICAgIC8vIEVudGl0eSBkb2N1bWVudCB0eXBlIChzeXN0ZW0gZmllbGQpIFxuICAgIHB1YmxpYyBfdHlwZTogc3RyaW5nO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgY3JlYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIGNyZWF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgdXBkYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIHVwZGF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIEVudGl0eSBwYXRoIGluIHRoZSBoaWVyYXJjaHkgXG4gICAgcHVibGljIHBhdGg6IHN0cmluZztcbiBcblxufVxuXG5cbiJdfQ==