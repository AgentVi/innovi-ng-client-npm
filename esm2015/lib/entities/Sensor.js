import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
export class Sensor extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL25nLWNvcmUtbGliL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdGllcy9TZW5zb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBT3BEOztFQUVFO0FBQ0YsTUFBTSxPQUFPLE1BQU8sU0FBUSxVQUFVO0NBeUdyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvdkdlb0F0dHJpYnV0ZXMgfSBmcm9tICcuLi9jb21tb24vRm92R2VvQXR0cmlidXRlcyc7XG5pbXBvcnQgeyBTdHJpbmdLZXlWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi9TdHJpbmdLZXlWYWx1ZSc7XG5pbXBvcnQgeyBUaHJlc2hvbGRzIH0gZnJvbSAnLi4vY29tbW9uL1RocmVzaG9sZHMnO1xuaW1wb3J0IHsgU2Vuc29yRGVidWdJbmZvIH0gZnJvbSAnLi4vY29tbW9uL1NlbnNvckRlYnVnSW5mbyc7XG5pbXBvcnQgeyBCYXNlRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvQmFzZUVudGl0eSc7XG5pbXBvcnQgeyBTZW5zb3JUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclR5cGVDb2RlJztcbmltcG9ydCB7IFN0cmVhbVR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU3RyZWFtVHlwZUNvZGUnO1xuaW1wb3J0IHsgQ29vcmRpbmF0ZSB9IGZyb20gJy4uL2NvbW1vbi9Db29yZGluYXRlJztcbmltcG9ydCB7IFNlbnNvclN0YXR1c0NvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JTdGF0dXNDb2RlJztcbmltcG9ydCB7IFNlbnNvclJlc29sdXRpb25Db2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yUmVzb2x1dGlvbkNvZGUnO1xuXG4vKiBcbiAgIFNlbnNvciB0eXBlIFxuKi9cbmV4cG9ydCBjbGFzcyBTZW5zb3IgZXh0ZW5kcyBCYXNlRW50aXR5IHtcbiBcbiAgICAvLyBBY2NvdW50IElkIFxuICAgIHB1YmxpYyBhY2NvdW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBGb2xkZXIgSWQgKGVtcHR5IGZvciByb290IGZvbGRlcikgXG4gICAgcHVibGljIGZvbGRlcklkOiBzdHJpbmc7XG4gXG4gICAgLy8gQXBwbGlhbmNlIElkIFxuICAgIHB1YmxpYyBhcHBsaWFuY2VJZDogc3RyaW5nO1xuIFxuICAgIC8vIEFnZW50IElkIChSZWxldmFudCBmb3IgbmV3IHBpcGVsaW5lIG9ubHkpIFxuICAgIHB1YmxpYyBhZ2VudElkOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIG5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgdHlwZTogQ0NEIHwgVEhFUk1BTCBcbiAgICBwdWJsaWMgdHlwZTogU2Vuc29yVHlwZUNvZGU7XG4gXG4gICAgLy8gU2Vuc29yIHN0YXR1czogVU5ERUZJTkVEIHwgQUNUSVZFIHwgV0FSTklORyB8IEVSUk9SIHwgSU5BQ1RJVkUgfCBTVVNQRU5ERUQgfCBQRU5ESU5HIFxuICAgIHB1YmxpYyBzdGF0dXM6IFNlbnNvclN0YXR1c0NvZGU7XG4gXG4gICAgLy8gU2Vuc29yIHJlYWwgdGltZSBzdGF0ZSBiaXQgbWFzayBmbGFncyBcbiAgICBwdWJsaWMgc3RhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBXaGVuIHdhcyB0aGUgbGFzdCBzdGF0ZSByZXBvcnQgdXBkYXRlIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgc3RhdGVSZXBvcnRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gU2Vuc29yIHZpZGVvIHN0cmVhbSB0eXBlOiBVTkRFRklORUQgfCBSVFNQIHwgT05WSUYgfCBDTElQIHwgUlRQIHwgTVVMVElDQVNUIFxuICAgIHB1YmxpYyBzdHJlYW1UeXBlOiBTdHJlYW1UeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVzb2x1dGlvbiAoaW1hZ2UgcXVhbGl0eSk6IExPVyAoMCkgfCBNRURJVU0gKDEpIHwgSElHSCAoMikgXG4gICAgcHVibGljIGltYWdlUmVzb2x1dGlvbjogU2Vuc29yUmVzb2x1dGlvbkNvZGU7XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBzZW5zb3IgaXMgcmVjb3JkaW5nIHZpZGVvIFxuICAgIHB1YmxpYyByZWNvcmRpbmc6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBzZW5zb3Igc2hvdWxkIHNlbmQgbWV0YWRhdGEgXG4gICAgcHVibGljIG1ldGFkYXRhOiBib29sZWFuO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgYW5vbWFseSBkZXRlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBzZW5zb3IgXG4gICAgcHVibGljIGFub21hbHlEZXRlY3Rpb246IGJvb2xlYW47XG4gXG4gICAgLy8gTWluaW1hbCB0aW1lIGludGVydmFsIGJldHdlZW4gYWxhcm1zIChpbiBzZWNvbmRzKSAtIDAgZm9yIG5vIGludGVydmFsIFxuICAgIHB1YmxpYyBhbGFybUludGVydmFsOiBudW1iZXI7XG4gXG4gICAgLy8gTWF4IG51bWJlciBvZiBib3VuZGluZyBib3ggcGVyIGZyYW1lIFxuICAgIHB1YmxpYyBtYXhCQm94UGVyRnJhbWU6IG51bWJlcjtcbiBcbiAgICAvLyBNYXggZnJhbWUgcmF0ZSBcbiAgICBwdWJsaWMgbWF4RnJhbWVSYXRlOiBudW1iZXI7XG4gXG4gICAgLy8gVmlkZW8gc3RyZWFtIHNvdXJjZSBVUkksIGZvcm1hdCBhbmQgc2NoZW1lcyBpcyBkZXJpdmVkIGZyb20gdGhlIHN0cmVhbSB0eXBlLCBzZWUgU3RyZWFtVHlwZUNvZGUpIFxuICAgIHB1YmxpYyBzdHJlYW1Vcmk6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgZ2VvIGxvY2F0aW9uIChXR1MtODQgY29vcmRpbmF0ZSBzeXN0ZW0pIFxuICAgIHB1YmxpYyBnZW9Mb2NhdGlvbjogQ29vcmRpbmF0ZTtcbiBcbiAgICAvLyBTZW5zb3IgRk9WIGF6aW11dGggKDAgLSAzNTkpIFxuICAgIHB1YmxpYyBhemltdXRoOiBudW1iZXI7XG4gXG4gICAgLy8gRmllbGQgb2YgVmlldyBHZW8gYXR0cmlidXRlcyAodXNlZCBmb3IgRk9WIHRvIFdHUy04NCB0cmFuc2Zvcm1hdGlvbnMpIFxuICAgIHB1YmxpYyBmb3ZBdHRyaWJ1dGVzOiBGb3ZHZW9BdHRyaWJ1dGVzO1xuIFxuICAgIC8vIEV4dGVybmFsIGlkIChjYW1lcmEgaWQgaW4gZXh0ZXJuYWwgc3lzdGVtKSBcbiAgICBwdWJsaWMgZXh0ZXJuYWxJZDogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgZGVmaW5lZCB0YWdzIChsaXN0IG9mIGtleS12YWx1ZSBwYWlycykgXG4gICAgcHVibGljIHRhZ3M6IFN0cmluZ0tleVZhbHVlW107XG4gXG4gICAgLy8gSGVhbHRoIG5vdGlmaWNhdGlvbnMgdGhyZXNob2xkcyBcbiAgICBwdWJsaWMgaGVhbHRoVGhyZXNob2xkczogVGhyZXNob2xkcztcbiBcbiAgICAvLyBTZW5zb3IgZGVidWcgaW5mb3JtYXRpb24gZmxhZ3MgXG4gICAgcHVibGljIGRlYnVnSW5mbzogU2Vuc29yRGVidWdJbmZvO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGFnZW50IHNob3VsZCBzeW5jIHRoZSBmcmFtZSB0aW1lc3RhbXBzIGZyb20gdGhlIFJUU1Agc3RyZWFtIFxuICAgIHB1YmxpYyBzeW5jVGltZVRvU3RyZWFtOiBib29sZWFuO1xuIFxuICAgIC8vIFN0cmVhbSBjb2RlYyAoaS5lLiBoLjI2NCwgaC4yNjUgZXRjKSBcbiAgICBwdWJsaWMgY29kZWM6IHN0cmluZztcbiBcbiAgICAvLyBTdHJlYW0gcmVzb2x1dGlvbiAoaS5lLiAxMjgweDcyMCwgMTkyMHgxMDgwIGV0YykgXG4gICAgcHVibGljIHJlc29sdXRpb246IHN0cmluZztcbiBcbiAgICAvLyBTdHJlYW0gZnJhbWVyYXRlIChmcmFtZXMgcGVyIHNlY29uZCkgXG4gICAgcHVibGljIGZyYW1lcmF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIEVudGl0eSBJZCBcbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiBcbiAgICAvLyBFbnRpdHkgZG9jdW1lbnQgdHlwZSAoc3lzdGVtIGZpZWxkKSBcbiAgICBwdWJsaWMgX3R5cGU6IHN0cmluZztcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIGNyZWF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBjcmVhdGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIHVwZGF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyB1cGRhdGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBFbnRpdHkgcGF0aCBpbiB0aGUgaGllcmFyY2h5IFxuICAgIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gXG5cbn1cblxuXG4iXX0=