import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
export class Sensor extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY29yZS1saWIvc3JjL2xpYi9lbnRpdGllcy9TZW5zb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBUXBEOztFQUVFO0FBQ0YsTUFBTSxPQUFPLE1BQU8sU0FBUSxVQUFVO0NBK0dyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbnNvclJlc29sdXRpb25Db2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yUmVzb2x1dGlvbkNvZGUnO1xuaW1wb3J0IHsgQ29vcmRpbmF0ZSB9IGZyb20gJy4uL2NvbW1vbi9Db29yZGluYXRlJztcbmltcG9ydCB7IFNlbnNvckRlYnVnSW5mbyB9IGZyb20gJy4uL2NvbW1vbi9TZW5zb3JEZWJ1Z0luZm8nO1xuaW1wb3J0IHsgQmFzZUVudGl0eSB9IGZyb20gJy4uL2VudGl0aWVzL0Jhc2VFbnRpdHknO1xuaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBTZW5zb3JTdGF0dXNDb2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yU3RhdHVzQ29kZSc7XG5pbXBvcnQgeyBTdHJpbmdLZXlWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi9TdHJpbmdLZXlWYWx1ZSc7XG5pbXBvcnQgeyBUaHJlc2hvbGRzIH0gZnJvbSAnLi4vY29tbW9uL1RocmVzaG9sZHMnO1xuaW1wb3J0IHsgU3RyZWFtVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TdHJlYW1UeXBlQ29kZSc7XG5pbXBvcnQgeyBGb3ZHZW9BdHRyaWJ1dGVzIH0gZnJvbSAnLi4vY29tbW9uL0Zvdkdlb0F0dHJpYnV0ZXMnO1xuXG4vKiBcbiAgIFNlbnNvciB0eXBlIFxuKi9cbmV4cG9ydCBjbGFzcyBTZW5zb3IgZXh0ZW5kcyBCYXNlRW50aXR5IHtcbiBcbiAgICAvLyBBY2NvdW50IElkIFxuICAgIHB1YmxpYyBhY2NvdW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBGb2xkZXIgSWQgKGVtcHR5IGZvciByb290IGZvbGRlcikgXG4gICAgcHVibGljIGZvbGRlcklkOiBzdHJpbmc7XG4gXG4gICAgLy8gQXBwbGlhbmNlIElkIFxuICAgIHB1YmxpYyBhcHBsaWFuY2VJZDogc3RyaW5nO1xuIFxuICAgIC8vIEFnZW50IElkIChSZWxldmFudCBmb3IgbmV3IHBpcGVsaW5lIG9ubHkpIFxuICAgIHB1YmxpYyBhZ2VudElkOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIG5hbWUgXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgdHlwZTogQ0NEIHwgVEhFUk1BTCBcbiAgICBwdWJsaWMgdHlwZTogU2Vuc29yVHlwZUNvZGU7XG4gXG4gICAgLy8gU2Vuc29yIHN0YXR1czogVU5ERUZJTkVEIHwgQUNUSVZFIHwgV0FSTklORyB8IEVSUk9SIHwgSU5BQ1RJVkUgfCBTVVNQRU5ERUQgfCBQRU5ESU5HIFxuICAgIHB1YmxpYyBzdGF0dXM6IFNlbnNvclN0YXR1c0NvZGU7XG4gXG4gICAgLy8gU2Vuc29yIHJlYWwgdGltZSBzdGF0ZSBiaXQgbWFzayBmbGFncyBcbiAgICBwdWJsaWMgc3RhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBXaGVuIHdhcyB0aGUgbGFzdCBzdGF0ZSByZXBvcnQgdXBkYXRlIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgc3RhdGVSZXBvcnRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gU2Vuc29yIHZpZGVvIHN0cmVhbSB0eXBlOiBVTkRFRklORUQgfCBSVFNQIHwgT05WSUYgfCBDTElQIHwgUlRQIHwgTVVMVElDQVNUIFxuICAgIHB1YmxpYyBzdHJlYW1UeXBlOiBTdHJlYW1UeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVzb2x1dGlvbiAoaW1hZ2UgcXVhbGl0eSk6IExPVyAoMCkgfCBNRURJVU0gKDEpIHwgSElHSCAoMikgXG4gICAgcHVibGljIGltYWdlUmVzb2x1dGlvbjogU2Vuc29yUmVzb2x1dGlvbkNvZGU7XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBzZW5zb3IgaXMgcmVjb3JkaW5nIHZpZGVvIFxuICAgIHB1YmxpYyByZWNvcmRpbmc6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBzZW5zb3Igc2hvdWxkIHNlbmQgbWV0YWRhdGEgXG4gICAgcHVibGljIG1ldGFkYXRhOiBib29sZWFuO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgYW5vbWFseSBkZXRlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBzZW5zb3IgXG4gICAgcHVibGljIGFub21hbHlEZXRlY3Rpb246IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiB1bmF0dGVuZGVkIG9iamVjdCBkZXRlY3Rpb24gbW9kZWwgaXMgZW5hYmxlZCBcbiAgICBwdWJsaWMgdW5hdHRlbmRlZE9iamVjdDogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIGZhY2UgcmVjb2duaXRpb24gbW9kZWwgaXMgZW5hYmxlZCBcbiAgICBwdWJsaWMgZmFjZVJlY29nbml0aW9uOiBib29sZWFuO1xuIFxuICAgIC8vIE1pbmltYWwgdGltZSBpbnRlcnZhbCBiZXR3ZWVuIGFsYXJtcyAoaW4gc2Vjb25kcykgLSAwIGZvciBubyBpbnRlcnZhbCBcbiAgICBwdWJsaWMgYWxhcm1JbnRlcnZhbDogbnVtYmVyO1xuIFxuICAgIC8vIE1heCBudW1iZXIgb2YgYm91bmRpbmcgYm94IHBlciBmcmFtZSBcbiAgICBwdWJsaWMgbWF4QkJveFBlckZyYW1lOiBudW1iZXI7XG4gXG4gICAgLy8gTWF4IGZyYW1lIHJhdGUgXG4gICAgcHVibGljIG1heEZyYW1lUmF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFZpZGVvIHN0cmVhbSBzb3VyY2UgVVJJLCBmb3JtYXQgYW5kIHNjaGVtZXMgaXMgZGVyaXZlZCBmcm9tIHRoZSBzdHJlYW0gdHlwZSwgc2VlIFN0cmVhbVR5cGVDb2RlKSBcbiAgICBwdWJsaWMgc3RyZWFtVXJpOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIGdlbyBsb2NhdGlvbiAoV0dTLTg0IGNvb3JkaW5hdGUgc3lzdGVtKSBcbiAgICBwdWJsaWMgZ2VvTG9jYXRpb246IENvb3JkaW5hdGU7XG4gXG4gICAgLy8gU2Vuc29yIEZPViBhemltdXRoICgwIC0gMzU5KSBcbiAgICBwdWJsaWMgYXppbXV0aDogbnVtYmVyO1xuIFxuICAgIC8vIEZpZWxkIG9mIFZpZXcgR2VvIGF0dHJpYnV0ZXMgKHVzZWQgZm9yIEZPViB0byBXR1MtODQgdHJhbnNmb3JtYXRpb25zKSBcbiAgICBwdWJsaWMgZm92QXR0cmlidXRlczogRm92R2VvQXR0cmlidXRlcztcbiBcbiAgICAvLyBFeHRlcm5hbCBpZCAoY2FtZXJhIGlkIGluIGV4dGVybmFsIHN5c3RlbSkgXG4gICAgcHVibGljIGV4dGVybmFsSWQ6IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGRlZmluZWQgdGFncyAobGlzdCBvZiBrZXktdmFsdWUgcGFpcnMpIFxuICAgIHB1YmxpYyB0YWdzOiBTdHJpbmdLZXlWYWx1ZVtdO1xuIFxuICAgIC8vIEhlYWx0aCBub3RpZmljYXRpb25zIHRocmVzaG9sZHMgXG4gICAgcHVibGljIGhlYWx0aFRocmVzaG9sZHM6IFRocmVzaG9sZHM7XG4gXG4gICAgLy8gU2Vuc29yIGRlYnVnIGluZm9ybWF0aW9uIGZsYWdzIFxuICAgIHB1YmxpYyBkZWJ1Z0luZm86IFNlbnNvckRlYnVnSW5mbztcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHRoZSBhZ2VudCBzaG91bGQgc3luYyB0aGUgZnJhbWUgdGltZXN0YW1wcyBmcm9tIHRoZSBSVFNQIHN0cmVhbSBcbiAgICBwdWJsaWMgc3luY1RpbWVUb1N0cmVhbTogYm9vbGVhbjtcbiBcbiAgICAvLyBTdHJlYW0gY29kZWMgKGkuZS4gaC4yNjQsIGguMjY1IGV0YykgXG4gICAgcHVibGljIGNvZGVjOiBzdHJpbmc7XG4gXG4gICAgLy8gU3RyZWFtIHJlc29sdXRpb24gKGkuZS4gMTI4MHg3MjAsIDE5MjB4MTA4MCBldGMpIFxuICAgIHB1YmxpYyByZXNvbHV0aW9uOiBzdHJpbmc7XG4gXG4gICAgLy8gU3RyZWFtIGZyYW1lcmF0ZSAoZnJhbWVzIHBlciBzZWNvbmQpIFxuICAgIHB1YmxpYyBmcmFtZXJhdGU6IG51bWJlcjtcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG4gXG4gICAgLy8gRW50aXR5IGRvY3VtZW50IHR5cGUgKHN5c3RlbSBmaWVsZCkgXG4gICAgcHVibGljIF90eXBlOiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgY3JlYXRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgdXBkYXRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gRW50aXR5IHBhdGggaW4gdGhlIGhpZXJhcmNoeSBcbiAgICBwdWJsaWMgcGF0aDogc3RyaW5nO1xuIFxuXG59XG5cblxuIl19