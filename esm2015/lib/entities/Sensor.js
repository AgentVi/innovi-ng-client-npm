import { BaseEntity } from '../entities/BaseEntity';
/*
   Sensor type
*/
export class Sensor extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY29yZS1saWIvc3JjL2xpYi9lbnRpdGllcy9TZW5zb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXBEOztFQUVFO0FBQ0YsTUFBTSxPQUFPLE1BQU8sU0FBUSxVQUFVO0NBdUlyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmVhbVR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU3RyZWFtVHlwZUNvZGUnO1xuaW1wb3J0IHsgU2Vuc29yUmVzb2x1dGlvbkNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JSZXNvbHV0aW9uQ29kZSc7XG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAnLi4vY29tbW9uL0Nvb3JkaW5hdGUnO1xuaW1wb3J0IHsgVGhyZXNob2xkcyB9IGZyb20gJy4uL2NvbW1vbi9UaHJlc2hvbGRzJztcbmltcG9ydCB7IFNlbnNvckRlYnVnSW5mbyB9IGZyb20gJy4uL2NvbW1vbi9TZW5zb3JEZWJ1Z0luZm8nO1xuaW1wb3J0IHsgU2Vuc29yQW5vbnltaXphdGlvblR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yQW5vbnltaXphdGlvblR5cGVDb2RlJztcbmltcG9ydCB7IFNlbnNvclR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvU2Vuc29yVHlwZUNvZGUnO1xuaW1wb3J0IHsgU2Vuc29yU3RhdHVzQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclN0YXR1c0NvZGUnO1xuaW1wb3J0IHsgRm92R2VvQXR0cmlidXRlcyB9IGZyb20gJy4uL2NvbW1vbi9Gb3ZHZW9BdHRyaWJ1dGVzJztcbmltcG9ydCB7IFN0cmluZ0tleVZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL1N0cmluZ0tleVZhbHVlJztcbmltcG9ydCB7IFZpZXdUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1ZpZXdUeXBlQ29kZSc7XG5pbXBvcnQgeyBCYXNlRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvQmFzZUVudGl0eSc7XG5cbi8qIFxuICAgU2Vuc29yIHR5cGUgXG4qL1xuZXhwb3J0IGNsYXNzIFNlbnNvciBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIEFjY291bnQgSWQgXG4gICAgcHVibGljIGFjY291bnRJZDogc3RyaW5nO1xuIFxuICAgIC8vIEZvbGRlciBJZCAoZW1wdHkgZm9yIHJvb3QgZm9sZGVyKSBcbiAgICBwdWJsaWMgZm9sZGVySWQ6IHN0cmluZztcbiBcbiAgICAvLyBBcHBsaWFuY2UgSWQgXG4gICAgcHVibGljIGFwcGxpYW5jZUlkOiBzdHJpbmc7XG4gXG4gICAgLy8gQWdlbnQgSWQgKFJlbGV2YW50IGZvciBuZXcgcGlwZWxpbmUgb25seSkgXG4gICAgcHVibGljIGFnZW50SWQ6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFNlbnNvciB0eXBlOiBDQ0QgfCBUSEVSTUFMIFxuICAgIHB1YmxpYyB0eXBlOiBTZW5zb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBTZW5zb3Igc3RhdHVzOiBVTkRFRklORUQgfCBBQ1RJVkUgfCBXQVJOSU5HIHwgRVJST1IgfCBJTkFDVElWRSB8IFNVU1BFTkRFRCB8IFBFTkRJTkcgXG4gICAgcHVibGljIHN0YXR1czogU2Vuc29yU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBTZW5zb3IgcmVhbCB0aW1lIHN0YXRlIGJpdCBtYXNrIGZsYWdzIFxuICAgIHB1YmxpYyBzdGF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gd2FzIHRoZSBsYXN0IHN0YXRlIHJlcG9ydCB1cGRhdGUgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBzdGF0ZVJlcG9ydGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBTZW5zb3IgdmlkZW8gc3RyZWFtIHR5cGU6IFVOREVGSU5FRCB8IFJUU1AgfCBPTlZJRiB8IENMSVAgfCBSVFAgfCBNVUxUSUNBU1QgXG4gICAgcHVibGljIHN0cmVhbVR5cGU6IFN0cmVhbVR5cGVDb2RlO1xuIFxuICAgIC8vIFNlbnNvciByZXNvbHV0aW9uIChpbWFnZSBxdWFsaXR5KTogTE9XICgwKSB8IE1FRElVTSAoMSkgfCBISUdIICgyKSBcbiAgICBwdWJsaWMgaW1hZ2VSZXNvbHV0aW9uOiBTZW5zb3JSZXNvbHV0aW9uQ29kZTtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBpcyByZWNvcmRpbmcgdmlkZW8gXG4gICAgcHVibGljIHJlY29yZGluZzogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHNlbnNvciBzaG91bGQgc2VuZCBtZXRhZGF0YSBcbiAgICBwdWJsaWMgbWV0YWRhdGE6IGJvb2xlYW47XG4gXG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiBhbm9tYWx5IGRldGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIHNlbnNvciBcbiAgICBwdWJsaWMgYW5vbWFseURldGVjdGlvbjogYm9vbGVhbjtcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIHVuYXR0ZW5kZWQgb2JqZWN0IGRldGVjdGlvbiBtb2RlbCBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyB1bmF0dGVuZGVkT2JqZWN0OiBib29sZWFuO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgZmFjZSByZWNvZ25pdGlvbiBtb2RlbCBpcyBlbmFibGVkIFxuICAgIHB1YmxpYyBmYWNlUmVjb2duaXRpb246IGJvb2xlYW47XG4gXG4gICAgLy8gTWluaW1hbCB0aW1lIGludGVydmFsIGJldHdlZW4gYWxhcm1zIChpbiBzZWNvbmRzKSAtIDAgZm9yIG5vIGludGVydmFsIFxuICAgIHB1YmxpYyBhbGFybUludGVydmFsOiBudW1iZXI7XG4gXG4gICAgLy8gTWF4IG51bWJlciBvZiBib3VuZGluZyBib3ggcGVyIGZyYW1lIFxuICAgIHB1YmxpYyBtYXhCQm94UGVyRnJhbWU6IG51bWJlcjtcbiBcbiAgICAvLyBNYXggZnJhbWUgcmF0ZSBcbiAgICBwdWJsaWMgbWF4RnJhbWVSYXRlOiBudW1iZXI7XG4gXG4gICAgLy8gVmlkZW8gc3RyZWFtIHNvdXJjZSBVUkksIGZvcm1hdCBhbmQgc2NoZW1lcyBpcyBkZXJpdmVkIGZyb20gdGhlIHN0cmVhbSB0eXBlLCBzZWUgU3RyZWFtVHlwZUNvZGUpIFxuICAgIHB1YmxpYyBzdHJlYW1Vcmk6IHN0cmluZztcbiBcbiAgICAvLyBTZW5zb3IgZ2VvIGxvY2F0aW9uIChXR1MtODQgY29vcmRpbmF0ZSBzeXN0ZW0pIFxuICAgIHB1YmxpYyBnZW9Mb2NhdGlvbjogQ29vcmRpbmF0ZTtcbiBcbiAgICAvLyBTZW5zb3IgRk9WIGF6aW11dGggKDAgLSAzNTkpIFxuICAgIHB1YmxpYyBhemltdXRoOiBudW1iZXI7XG4gXG4gICAgLy8gRmllbGQgb2YgVmlldyBHZW8gYXR0cmlidXRlcyAodXNlZCBmb3IgRk9WIHRvIFdHUy04NCB0cmFuc2Zvcm1hdGlvbnMpIFxuICAgIHB1YmxpYyBmb3ZBdHRyaWJ1dGVzOiBGb3ZHZW9BdHRyaWJ1dGVzO1xuIFxuICAgIC8vIEV4dGVybmFsIGlkIChjYW1lcmEgaWQgaW4gZXh0ZXJuYWwgc3lzdGVtKSBcbiAgICBwdWJsaWMgZXh0ZXJuYWxJZDogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgZGVmaW5lZCB0YWdzIChsaXN0IG9mIGtleS12YWx1ZSBwYWlycykgXG4gICAgcHVibGljIHRhZ3M6IFN0cmluZ0tleVZhbHVlW107XG4gXG4gICAgLy8gSGVhbHRoIG5vdGlmaWNhdGlvbnMgdGhyZXNob2xkcyBcbiAgICBwdWJsaWMgaGVhbHRoVGhyZXNob2xkczogVGhyZXNob2xkcztcbiBcbiAgICAvLyBTZW5zb3IgZGVidWcgaW5mb3JtYXRpb24gZmxhZ3MgXG4gICAgcHVibGljIGRlYnVnSW5mbzogU2Vuc29yRGVidWdJbmZvO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlIGFnZW50IHNob3VsZCBzeW5jIHRoZSBmcmFtZSB0aW1lc3RhbXBzIGZyb20gdGhlIFJUU1Agc3RyZWFtIFxuICAgIHB1YmxpYyBzeW5jVGltZVRvU3RyZWFtOiBib29sZWFuO1xuIFxuICAgIC8vIFN0cmVhbSBjb2RlYyAoaS5lLiBoLjI2NCwgaC4yNjUgZXRjKSBcbiAgICBwdWJsaWMgY29kZWM6IHN0cmluZztcbiBcbiAgICAvLyBTdHJlYW0gcmVzb2x1dGlvbiAoaS5lLiAxMjgweDcyMCwgMTkyMHgxMDgwIGV0YykgXG4gICAgcHVibGljIHJlc29sdXRpb246IHN0cmluZztcbiBcbiAgICAvLyBTdHJlYW0gZnJhbWVyYXRlIChmcmFtZXMgcGVyIHNlY29uZCkgXG4gICAgcHVibGljIGZyYW1lcmF0ZTogbnVtYmVyO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgdG8gdXNlIEZSIGZvciBmYXIgb2JqZWN0IGRldGVjdGlvbiAob24gdGhlcm1hbCBjYW1lcmFzIG9ubHkpIFxuICAgIHB1YmxpYyBoaWdoU2Vuc2l0aXZpdHk6IGJvb2xlYW47XG4gXG4gICAgLy8gVmlldyB0eXBlOiBOT1JNQUwgfCBGSVNIRVlFX09WRVJIRUFEIFxuICAgIHB1YmxpYyB2aWV3VHlwZTogVmlld1R5cGVDb2RlO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgcG9zZSBlc3RpbWF0aW9uIG1vZGVsIGlzIGVuYWJsZWQgXG4gICAgcHVibGljIHBvc2VFc3RpbWF0aW9uOiBib29sZWFuO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgZXZlbnQgZmlsdGVyaW5nIGlzIGVuYWJsZWQgXG4gICAgcHVibGljIGV2ZW50RmlsdGVyaW5nOiBib29sZWFuO1xuIFxuICAgIC8vIE1heCBjbGlwIGxlbmd0aCBpbiBzZWNzLCAwIG1lYW5zIGluaGVyaXRlZCBmcm9tIGFjY291bnQgbGV2ZWwgXG4gICAgcHVibGljIGV2ZW50Q2xpcExlbmd0aFNlYzogbnVtYmVyO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgcGVyc29uIHJlY29nbml0aW9uIGlzIGVuYWJsZWQgXG4gICAgcHVibGljIHBlcnNvblJlY29nbml0aW9uOiBib29sZWFuO1xuIFxuICAgIC8vIEFub255bWl6YXRpb24gdHlwZTogTk9ORSB8IEdSQVlTQ0FMRV9OT05FX0dSQVlTQ0FMRV9BREFQVElWRSB8IENIUk9NQVRJQ19OT05FX0NIUk9NQVRJQ19BREFQVElWRSBcbiAgICBwdWJsaWMgYW5vbnltaXphdGlvblR5cGU6IFNlbnNvckFub255bWl6YXRpb25UeXBlQ29kZTtcbiBcbiAgICAvLyBJbnRlcnZhbCBpbiBtcyBmb3Igb3ZlcnJpZGluZyBkZXRlY3Rpb24gbW9kZWwgdHJhY2tlciBpbXByb3ZlbWVudCwgZGVmYXVsdCB2YWx1ZSAyMDAwIFxuICAgIHB1YmxpYyB0cmFja2VySW1wcm92ZW1lbnRJbnRlcnZhbDogbnVtYmVyO1xuIFxuICAgIC8vIEVudGl0eSBJZCBcbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiBcbiAgICAvLyBFbnRpdHkgZG9jdW1lbnQgdHlwZSAoc3lzdGVtIGZpZWxkKSBcbiAgICBwdWJsaWMgX3R5cGU6IHN0cmluZztcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIGNyZWF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBjcmVhdGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIHVwZGF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyB1cGRhdGVkT246IG51bWJlcjtcbiBcbiAgICAvLyBFbnRpdHkgcGF0aCBpbiB0aGUgaGllcmFyY2h5IFxuICAgIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gXG5cbn1cblxuXG4iXX0=