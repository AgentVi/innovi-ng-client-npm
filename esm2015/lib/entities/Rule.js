import { BaseEntity } from '../entities/BaseEntity';
/*
   Rule Represents real-time analytic rule, the structure is a union of all the attributes used by all the types of
   real-time rules (crossing, moving, grouping ...) hence not all attributes are used for every rule type
*/
export class Rule extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWNvcmUtbGliL3NyYy9saWIvZW50aXRpZXMvUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFRcEQ7OztFQUdFO0FBQ0YsTUFBTSxPQUFPLElBQUssU0FBUSxVQUFVO0NBeUduQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuLi9lbnRpdGllcy9CYXNlRW50aXR5JztcbmltcG9ydCB7IEJlaGF2aW9yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9CZWhhdmlvclR5cGVDb2RlJztcbmltcG9ydCB7IE9iamVjdFR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvT2JqZWN0VHlwZUNvZGUnO1xuaW1wb3J0IHsgU2V2ZXJpdHlUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1NldmVyaXR5VHlwZUNvZGUnO1xuaW1wb3J0IHsgU2Vuc2l0aXZpdHkgfSBmcm9tICcuLi9jb21tb24vU2Vuc2l0aXZpdHknO1xuaW1wb3J0IHsgUnVsZVBvbHlnb24gfSBmcm9tICcuLi9jb21tb24vUnVsZVBvbHlnb24nO1xuaW1wb3J0IHsgUnVsZUF1dG9TZW5zaXRpdml0eUNvZGUgfSBmcm9tICcuLi9lbnVtcy9SdWxlQXV0b1NlbnNpdGl2aXR5Q29kZSc7XG5cbi8qIFxuICAgUnVsZSBSZXByZXNlbnRzIHJlYWwtdGltZSBhbmFseXRpYyBydWxlLCB0aGUgc3RydWN0dXJlIGlzIGEgdW5pb24gb2YgYWxsIHRoZSBhdHRyaWJ1dGVzIHVzZWQgYnkgYWxsIHRoZSB0eXBlcyBvZlxuICAgcmVhbC10aW1lIHJ1bGVzIChjcm9zc2luZywgbW92aW5nLCBncm91cGluZyAuLi4pIGhlbmNlIG5vdCBhbGwgYXR0cmlidXRlcyBhcmUgdXNlZCBmb3IgZXZlcnkgcnVsZSB0eXBlIFxuKi9cbmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgQmFzZUVudGl0eSB7XG4gXG4gICAgLy8gQWNjb3VudCBJZCBcbiAgICBwdWJsaWMgYWNjb3VudElkOiBzdHJpbmc7XG4gXG4gICAgLy8gU2Vuc29yIElkIFxuICAgIHB1YmxpYyBzZW5zb3JJZDogc3RyaW5nO1xuIFxuICAgIC8vIFJ1bGUgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFJ1bGUgZGVzY3JpcHRpb24gXG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gXG4gICAgLy8gU2NoZWR1bGUgSWQgXG4gICAgcHVibGljIHNjaGVkdWxlSWQ6IHN0cmluZztcbiBcbiAgICAvLyBJbmRpY2F0ZSBpZiB0aGUgcnVsZSBpcyBleHBsaWNpdGx5IGVuYWJsZWQgb3IgZGlzYWJsZWQgKGJ5IHVzZXIgb3IgYnkgQVBJIGNhbGwgLSBlLmcuIGFybS9kaXNhcm0pIFxuICAgIHB1YmxpYyBlbmFibGVkOiBib29sZWFuO1xuIFxuICAgIC8vIEluZGljYXRlIGlmIHRoZSBydWxlIGlzIGFjdGl2ZSBvciBpbmFjdGl2ZSBkdWUgdG8gaXQncyBzY2hlZHVsZSAvIGNhbGVuZGFyIHRpbWUgc2xvdHMgXG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbjtcbiBcbiAgICAvLyBSdWxlIGV4dGVybmFsIGlkIChob3cgdGhlIHJ1bGUgaXMgaWRlbnRpZmllZCBpbiBvdGhlciBzeXN0ZW0pIFxuICAgIHB1YmxpYyBleHRlcm5hbElkOiBzdHJpbmc7XG4gXG4gICAgLy8gUnVsZSBiZWhhdmlvciB0eXBlOiBNT1ZJTkcgfCBDUk9TU0lORyB8IENST1dEIERFTlNJVFkgLi4uIFxuICAgIHB1YmxpYyBiZWhhdmlvclR5cGU6IEJlaGF2aW9yVHlwZUNvZGU7XG4gXG4gICAgLy8gUnVsZSBvYmplY3QgdHlwZXM6IFBFUlNPTiB8IFZFSElDTEUgfCBNT1RPUkNZQ0xFIC4uLiBcbiAgICBwdWJsaWMgb2JqZWN0VHlwZXM6IE9iamVjdFR5cGVDb2RlW107XG4gXG4gICAgLy8gRGVmYXVsdCBzZXZlcml0eSBsZXZlbCBmb3IgdGhpcyBydWxlOiBVTkRFRklORUQgfCBMT1cgfCBNRURJVU0gfCBISUdIIHwgQ1JJVElDQUwgXG4gICAgcHVibGljIHNldmVyaXR5OiBTZXZlcml0eVR5cGVDb2RlO1xuIFxuICAgIC8vIFNlbnNpdGl2aXR5IChmb3IgQW5vbWFseSBydWxlIG9ubHkpIFxuICAgIHB1YmxpYyBzZW5zaXRpdml0eTogU2Vuc2l0aXZpdHk7XG4gXG4gICAgLy8gRHdlbGwgdGltZSBbc2Vjb25kc10gXG4gICAgcHVibGljIGR3ZWxsVGltZTogbnVtYmVyO1xuIFxuICAgIC8vIEFuIG9wdGlvbmFsIHNwZWVkIGZpbHRlciB0byB0aGUgbW92aW5nIGluIGFuIGFyZWEgYW5kIGxpbmUgY3Jvc3NpbmcgcnVsZXMgW0tQSF0gXG4gICAgcHVibGljIG1pblNwZWVkOiBudW1iZXI7XG4gXG4gICAgLy8gTWF4IG51bWJlciBvZiBwZW9wbGUgaW4gZ3JvdXAgKGZvciBDcm93ZCBkZW5zaXR5IHJ1bGUpIFxuICAgIHB1YmxpYyBtYXhPYmplY3RzSW5Hcm91cDogbnVtYmVyO1xuIFxuICAgIC8vIE1heCBkaXN0YW5jZSBiZXR3ZWVuIHBlb3BsZSB0byBiZSBjb25zaWRlcmVkIGFzIGdyb3VwIChmb3IgR3JvdXBpbmcgcnVsZSkgXG4gICAgcHVibGljIGNsdXN0ZXJEaXN0YW5jZTogbnVtYmVyO1xuIFxuICAgIC8vIFRpbWUgaW50ZXJ2YWwgW3NlY29uZHNdIGJldHdlZW4gc3RhdGlzdGljcyByZXBvcnRzIChmb3Igc3RhdGlzdGljcyBydWxlcykgXG4gICAgcHVibGljIGludGVydmFsVGltZTogbnVtYmVyO1xuIFxuICAgIC8vIExpc3Qgb2YgcG9seWdvbnMgXG4gICAgcHVibGljIHBvbHlnb25zOiBSdWxlUG9seWdvbltdO1xuIFxuICAgIC8vIEJhc2U2NCBlbmNvZGVkIGNyb3BwZWQgYXNzZXQgaW1hZ2UgXG4gICAgcHVibGljIHJlZmVyZW5jZUNyb3A6IHN0cmluZztcbiBcbiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIGV2ZW50IGltYWdlIHNob3VsZCBiZSBnZW5lcmF0ZWQgXG4gICAgcHVibGljIGNyZWF0ZUltYWdlOiBib29sZWFuO1xuIFxuICAgIC8vIEZsYWcgdG8gaW5kaWNhdGUgaWYgZXZlbnQgY2xpcCBzaG91bGQgYmUgZ2VuZXJhdGVkIFxuICAgIHB1YmxpYyBjcmVhdGVDbGlwOiBib29sZWFuO1xuIFxuICAgIC8vIFdoZW4gd2FzIHRoZSBsYXN0IGFub21hbHkgdHJhaW5pbmcgKGZvciBBbm9tYWx5IHJ1bGUgb25seSkgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBsYXN0VHJhaW5pbmdPbjogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gd2lsbCBiZSB0aGUgbmV4dCBhbm9tYWx5IHRyYWluaW5nIChmb3IgQW5vbWFseSBydWxlIG9ubHkpIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgbmV4dFRyYWluaW5nT246IG51bWJlcjtcbiBcbiAgICAvLyBUaGUgcGVyY2VudCBvZiByZXF1aXJlZCBtZXRhZGF0YSB0aGF0IHdhcyBjb2xsZWN0ZWQgKDAtMTAwKSBcbiAgICBwdWJsaWMgdHJhaW5pbmdSZWFkaW5lc3M6IG51bWJlcjtcbiBcbiAgICAvLyBFeHRlcm5hbCBtb2RlbCBJZCB1c2VkIGJ5IHRoZSBydWxlIFxuICAgIHB1YmxpYyBleHRlcm5hbE1vZGVsOiBzdHJpbmc7XG4gXG4gICAgLy8gRXhjbHVkZWQgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIGV4Y2x1ZGVPYmplY3RUeXBlczogT2JqZWN0VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBSdWxlJ3MgYXV0byBzZW5zaXRpdml0eSBcbiAgICBwdWJsaWMgYXV0b1NlbnNpdGl2aXR5OiBSdWxlQXV0b1NlbnNpdGl2aXR5Q29kZTtcbiBcbiAgICAvLyBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggV2F0Y2hMaXN0SWQuIFNldCB0byB0cnVlIHRvIHRyaWdnZXIgcnVsZSB3aGVuIG9iamVjdCBpcyBkZXRlY3RlZCBpbiBhbnkgV2F0Y2hMaXN0SWQuIFxuICAgIHB1YmxpYyBleGlzdHNJbldhdGNobGlzdDogYm9vbGVhbjtcbiBcbiAgICAvLyBMaXN0IG9mIGV4dGVybmFsIG9iamVjdCBsaXN0cywgdXNlZCBmb3IgZmlsdGVyaW5nIHdoZW4gZXZlbnRzIHNob3VsZCBiZSB0cmlnZ2VyZWQuIFxuICAgIHB1YmxpYyB3YXRjaGxpc3RJZDogc3RyaW5nW107XG4gXG4gICAgLy8gRW50aXR5IElkIFxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuIFxuICAgIC8vIEVudGl0eSBkb2N1bWVudCB0eXBlIChzeXN0ZW0gZmllbGQpIFxuICAgIHB1YmxpYyBfdHlwZTogc3RyaW5nO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgY3JlYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIGNyZWF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgdXBkYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIHVwZGF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIEVudGl0eSBwYXRoIGluIHRoZSBoaWVyYXJjaHkgXG4gICAgcHVibGljIHBhdGg6IHN0cmluZztcbiBcblxufVxuXG5cbiJdfQ==