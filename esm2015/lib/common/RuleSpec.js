/*
   Rule specification describe rule parameters
*/
export class RuleSpec {
    constructor(behaviorType, ruleTypeName, objectTypes, isLineDrawing, dwellTime, minSpeed, peopleInGroup, clusterDistance, intervalTime, referenceCrop, objectHierarchy, sensorTypes, externalModel, viewTypes) {
        this.behaviorType = behaviorType;
        this.ruleTypeName = ruleTypeName;
        this.objectTypes = objectTypes;
        this.isLineDrawing = isLineDrawing;
        this.dwellTime = dwellTime;
        this.minSpeed = minSpeed;
        this.peopleInGroup = peopleInGroup;
        this.clusterDistance = clusterDistance;
        this.intervalTime = intervalTime;
        this.referenceCrop = referenceCrop;
        this.objectHierarchy = objectHierarchy;
        this.sensorTypes = sensorTypes;
        this.externalModel = externalModel;
        this.viewTypes = viewTypes;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvbGliL2NvbW1vbi9SdWxlU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQTs7RUFFRTtBQUNGLE1BQU0sT0FBTyxRQUFRO0lBNENqQixZQUFZLFlBQStCLEVBQUUsWUFBcUIsRUFBRSxXQUE4QixFQUFFLGFBQXVCLEVBQUUsU0FBdUIsRUFBRSxRQUFzQixFQUFFLGFBQTJCLEVBQUUsZUFBNkIsRUFBRSxZQUEwQixFQUFFLGFBQXVCLEVBQUUsZUFBa0MsRUFBRSxXQUE4QixFQUFFLGFBQXNCLEVBQUUsU0FBMEI7UUFDalosSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL0JlaGF2aW9yVHlwZUNvZGUnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9PYmplY3RUeXBlQ29kZSc7XG5pbXBvcnQgeyBSdWxlRGVmYXVsdCB9IGZyb20gJy4uL2NvbW1vbi9SdWxlRGVmYXVsdCc7XG5pbXBvcnQgeyBPYmplY3RUeXBlTm9kZSB9IGZyb20gJy4uL2NvbW1vbi9PYmplY3RUeXBlTm9kZSc7XG5pbXBvcnQgeyBTZW5zb3JUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclR5cGVDb2RlJztcbmltcG9ydCB7IFZpZXdUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1ZpZXdUeXBlQ29kZSc7XG5cbi8qIFxuICAgUnVsZSBzcGVjaWZpY2F0aW9uIGRlc2NyaWJlIHJ1bGUgcGFyYW1ldGVycyBcbiovXG5leHBvcnQgY2xhc3MgUnVsZVNwZWMge1xuIFxuICAgIC8vIEJlaGF2aW9yIHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIGJlaGF2aW9yVHlwZTogQmVoYXZpb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBSdWxlIHR5cGUgbmFtZSBcbiAgICBwdWJsaWMgcnVsZVR5cGVOYW1lOiBzdHJpbmc7XG4gXG4gICAgLy8gQXZhaWxhYmxlIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIFxuICAgIHB1YmxpYyBvYmplY3RUeXBlczogT2JqZWN0VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBJcyB0aGlzIHJ1bGUgcmVxdWlyZXMgbGluZSBkcmF3aW5nICh0cnVlKSBvciBhcmVhIGRyYXdpbmcgKGZhbHNlKSBcbiAgICBwdWJsaWMgaXNMaW5lRHJhd2luZzogYm9vbGVhbjtcbiBcbiAgICAvLyBEd2VsbCBUaW1lIFxuICAgIHB1YmxpYyBkd2VsbFRpbWU6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIE1pbiBTcGVlZCBmaWx0ZXIgKG1vdmluZyBpbiBhbiBhcmVhLCBsaW5lIGNyb3NzaW5nKSBcbiAgICBwdWJsaWMgbWluU3BlZWQ6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIE51bWJlciBvZiBwZW9wbGUgSW4gR3JvdXAgKGZvciBncm91cGluZyBhbmQgb2NjdXBhbmN5IHJ1bGVzKSBcbiAgICBwdWJsaWMgcGVvcGxlSW5Hcm91cDogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTWF4IGRpc3RhbmNlIGJldHdlZW4gcGVvcGxlIHRvIGJlIGNvbnNpZGVyZWQgYXMgZ3JvdXAgKGZvciBHcm91cGluZyBydWxlKSBcbiAgICBwdWJsaWMgY2x1c3RlckRpc3RhbmNlOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBUaW1lIGludGVydmFsIFtzZWNvbmRzXSBiZXR3ZWVuIHN0YXRpc3RpY3MgcmVwb3J0cyAoZm9yIHN0YXRpc3RpY3MgcnVsZXMpIFxuICAgIHB1YmxpYyBpbnRlcnZhbFRpbWU6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIElzIHJlZmVyZW5jZSBjcm9wIHJlcXVpcmVkIChmb3IgQXNzZXQgUHJvdGVjdGlvbikgXG4gICAgcHVibGljIHJlZmVyZW5jZUNyb3A6IGJvb2xlYW47XG4gXG4gICAgLy8gQXZhaWxhYmxlIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIG9yZ2FuaXplZCBpbiBoaWVyYXJjaHkgXG4gICAgcHVibGljIG9iamVjdEhpZXJhcmNoeTogT2JqZWN0VHlwZU5vZGVbXTtcbiBcbiAgICAvLyBMaW1pdCB0aGlzIHJ1bGUgb24gc3BlY2lmaWMgc2Vuc29yIHR5cGVzIFxuICAgIHB1YmxpYyBzZW5zb3JUeXBlczogU2Vuc29yVHlwZUNvZGVbXTtcbiBcbiAgICAvLyBFeHRlcm5hbCBtb2RlbCBJZCB1c2VkIGJ5IHRoZSBydWxlIFxuICAgIHB1YmxpYyBleHRlcm5hbE1vZGVsOiBzdHJpbmc7XG4gXG4gICAgLy8gTGltaXQgdGhpcyBydWxlIG9uIHNwZWNpZmljIHZpZXcgdHlwZXMgXG4gICAgcHVibGljIHZpZXdUeXBlczogVmlld1R5cGVDb2RlW107XG4gXG4gICAgY29uc3RydWN0b3IoYmVoYXZpb3JUeXBlPzogQmVoYXZpb3JUeXBlQ29kZSwgcnVsZVR5cGVOYW1lPzogc3RyaW5nLCBvYmplY3RUeXBlcz86IE9iamVjdFR5cGVDb2RlW10sIGlzTGluZURyYXdpbmc/OiBib29sZWFuLCBkd2VsbFRpbWU/OiBSdWxlRGVmYXVsdCwgbWluU3BlZWQ/OiBSdWxlRGVmYXVsdCwgcGVvcGxlSW5Hcm91cD86IFJ1bGVEZWZhdWx0LCBjbHVzdGVyRGlzdGFuY2U/OiBSdWxlRGVmYXVsdCwgaW50ZXJ2YWxUaW1lPzogUnVsZURlZmF1bHQsIHJlZmVyZW5jZUNyb3A/OiBib29sZWFuLCBvYmplY3RIaWVyYXJjaHk/OiBPYmplY3RUeXBlTm9kZVtdLCBzZW5zb3JUeXBlcz86IFNlbnNvclR5cGVDb2RlW10sIGV4dGVybmFsTW9kZWw/OiBzdHJpbmcsIHZpZXdUeXBlcz86IFZpZXdUeXBlQ29kZVtdKSB7IFxuICAgICAgICB0aGlzLmJlaGF2aW9yVHlwZSA9IGJlaGF2aW9yVHlwZTtcbiAgICAgICAgdGhpcy5ydWxlVHlwZU5hbWUgPSBydWxlVHlwZU5hbWU7XG4gICAgICAgIHRoaXMub2JqZWN0VHlwZXMgPSBvYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5pc0xpbmVEcmF3aW5nID0gaXNMaW5lRHJhd2luZztcbiAgICAgICAgdGhpcy5kd2VsbFRpbWUgPSBkd2VsbFRpbWU7XG4gICAgICAgIHRoaXMubWluU3BlZWQgPSBtaW5TcGVlZDtcbiAgICAgICAgdGhpcy5wZW9wbGVJbkdyb3VwID0gcGVvcGxlSW5Hcm91cDtcbiAgICAgICAgdGhpcy5jbHVzdGVyRGlzdGFuY2UgPSBjbHVzdGVyRGlzdGFuY2U7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxUaW1lID0gaW50ZXJ2YWxUaW1lO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZUNyb3AgPSByZWZlcmVuY2VDcm9wO1xuICAgICAgICB0aGlzLm9iamVjdEhpZXJhcmNoeSA9IG9iamVjdEhpZXJhcmNoeTtcbiAgICAgICAgdGhpcy5zZW5zb3JUeXBlcyA9IHNlbnNvclR5cGVzO1xuICAgICAgICB0aGlzLmV4dGVybmFsTW9kZWwgPSBleHRlcm5hbE1vZGVsO1xuICAgICAgICB0aGlzLnZpZXdUeXBlcyA9IHZpZXdUeXBlcztcbiAgICB9XG5cbn1cblxuXG4iXX0=