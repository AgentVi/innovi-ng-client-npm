/*
   Rule specification describe rule parameters
*/
export class RuleSpec {
    constructor(behaviorType, ruleTypeName, objectTypes, isLineDrawing, dwellTime, minSpeed, peopleInGroup, clusterDistance, intervalTime, referenceCrop, objectHierarchy, sensorTypes, externalModel, viewTypes, excludeObjectTypes, autoSensitivity) {
        this.behaviorType = behaviorType;
        this.ruleTypeName = ruleTypeName;
        this.objectTypes = objectTypes;
        this.isLineDrawing = isLineDrawing;
        this.dwellTime = dwellTime;
        this.minSpeed = minSpeed;
        this.peopleInGroup = peopleInGroup;
        this.clusterDistance = clusterDistance;
        this.intervalTime = intervalTime;
        this.referenceCrop = referenceCrop;
        this.objectHierarchy = objectHierarchy;
        this.sensorTypes = sensorTypes;
        this.externalModel = externalModel;
        this.viewTypes = viewTypes;
        this.excludeObjectTypes = excludeObjectTypes;
        this.autoSensitivity = autoSensitivity;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvbGliL2NvbW1vbi9SdWxlU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQTs7RUFFRTtBQUNGLE1BQU0sT0FBTyxRQUFRO0lBa0RqQixZQUFZLFlBQStCLEVBQUUsWUFBcUIsRUFBRSxXQUE4QixFQUFFLGFBQXVCLEVBQUUsU0FBdUIsRUFBRSxRQUFzQixFQUFFLGFBQTJCLEVBQUUsZUFBNkIsRUFBRSxZQUEwQixFQUFFLGFBQXVCLEVBQUUsZUFBa0MsRUFBRSxXQUE4QixFQUFFLGFBQXNCLEVBQUUsU0FBMEIsRUFBRSxrQkFBcUMsRUFBRSxlQUF5QztRQUNuZSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFDM0MsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBWaWV3VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9WaWV3VHlwZUNvZGUnO1xuaW1wb3J0IHsgUnVsZUF1dG9TZW5zaXRpdml0eUNvZGUgfSBmcm9tICcuLi9lbnVtcy9SdWxlQXV0b1NlbnNpdGl2aXR5Q29kZSc7XG5pbXBvcnQgeyBCZWhhdmlvclR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvQmVoYXZpb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBPYmplY3RUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL09iamVjdFR5cGVDb2RlJztcbmltcG9ydCB7IFJ1bGVEZWZhdWx0IH0gZnJvbSAnLi4vY29tbW9uL1J1bGVEZWZhdWx0JztcbmltcG9ydCB7IE9iamVjdFR5cGVOb2RlIH0gZnJvbSAnLi4vY29tbW9uL09iamVjdFR5cGVOb2RlJztcblxuLyogXG4gICBSdWxlIHNwZWNpZmljYXRpb24gZGVzY3JpYmUgcnVsZSBwYXJhbWV0ZXJzIFxuKi9cbmV4cG9ydCBjbGFzcyBSdWxlU3BlYyB7XG4gXG4gICAgLy8gQmVoYXZpb3IgdHlwZXMgZm9yIHRoaXMgcnVsZSBcbiAgICBwdWJsaWMgYmVoYXZpb3JUeXBlOiBCZWhhdmlvclR5cGVDb2RlO1xuIFxuICAgIC8vIFJ1bGUgdHlwZSBuYW1lIFxuICAgIHB1YmxpYyBydWxlVHlwZU5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBBdmFpbGFibGUgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIG9iamVjdFR5cGVzOiBPYmplY3RUeXBlQ29kZVtdO1xuIFxuICAgIC8vIElzIHRoaXMgcnVsZSByZXF1aXJlcyBsaW5lIGRyYXdpbmcgKHRydWUpIG9yIGFyZWEgZHJhd2luZyAoZmFsc2UpIFxuICAgIHB1YmxpYyBpc0xpbmVEcmF3aW5nOiBib29sZWFuO1xuIFxuICAgIC8vIER3ZWxsIFRpbWUgXG4gICAgcHVibGljIGR3ZWxsVGltZTogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTWluIFNwZWVkIGZpbHRlciAobW92aW5nIGluIGFuIGFyZWEsIGxpbmUgY3Jvc3NpbmcpIFxuICAgIHB1YmxpYyBtaW5TcGVlZDogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTnVtYmVyIG9mIHBlb3BsZSBJbiBHcm91cCAoZm9yIGdyb3VwaW5nIGFuZCBvY2N1cGFuY3kgcnVsZXMpIFxuICAgIHB1YmxpYyBwZW9wbGVJbkdyb3VwOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBNYXggZGlzdGFuY2UgYmV0d2VlbiBwZW9wbGUgdG8gYmUgY29uc2lkZXJlZCBhcyBncm91cCAoZm9yIEdyb3VwaW5nIHJ1bGUpIFxuICAgIHB1YmxpYyBjbHVzdGVyRGlzdGFuY2U6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIFRpbWUgaW50ZXJ2YWwgW3NlY29uZHNdIGJldHdlZW4gc3RhdGlzdGljcyByZXBvcnRzIChmb3Igc3RhdGlzdGljcyBydWxlcykgXG4gICAgcHVibGljIGludGVydmFsVGltZTogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gSXMgcmVmZXJlbmNlIGNyb3AgcmVxdWlyZWQgKGZvciBBc3NldCBQcm90ZWN0aW9uKSBcbiAgICBwdWJsaWMgcmVmZXJlbmNlQ3JvcDogYm9vbGVhbjtcbiBcbiAgICAvLyBBdmFpbGFibGUgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgb3JnYW5pemVkIGluIGhpZXJhcmNoeSBcbiAgICBwdWJsaWMgb2JqZWN0SGllcmFyY2h5OiBPYmplY3RUeXBlTm9kZVtdO1xuIFxuICAgIC8vIExpbWl0IHRoaXMgcnVsZSBvbiBzcGVjaWZpYyBzZW5zb3IgdHlwZXMgXG4gICAgcHVibGljIHNlbnNvclR5cGVzOiBTZW5zb3JUeXBlQ29kZVtdO1xuIFxuICAgIC8vIEV4dGVybmFsIG1vZGVsIElkIHVzZWQgYnkgdGhlIHJ1bGUgXG4gICAgcHVibGljIGV4dGVybmFsTW9kZWw6IHN0cmluZztcbiBcbiAgICAvLyBMaW1pdCB0aGlzIHJ1bGUgb24gc3BlY2lmaWMgdmlldyB0eXBlcyBcbiAgICBwdWJsaWMgdmlld1R5cGVzOiBWaWV3VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBFeGNsdWRlZCBvYmplY3QgdHlwZXMgZm9yIHRoaXMgcnVsZSBcbiAgICBwdWJsaWMgZXhjbHVkZU9iamVjdFR5cGVzOiBPYmplY3RUeXBlQ29kZVtdO1xuIFxuICAgIC8vIFJ1bGUncyBhdXRvIHNlbnNpdGl2aXR5IFxuICAgIHB1YmxpYyBhdXRvU2Vuc2l0aXZpdHk6IFJ1bGVBdXRvU2Vuc2l0aXZpdHlDb2RlO1xuIFxuICAgIGNvbnN0cnVjdG9yKGJlaGF2aW9yVHlwZT86IEJlaGF2aW9yVHlwZUNvZGUsIHJ1bGVUeXBlTmFtZT86IHN0cmluZywgb2JqZWN0VHlwZXM/OiBPYmplY3RUeXBlQ29kZVtdLCBpc0xpbmVEcmF3aW5nPzogYm9vbGVhbiwgZHdlbGxUaW1lPzogUnVsZURlZmF1bHQsIG1pblNwZWVkPzogUnVsZURlZmF1bHQsIHBlb3BsZUluR3JvdXA/OiBSdWxlRGVmYXVsdCwgY2x1c3RlckRpc3RhbmNlPzogUnVsZURlZmF1bHQsIGludGVydmFsVGltZT86IFJ1bGVEZWZhdWx0LCByZWZlcmVuY2VDcm9wPzogYm9vbGVhbiwgb2JqZWN0SGllcmFyY2h5PzogT2JqZWN0VHlwZU5vZGVbXSwgc2Vuc29yVHlwZXM/OiBTZW5zb3JUeXBlQ29kZVtdLCBleHRlcm5hbE1vZGVsPzogc3RyaW5nLCB2aWV3VHlwZXM/OiBWaWV3VHlwZUNvZGVbXSwgZXhjbHVkZU9iamVjdFR5cGVzPzogT2JqZWN0VHlwZUNvZGVbXSwgYXV0b1NlbnNpdGl2aXR5PzogUnVsZUF1dG9TZW5zaXRpdml0eUNvZGUpIHsgXG4gICAgICAgIHRoaXMuYmVoYXZpb3JUeXBlID0gYmVoYXZpb3JUeXBlO1xuICAgICAgICB0aGlzLnJ1bGVUeXBlTmFtZSA9IHJ1bGVUeXBlTmFtZTtcbiAgICAgICAgdGhpcy5vYmplY3RUeXBlcyA9IG9iamVjdFR5cGVzO1xuICAgICAgICB0aGlzLmlzTGluZURyYXdpbmcgPSBpc0xpbmVEcmF3aW5nO1xuICAgICAgICB0aGlzLmR3ZWxsVGltZSA9IGR3ZWxsVGltZTtcbiAgICAgICAgdGhpcy5taW5TcGVlZCA9IG1pblNwZWVkO1xuICAgICAgICB0aGlzLnBlb3BsZUluR3JvdXAgPSBwZW9wbGVJbkdyb3VwO1xuICAgICAgICB0aGlzLmNsdXN0ZXJEaXN0YW5jZSA9IGNsdXN0ZXJEaXN0YW5jZTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbFRpbWUgPSBpbnRlcnZhbFRpbWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlQ3JvcCA9IHJlZmVyZW5jZUNyb3A7XG4gICAgICAgIHRoaXMub2JqZWN0SGllcmFyY2h5ID0gb2JqZWN0SGllcmFyY2h5O1xuICAgICAgICB0aGlzLnNlbnNvclR5cGVzID0gc2Vuc29yVHlwZXM7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxNb2RlbCA9IGV4dGVybmFsTW9kZWw7XG4gICAgICAgIHRoaXMudmlld1R5cGVzID0gdmlld1R5cGVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVPYmplY3RUeXBlcyA9IGV4Y2x1ZGVPYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5hdXRvU2Vuc2l0aXZpdHkgPSBhdXRvU2Vuc2l0aXZpdHk7XG4gICAgfVxuXG59XG5cblxuIl19