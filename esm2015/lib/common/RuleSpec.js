/*
   Rule specification describe rule parameters
*/
export class RuleSpec {
    constructor(behaviorType, ruleTypeName, objectTypes, isLineDrawing, dwellTime, minSpeed, peopleInGroup, clusterDistance, intervalTime, referenceCrop, objectHierarchy, sensorTypes, externalModel, viewTypes, excludeObjectTypes, autoSensitivity, sensitivity) {
        this.behaviorType = behaviorType;
        this.ruleTypeName = ruleTypeName;
        this.objectTypes = objectTypes;
        this.isLineDrawing = isLineDrawing;
        this.dwellTime = dwellTime;
        this.minSpeed = minSpeed;
        this.peopleInGroup = peopleInGroup;
        this.clusterDistance = clusterDistance;
        this.intervalTime = intervalTime;
        this.referenceCrop = referenceCrop;
        this.objectHierarchy = objectHierarchy;
        this.sensorTypes = sensorTypes;
        this.externalModel = externalModel;
        this.viewTypes = viewTypes;
        this.excludeObjectTypes = excludeObjectTypes;
        this.autoSensitivity = autoSensitivity;
        this.sensitivity = sensitivity;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvbGliL2NvbW1vbi9SdWxlU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQTs7RUFFRTtBQUNGLE1BQU0sT0FBTyxRQUFRO0lBcURqQixZQUFZLFlBQStCLEVBQUUsWUFBcUIsRUFBRSxXQUE4QixFQUFFLGFBQXVCLEVBQUUsU0FBdUIsRUFBRSxRQUFzQixFQUFFLGFBQTJCLEVBQUUsZUFBNkIsRUFBRSxZQUEwQixFQUFFLGFBQXVCLEVBQUUsZUFBa0MsRUFBRSxXQUE4QixFQUFFLGFBQXNCLEVBQUUsU0FBMEIsRUFBRSxrQkFBcUMsRUFBRSxlQUEyQyxFQUFFLFdBQW9DO1FBQzNnQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDbkMsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBWaWV3VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9WaWV3VHlwZUNvZGUnO1xuaW1wb3J0IHsgUnVsZUF1dG9TZW5zaXRpdml0eUNvZGUgfSBmcm9tICcuLi9lbnVtcy9SdWxlQXV0b1NlbnNpdGl2aXR5Q29kZSc7XG5pbXBvcnQgeyBSdWxlRGVmYXVsdFNlbnNpdGl2aXR5IH0gZnJvbSAnLi4vY29tbW9uL1J1bGVEZWZhdWx0U2Vuc2l0aXZpdHknO1xuaW1wb3J0IHsgQmVoYXZpb3JUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL0JlaGF2aW9yVHlwZUNvZGUnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9PYmplY3RUeXBlQ29kZSc7XG5pbXBvcnQgeyBSdWxlRGVmYXVsdCB9IGZyb20gJy4uL2NvbW1vbi9SdWxlRGVmYXVsdCc7XG5pbXBvcnQgeyBPYmplY3RUeXBlTm9kZSB9IGZyb20gJy4uL2NvbW1vbi9PYmplY3RUeXBlTm9kZSc7XG5cbi8qIFxuICAgUnVsZSBzcGVjaWZpY2F0aW9uIGRlc2NyaWJlIHJ1bGUgcGFyYW1ldGVycyBcbiovXG5leHBvcnQgY2xhc3MgUnVsZVNwZWMge1xuIFxuICAgIC8vIEJlaGF2aW9yIHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIGJlaGF2aW9yVHlwZTogQmVoYXZpb3JUeXBlQ29kZTtcbiBcbiAgICAvLyBSdWxlIHR5cGUgbmFtZSBcbiAgICBwdWJsaWMgcnVsZVR5cGVOYW1lOiBzdHJpbmc7XG4gXG4gICAgLy8gQXZhaWxhYmxlIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIFxuICAgIHB1YmxpYyBvYmplY3RUeXBlczogT2JqZWN0VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBJcyB0aGlzIHJ1bGUgcmVxdWlyZXMgbGluZSBkcmF3aW5nICh0cnVlKSBvciBhcmVhIGRyYXdpbmcgKGZhbHNlKSBcbiAgICBwdWJsaWMgaXNMaW5lRHJhd2luZzogYm9vbGVhbjtcbiBcbiAgICAvLyBEd2VsbCBUaW1lIFxuICAgIHB1YmxpYyBkd2VsbFRpbWU6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIE1pbiBTcGVlZCBmaWx0ZXIgKG1vdmluZyBpbiBhbiBhcmVhLCBsaW5lIGNyb3NzaW5nKSBcbiAgICBwdWJsaWMgbWluU3BlZWQ6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIE51bWJlciBvZiBwZW9wbGUgSW4gR3JvdXAgKGZvciBncm91cGluZyBhbmQgb2NjdXBhbmN5IHJ1bGVzKSBcbiAgICBwdWJsaWMgcGVvcGxlSW5Hcm91cDogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTWF4IGRpc3RhbmNlIGJldHdlZW4gcGVvcGxlIHRvIGJlIGNvbnNpZGVyZWQgYXMgZ3JvdXAgKGZvciBHcm91cGluZyBydWxlKSBcbiAgICBwdWJsaWMgY2x1c3RlckRpc3RhbmNlOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBUaW1lIGludGVydmFsIFtzZWNvbmRzXSBiZXR3ZWVuIHN0YXRpc3RpY3MgcmVwb3J0cyAoZm9yIHN0YXRpc3RpY3MgcnVsZXMpIFxuICAgIHB1YmxpYyBpbnRlcnZhbFRpbWU6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIElzIHJlZmVyZW5jZSBjcm9wIHJlcXVpcmVkIChmb3IgQXNzZXQgUHJvdGVjdGlvbikgXG4gICAgcHVibGljIHJlZmVyZW5jZUNyb3A6IGJvb2xlYW47XG4gXG4gICAgLy8gQXZhaWxhYmxlIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIG9yZ2FuaXplZCBpbiBoaWVyYXJjaHkgXG4gICAgcHVibGljIG9iamVjdEhpZXJhcmNoeTogT2JqZWN0VHlwZU5vZGVbXTtcbiBcbiAgICAvLyBMaW1pdCB0aGlzIHJ1bGUgb24gc3BlY2lmaWMgc2Vuc29yIHR5cGVzIFxuICAgIHB1YmxpYyBzZW5zb3JUeXBlczogU2Vuc29yVHlwZUNvZGVbXTtcbiBcbiAgICAvLyBFeHRlcm5hbCBtb2RlbCBJZCB1c2VkIGJ5IHRoZSBydWxlIFxuICAgIHB1YmxpYyBleHRlcm5hbE1vZGVsOiBzdHJpbmc7XG4gXG4gICAgLy8gTGltaXQgdGhpcyBydWxlIG9uIHNwZWNpZmljIHZpZXcgdHlwZXMgXG4gICAgcHVibGljIHZpZXdUeXBlczogVmlld1R5cGVDb2RlW107XG4gXG4gICAgLy8gRXhjbHVkZWQgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIGV4Y2x1ZGVPYmplY3RUeXBlczogT2JqZWN0VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBSdWxlJ3MgYXV0byBzZW5zaXRpdml0eSBcbiAgICBwdWJsaWMgYXV0b1NlbnNpdGl2aXR5OiBSdWxlQXV0b1NlbnNpdGl2aXR5Q29kZVtdO1xuIFxuICAgIC8vIFNlbnNpdGl2aXR5IChmb3IgQW5vbWFseSBydWxlIG9ubHkpLCBkZWZpbmVzIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgZXZlbnRzIHBlciBkYXkgXG4gICAgcHVibGljIHNlbnNpdGl2aXR5OiBSdWxlRGVmYXVsdFNlbnNpdGl2aXR5O1xuIFxuICAgIGNvbnN0cnVjdG9yKGJlaGF2aW9yVHlwZT86IEJlaGF2aW9yVHlwZUNvZGUsIHJ1bGVUeXBlTmFtZT86IHN0cmluZywgb2JqZWN0VHlwZXM/OiBPYmplY3RUeXBlQ29kZVtdLCBpc0xpbmVEcmF3aW5nPzogYm9vbGVhbiwgZHdlbGxUaW1lPzogUnVsZURlZmF1bHQsIG1pblNwZWVkPzogUnVsZURlZmF1bHQsIHBlb3BsZUluR3JvdXA/OiBSdWxlRGVmYXVsdCwgY2x1c3RlckRpc3RhbmNlPzogUnVsZURlZmF1bHQsIGludGVydmFsVGltZT86IFJ1bGVEZWZhdWx0LCByZWZlcmVuY2VDcm9wPzogYm9vbGVhbiwgb2JqZWN0SGllcmFyY2h5PzogT2JqZWN0VHlwZU5vZGVbXSwgc2Vuc29yVHlwZXM/OiBTZW5zb3JUeXBlQ29kZVtdLCBleHRlcm5hbE1vZGVsPzogc3RyaW5nLCB2aWV3VHlwZXM/OiBWaWV3VHlwZUNvZGVbXSwgZXhjbHVkZU9iamVjdFR5cGVzPzogT2JqZWN0VHlwZUNvZGVbXSwgYXV0b1NlbnNpdGl2aXR5PzogUnVsZUF1dG9TZW5zaXRpdml0eUNvZGVbXSwgc2Vuc2l0aXZpdHk/OiBSdWxlRGVmYXVsdFNlbnNpdGl2aXR5KSB7IFxuICAgICAgICB0aGlzLmJlaGF2aW9yVHlwZSA9IGJlaGF2aW9yVHlwZTtcbiAgICAgICAgdGhpcy5ydWxlVHlwZU5hbWUgPSBydWxlVHlwZU5hbWU7XG4gICAgICAgIHRoaXMub2JqZWN0VHlwZXMgPSBvYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5pc0xpbmVEcmF3aW5nID0gaXNMaW5lRHJhd2luZztcbiAgICAgICAgdGhpcy5kd2VsbFRpbWUgPSBkd2VsbFRpbWU7XG4gICAgICAgIHRoaXMubWluU3BlZWQgPSBtaW5TcGVlZDtcbiAgICAgICAgdGhpcy5wZW9wbGVJbkdyb3VwID0gcGVvcGxlSW5Hcm91cDtcbiAgICAgICAgdGhpcy5jbHVzdGVyRGlzdGFuY2UgPSBjbHVzdGVyRGlzdGFuY2U7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxUaW1lID0gaW50ZXJ2YWxUaW1lO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZUNyb3AgPSByZWZlcmVuY2VDcm9wO1xuICAgICAgICB0aGlzLm9iamVjdEhpZXJhcmNoeSA9IG9iamVjdEhpZXJhcmNoeTtcbiAgICAgICAgdGhpcy5zZW5zb3JUeXBlcyA9IHNlbnNvclR5cGVzO1xuICAgICAgICB0aGlzLmV4dGVybmFsTW9kZWwgPSBleHRlcm5hbE1vZGVsO1xuICAgICAgICB0aGlzLnZpZXdUeXBlcyA9IHZpZXdUeXBlcztcbiAgICAgICAgdGhpcy5leGNsdWRlT2JqZWN0VHlwZXMgPSBleGNsdWRlT2JqZWN0VHlwZXM7XG4gICAgICAgIHRoaXMuYXV0b1NlbnNpdGl2aXR5ID0gYXV0b1NlbnNpdGl2aXR5O1xuICAgICAgICB0aGlzLnNlbnNpdGl2aXR5ID0gc2Vuc2l0aXZpdHk7XG4gICAgfVxuXG59XG5cblxuIl19