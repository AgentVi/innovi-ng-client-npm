/*
   Rule specification describe rule parameters
*/
export class RuleSpec {
    constructor(behaviorType, ruleTypeName, objectTypes, isLineDrawing, dwellTime, minSpeed, peopleInGroup, clusterDistance, referenceCrop, objectHierarchy, sensorTypes, externalModel, viewTypes, excludeObjectTypes, autoSensitivity, sensitivity, existsInWatchlist) {
        this.behaviorType = behaviorType;
        this.ruleTypeName = ruleTypeName;
        this.objectTypes = objectTypes;
        this.isLineDrawing = isLineDrawing;
        this.dwellTime = dwellTime;
        this.minSpeed = minSpeed;
        this.peopleInGroup = peopleInGroup;
        this.clusterDistance = clusterDistance;
        this.referenceCrop = referenceCrop;
        this.objectHierarchy = objectHierarchy;
        this.sensorTypes = sensorTypes;
        this.externalModel = externalModel;
        this.viewTypes = viewTypes;
        this.excludeObjectTypes = excludeObjectTypes;
        this.autoSensitivity = autoSensitivity;
        this.sensitivity = sensitivity;
        this.existsInWatchlist = existsInWatchlist;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvbGliL2NvbW1vbi9SdWxlU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQTs7RUFFRTtBQUNGLE1BQU0sT0FBTyxRQUFRO0lBcURqQixZQUFZLFlBQStCLEVBQUUsWUFBcUIsRUFBRSxXQUE4QixFQUFFLGFBQXVCLEVBQUUsU0FBdUIsRUFBRSxRQUFzQixFQUFFLGFBQTJCLEVBQUUsZUFBNkIsRUFBRSxhQUF1QixFQUFFLGVBQWtDLEVBQUUsV0FBOEIsRUFBRSxhQUFzQixFQUFFLFNBQTBCLEVBQUUsa0JBQXFDLEVBQUUsZUFBMkMsRUFBRSxXQUFvQyxFQUFFLGlCQUE2QjtRQUM5Z0IsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBQzdDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztJQUMvQyxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdWxlRGVmYXVsdCB9IGZyb20gJy4uL2NvbW1vbi9SdWxlRGVmYXVsdCc7XG5pbXBvcnQgeyBPYmplY3RUeXBlTm9kZSB9IGZyb20gJy4uL2NvbW1vbi9PYmplY3RUeXBlTm9kZSc7XG5pbXBvcnQgeyBTZW5zb3JUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1NlbnNvclR5cGVDb2RlJztcbmltcG9ydCB7IFZpZXdUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1ZpZXdUeXBlQ29kZSc7XG5pbXBvcnQgeyBSdWxlQXV0b1NlbnNpdGl2aXR5Q29kZSB9IGZyb20gJy4uL2VudW1zL1J1bGVBdXRvU2Vuc2l0aXZpdHlDb2RlJztcbmltcG9ydCB7IFJ1bGVEZWZhdWx0U2Vuc2l0aXZpdHkgfSBmcm9tICcuLi9jb21tb24vUnVsZURlZmF1bHRTZW5zaXRpdml0eSc7XG5pbXBvcnQgeyBCZWhhdmlvclR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvQmVoYXZpb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBPYmplY3RUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL09iamVjdFR5cGVDb2RlJztcblxuLyogXG4gICBSdWxlIHNwZWNpZmljYXRpb24gZGVzY3JpYmUgcnVsZSBwYXJhbWV0ZXJzIFxuKi9cbmV4cG9ydCBjbGFzcyBSdWxlU3BlYyB7XG4gXG4gICAgLy8gQmVoYXZpb3IgdHlwZXMgZm9yIHRoaXMgcnVsZSBcbiAgICBwdWJsaWMgYmVoYXZpb3JUeXBlOiBCZWhhdmlvclR5cGVDb2RlO1xuIFxuICAgIC8vIFJ1bGUgdHlwZSBuYW1lIFxuICAgIHB1YmxpYyBydWxlVHlwZU5hbWU6IHN0cmluZztcbiBcbiAgICAvLyBBdmFpbGFibGUgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIG9iamVjdFR5cGVzOiBPYmplY3RUeXBlQ29kZVtdO1xuIFxuICAgIC8vIElzIHRoaXMgcnVsZSByZXF1aXJlcyBsaW5lIGRyYXdpbmcgKHRydWUpIG9yIGFyZWEgZHJhd2luZyAoZmFsc2UpIFxuICAgIHB1YmxpYyBpc0xpbmVEcmF3aW5nOiBib29sZWFuO1xuIFxuICAgIC8vIER3ZWxsIFRpbWUgXG4gICAgcHVibGljIGR3ZWxsVGltZTogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTWluIFNwZWVkIGZpbHRlciAobW92aW5nIGluIGFuIGFyZWEsIGxpbmUgY3Jvc3NpbmcpIFxuICAgIHB1YmxpYyBtaW5TcGVlZDogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gTnVtYmVyIG9mIHBlb3BsZSBJbiBHcm91cCAoZm9yIGdyb3VwaW5nIGFuZCBvY2N1cGFuY3kgcnVsZXMpIFxuICAgIHB1YmxpYyBwZW9wbGVJbkdyb3VwOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBNYXggZGlzdGFuY2UgYmV0d2VlbiBwZW9wbGUgdG8gYmUgY29uc2lkZXJlZCBhcyBncm91cCAoZm9yIEdyb3VwaW5nIHJ1bGUpIFxuICAgIHB1YmxpYyBjbHVzdGVyRGlzdGFuY2U6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIElzIHJlZmVyZW5jZSBjcm9wIHJlcXVpcmVkIChmb3IgQXNzZXQgUHJvdGVjdGlvbikgXG4gICAgcHVibGljIHJlZmVyZW5jZUNyb3A6IGJvb2xlYW47XG4gXG4gICAgLy8gQXZhaWxhYmxlIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIG9yZ2FuaXplZCBpbiBoaWVyYXJjaHkgXG4gICAgcHVibGljIG9iamVjdEhpZXJhcmNoeTogT2JqZWN0VHlwZU5vZGVbXTtcbiBcbiAgICAvLyBMaW1pdCB0aGlzIHJ1bGUgb24gc3BlY2lmaWMgc2Vuc29yIHR5cGVzIFxuICAgIHB1YmxpYyBzZW5zb3JUeXBlczogU2Vuc29yVHlwZUNvZGVbXTtcbiBcbiAgICAvLyBFeHRlcm5hbCBtb2RlbCBJZCB1c2VkIGJ5IHRoZSBydWxlIFxuICAgIHB1YmxpYyBleHRlcm5hbE1vZGVsOiBzdHJpbmc7XG4gXG4gICAgLy8gTGltaXQgdGhpcyBydWxlIG9uIHNwZWNpZmljIHZpZXcgdHlwZXMgXG4gICAgcHVibGljIHZpZXdUeXBlczogVmlld1R5cGVDb2RlW107XG4gXG4gICAgLy8gRXhjbHVkZWQgb2JqZWN0IHR5cGVzIGZvciB0aGlzIHJ1bGUgXG4gICAgcHVibGljIGV4Y2x1ZGVPYmplY3RUeXBlczogT2JqZWN0VHlwZUNvZGVbXTtcbiBcbiAgICAvLyBSdWxlJ3MgYXV0byBzZW5zaXRpdml0eSBcbiAgICBwdWJsaWMgYXV0b1NlbnNpdGl2aXR5OiBSdWxlQXV0b1NlbnNpdGl2aXR5Q29kZVtdO1xuIFxuICAgIC8vIFNlbnNpdGl2aXR5IChmb3IgQW5vbWFseSBydWxlIG9ubHkpLCBkZWZpbmVzIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgZXZlbnRzIHBlciBkYXkgXG4gICAgcHVibGljIHNlbnNpdGl2aXR5OiBSdWxlRGVmYXVsdFNlbnNpdGl2aXR5O1xuIFxuICAgIC8vIFVzZWQgaW4gY29uanVjdGlvbiB3aXRoIFdhdGNoTGlzdElkIHRvIGluZGljYXRlIGlmIHRoaXMgcnVsZSBzaG91bGQgdHJpZ2dlciBpZiB0aGUgb2JqZWN0IGlzIGZvdW5kIGluIHRoZSB3YXRjaGxpc3Qgb3Igbm90LiBBZGRlZCBmb3IgTUhBIFxuICAgIHB1YmxpYyBleGlzdHNJbldhdGNobGlzdDogYm9vbGVhbltdO1xuIFxuICAgIGNvbnN0cnVjdG9yKGJlaGF2aW9yVHlwZT86IEJlaGF2aW9yVHlwZUNvZGUsIHJ1bGVUeXBlTmFtZT86IHN0cmluZywgb2JqZWN0VHlwZXM/OiBPYmplY3RUeXBlQ29kZVtdLCBpc0xpbmVEcmF3aW5nPzogYm9vbGVhbiwgZHdlbGxUaW1lPzogUnVsZURlZmF1bHQsIG1pblNwZWVkPzogUnVsZURlZmF1bHQsIHBlb3BsZUluR3JvdXA/OiBSdWxlRGVmYXVsdCwgY2x1c3RlckRpc3RhbmNlPzogUnVsZURlZmF1bHQsIHJlZmVyZW5jZUNyb3A/OiBib29sZWFuLCBvYmplY3RIaWVyYXJjaHk/OiBPYmplY3RUeXBlTm9kZVtdLCBzZW5zb3JUeXBlcz86IFNlbnNvclR5cGVDb2RlW10sIGV4dGVybmFsTW9kZWw/OiBzdHJpbmcsIHZpZXdUeXBlcz86IFZpZXdUeXBlQ29kZVtdLCBleGNsdWRlT2JqZWN0VHlwZXM/OiBPYmplY3RUeXBlQ29kZVtdLCBhdXRvU2Vuc2l0aXZpdHk/OiBSdWxlQXV0b1NlbnNpdGl2aXR5Q29kZVtdLCBzZW5zaXRpdml0eT86IFJ1bGVEZWZhdWx0U2Vuc2l0aXZpdHksIGV4aXN0c0luV2F0Y2hsaXN0PzogYm9vbGVhbltdKSB7IFxuICAgICAgICB0aGlzLmJlaGF2aW9yVHlwZSA9IGJlaGF2aW9yVHlwZTtcbiAgICAgICAgdGhpcy5ydWxlVHlwZU5hbWUgPSBydWxlVHlwZU5hbWU7XG4gICAgICAgIHRoaXMub2JqZWN0VHlwZXMgPSBvYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5pc0xpbmVEcmF3aW5nID0gaXNMaW5lRHJhd2luZztcbiAgICAgICAgdGhpcy5kd2VsbFRpbWUgPSBkd2VsbFRpbWU7XG4gICAgICAgIHRoaXMubWluU3BlZWQgPSBtaW5TcGVlZDtcbiAgICAgICAgdGhpcy5wZW9wbGVJbkdyb3VwID0gcGVvcGxlSW5Hcm91cDtcbiAgICAgICAgdGhpcy5jbHVzdGVyRGlzdGFuY2UgPSBjbHVzdGVyRGlzdGFuY2U7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlQ3JvcCA9IHJlZmVyZW5jZUNyb3A7XG4gICAgICAgIHRoaXMub2JqZWN0SGllcmFyY2h5ID0gb2JqZWN0SGllcmFyY2h5O1xuICAgICAgICB0aGlzLnNlbnNvclR5cGVzID0gc2Vuc29yVHlwZXM7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxNb2RlbCA9IGV4dGVybmFsTW9kZWw7XG4gICAgICAgIHRoaXMudmlld1R5cGVzID0gdmlld1R5cGVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVPYmplY3RUeXBlcyA9IGV4Y2x1ZGVPYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5hdXRvU2Vuc2l0aXZpdHkgPSBhdXRvU2Vuc2l0aXZpdHk7XG4gICAgICAgIHRoaXMuc2Vuc2l0aXZpdHkgPSBzZW5zaXRpdml0eTtcbiAgICAgICAgdGhpcy5leGlzdHNJbldhdGNobGlzdCA9IGV4aXN0c0luV2F0Y2hsaXN0O1xuICAgIH1cblxufVxuXG5cbiJdfQ==