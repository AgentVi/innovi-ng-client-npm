/*
   Rule specification describe rule parameters
*/
export class RuleSpec {
    constructor(behaviorType, ruleTypeName, objectTypes, isLineDrawing, dwellTime, minSpeed, peopleInGroup, clusterDistance, intervalTime, referenceCrop, objectHierarchy, sensorTypes, externalModel, viewTypes, excludeObjectTypes, autoSensitivity, sensitivity, existsInWatchlist) {
        this.behaviorType = behaviorType;
        this.ruleTypeName = ruleTypeName;
        this.objectTypes = objectTypes;
        this.isLineDrawing = isLineDrawing;
        this.dwellTime = dwellTime;
        this.minSpeed = minSpeed;
        this.peopleInGroup = peopleInGroup;
        this.clusterDistance = clusterDistance;
        this.intervalTime = intervalTime;
        this.referenceCrop = referenceCrop;
        this.objectHierarchy = objectHierarchy;
        this.sensorTypes = sensorTypes;
        this.externalModel = externalModel;
        this.viewTypes = viewTypes;
        this.excludeObjectTypes = excludeObjectTypes;
        this.autoSensitivity = autoSensitivity;
        this.sensitivity = sensitivity;
        this.existsInWatchlist = existsInWatchlist;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvbGliL2NvbW1vbi9SdWxlU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQTs7RUFFRTtBQUNGLE1BQU0sT0FBTyxRQUFRO0lBd0RqQixZQUFZLFlBQStCLEVBQUUsWUFBcUIsRUFBRSxXQUE4QixFQUFFLGFBQXVCLEVBQUUsU0FBdUIsRUFBRSxRQUFzQixFQUFFLGFBQTJCLEVBQUUsZUFBNkIsRUFBRSxZQUEwQixFQUFFLGFBQXVCLEVBQUUsZUFBa0MsRUFBRSxXQUE4QixFQUFFLGFBQXNCLEVBQUUsU0FBMEIsRUFBRSxrQkFBcUMsRUFBRSxlQUEyQyxFQUFFLFdBQW9DLEVBQUUsaUJBQTZCO1FBQzFpQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0lBQy9DLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9CZWhhdmlvclR5cGVDb2RlJztcbmltcG9ydCB7IE9iamVjdFR5cGVDb2RlIH0gZnJvbSAnLi4vZW51bXMvT2JqZWN0VHlwZUNvZGUnO1xuaW1wb3J0IHsgUnVsZURlZmF1bHQgfSBmcm9tICcuLi9jb21tb24vUnVsZURlZmF1bHQnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZU5vZGUgfSBmcm9tICcuLi9jb21tb24vT2JqZWN0VHlwZU5vZGUnO1xuaW1wb3J0IHsgU2Vuc29yVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9TZW5zb3JUeXBlQ29kZSc7XG5pbXBvcnQgeyBWaWV3VHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9WaWV3VHlwZUNvZGUnO1xuaW1wb3J0IHsgUnVsZUF1dG9TZW5zaXRpdml0eUNvZGUgfSBmcm9tICcuLi9lbnVtcy9SdWxlQXV0b1NlbnNpdGl2aXR5Q29kZSc7XG5pbXBvcnQgeyBSdWxlRGVmYXVsdFNlbnNpdGl2aXR5IH0gZnJvbSAnLi4vY29tbW9uL1J1bGVEZWZhdWx0U2Vuc2l0aXZpdHknO1xuXG4vKiBcbiAgIFJ1bGUgc3BlY2lmaWNhdGlvbiBkZXNjcmliZSBydWxlIHBhcmFtZXRlcnMgXG4qL1xuZXhwb3J0IGNsYXNzIFJ1bGVTcGVjIHtcbiBcbiAgICAvLyBCZWhhdmlvciB0eXBlcyBmb3IgdGhpcyBydWxlIFxuICAgIHB1YmxpYyBiZWhhdmlvclR5cGU6IEJlaGF2aW9yVHlwZUNvZGU7XG4gXG4gICAgLy8gUnVsZSB0eXBlIG5hbWUgXG4gICAgcHVibGljIHJ1bGVUeXBlTmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIEF2YWlsYWJsZSBvYmplY3QgdHlwZXMgZm9yIHRoaXMgcnVsZSBcbiAgICBwdWJsaWMgb2JqZWN0VHlwZXM6IE9iamVjdFR5cGVDb2RlW107XG4gXG4gICAgLy8gSXMgdGhpcyBydWxlIHJlcXVpcmVzIGxpbmUgZHJhd2luZyAodHJ1ZSkgb3IgYXJlYSBkcmF3aW5nIChmYWxzZSkgXG4gICAgcHVibGljIGlzTGluZURyYXdpbmc6IGJvb2xlYW47XG4gXG4gICAgLy8gRHdlbGwgVGltZSBcbiAgICBwdWJsaWMgZHdlbGxUaW1lOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBNaW4gU3BlZWQgZmlsdGVyIChtb3ZpbmcgaW4gYW4gYXJlYSwgbGluZSBjcm9zc2luZykgXG4gICAgcHVibGljIG1pblNwZWVkOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBOdW1iZXIgb2YgcGVvcGxlIEluIEdyb3VwIChmb3IgZ3JvdXBpbmcgYW5kIG9jY3VwYW5jeSBydWxlcykgXG4gICAgcHVibGljIHBlb3BsZUluR3JvdXA6IFJ1bGVEZWZhdWx0O1xuIFxuICAgIC8vIE1heCBkaXN0YW5jZSBiZXR3ZWVuIHBlb3BsZSB0byBiZSBjb25zaWRlcmVkIGFzIGdyb3VwIChmb3IgR3JvdXBpbmcgcnVsZSkgXG4gICAgcHVibGljIGNsdXN0ZXJEaXN0YW5jZTogUnVsZURlZmF1bHQ7XG4gXG4gICAgLy8gVGltZSBpbnRlcnZhbCBbc2Vjb25kc10gYmV0d2VlbiBzdGF0aXN0aWNzIHJlcG9ydHMgKGZvciBzdGF0aXN0aWNzIHJ1bGVzKSBcbiAgICBwdWJsaWMgaW50ZXJ2YWxUaW1lOiBSdWxlRGVmYXVsdDtcbiBcbiAgICAvLyBJcyByZWZlcmVuY2UgY3JvcCByZXF1aXJlZCAoZm9yIEFzc2V0IFByb3RlY3Rpb24pIFxuICAgIHB1YmxpYyByZWZlcmVuY2VDcm9wOiBib29sZWFuO1xuIFxuICAgIC8vIEF2YWlsYWJsZSBvYmplY3QgdHlwZXMgZm9yIHRoaXMgcnVsZSBvcmdhbml6ZWQgaW4gaGllcmFyY2h5IFxuICAgIHB1YmxpYyBvYmplY3RIaWVyYXJjaHk6IE9iamVjdFR5cGVOb2RlW107XG4gXG4gICAgLy8gTGltaXQgdGhpcyBydWxlIG9uIHNwZWNpZmljIHNlbnNvciB0eXBlcyBcbiAgICBwdWJsaWMgc2Vuc29yVHlwZXM6IFNlbnNvclR5cGVDb2RlW107XG4gXG4gICAgLy8gRXh0ZXJuYWwgbW9kZWwgSWQgdXNlZCBieSB0aGUgcnVsZSBcbiAgICBwdWJsaWMgZXh0ZXJuYWxNb2RlbDogc3RyaW5nO1xuIFxuICAgIC8vIExpbWl0IHRoaXMgcnVsZSBvbiBzcGVjaWZpYyB2aWV3IHR5cGVzIFxuICAgIHB1YmxpYyB2aWV3VHlwZXM6IFZpZXdUeXBlQ29kZVtdO1xuIFxuICAgIC8vIEV4Y2x1ZGVkIG9iamVjdCB0eXBlcyBmb3IgdGhpcyBydWxlIFxuICAgIHB1YmxpYyBleGNsdWRlT2JqZWN0VHlwZXM6IE9iamVjdFR5cGVDb2RlW107XG4gXG4gICAgLy8gUnVsZSdzIGF1dG8gc2Vuc2l0aXZpdHkgXG4gICAgcHVibGljIGF1dG9TZW5zaXRpdml0eTogUnVsZUF1dG9TZW5zaXRpdml0eUNvZGVbXTtcbiBcbiAgICAvLyBTZW5zaXRpdml0eSAoZm9yIEFub21hbHkgcnVsZSBvbmx5KSwgZGVmaW5lcyB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIGV2ZW50cyBwZXIgZGF5IFxuICAgIHB1YmxpYyBzZW5zaXRpdml0eTogUnVsZURlZmF1bHRTZW5zaXRpdml0eTtcbiBcbiAgICAvLyBVc2VkIGluIGNvbmp1Y3Rpb24gd2l0aCBXYXRjaExpc3RJZCB0byBpbmRpY2F0ZSBpZiB0aGlzIHJ1bGUgc2hvdWxkIHRyaWdnZXIgaWYgdGhlIG9iamVjdCBpcyBmb3VuZCBpbiB0aGUgd2F0Y2hsaXN0IG9yIG5vdC4gQWRkZWQgZm9yIE1IQSBcbiAgICBwdWJsaWMgZXhpc3RzSW5XYXRjaGxpc3Q6IGJvb2xlYW5bXTtcbiBcbiAgICBjb25zdHJ1Y3RvcihiZWhhdmlvclR5cGU/OiBCZWhhdmlvclR5cGVDb2RlLCBydWxlVHlwZU5hbWU/OiBzdHJpbmcsIG9iamVjdFR5cGVzPzogT2JqZWN0VHlwZUNvZGVbXSwgaXNMaW5lRHJhd2luZz86IGJvb2xlYW4sIGR3ZWxsVGltZT86IFJ1bGVEZWZhdWx0LCBtaW5TcGVlZD86IFJ1bGVEZWZhdWx0LCBwZW9wbGVJbkdyb3VwPzogUnVsZURlZmF1bHQsIGNsdXN0ZXJEaXN0YW5jZT86IFJ1bGVEZWZhdWx0LCBpbnRlcnZhbFRpbWU/OiBSdWxlRGVmYXVsdCwgcmVmZXJlbmNlQ3JvcD86IGJvb2xlYW4sIG9iamVjdEhpZXJhcmNoeT86IE9iamVjdFR5cGVOb2RlW10sIHNlbnNvclR5cGVzPzogU2Vuc29yVHlwZUNvZGVbXSwgZXh0ZXJuYWxNb2RlbD86IHN0cmluZywgdmlld1R5cGVzPzogVmlld1R5cGVDb2RlW10sIGV4Y2x1ZGVPYmplY3RUeXBlcz86IE9iamVjdFR5cGVDb2RlW10sIGF1dG9TZW5zaXRpdml0eT86IFJ1bGVBdXRvU2Vuc2l0aXZpdHlDb2RlW10sIHNlbnNpdGl2aXR5PzogUnVsZURlZmF1bHRTZW5zaXRpdml0eSwgZXhpc3RzSW5XYXRjaGxpc3Q/OiBib29sZWFuW10pIHsgXG4gICAgICAgIHRoaXMuYmVoYXZpb3JUeXBlID0gYmVoYXZpb3JUeXBlO1xuICAgICAgICB0aGlzLnJ1bGVUeXBlTmFtZSA9IHJ1bGVUeXBlTmFtZTtcbiAgICAgICAgdGhpcy5vYmplY3RUeXBlcyA9IG9iamVjdFR5cGVzO1xuICAgICAgICB0aGlzLmlzTGluZURyYXdpbmcgPSBpc0xpbmVEcmF3aW5nO1xuICAgICAgICB0aGlzLmR3ZWxsVGltZSA9IGR3ZWxsVGltZTtcbiAgICAgICAgdGhpcy5taW5TcGVlZCA9IG1pblNwZWVkO1xuICAgICAgICB0aGlzLnBlb3BsZUluR3JvdXAgPSBwZW9wbGVJbkdyb3VwO1xuICAgICAgICB0aGlzLmNsdXN0ZXJEaXN0YW5jZSA9IGNsdXN0ZXJEaXN0YW5jZTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbFRpbWUgPSBpbnRlcnZhbFRpbWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlQ3JvcCA9IHJlZmVyZW5jZUNyb3A7XG4gICAgICAgIHRoaXMub2JqZWN0SGllcmFyY2h5ID0gb2JqZWN0SGllcmFyY2h5O1xuICAgICAgICB0aGlzLnNlbnNvclR5cGVzID0gc2Vuc29yVHlwZXM7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxNb2RlbCA9IGV4dGVybmFsTW9kZWw7XG4gICAgICAgIHRoaXMudmlld1R5cGVzID0gdmlld1R5cGVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVPYmplY3RUeXBlcyA9IGV4Y2x1ZGVPYmplY3RUeXBlcztcbiAgICAgICAgdGhpcy5hdXRvU2Vuc2l0aXZpdHkgPSBhdXRvU2Vuc2l0aXZpdHk7XG4gICAgICAgIHRoaXMuc2Vuc2l0aXZpdHkgPSBzZW5zaXRpdml0eTtcbiAgICAgICAgdGhpcy5leGlzdHNJbldhdGNobGlzdCA9IGV4aXN0c0luV2F0Y2hsaXN0O1xuICAgIH1cblxufVxuXG5cbiJdfQ==