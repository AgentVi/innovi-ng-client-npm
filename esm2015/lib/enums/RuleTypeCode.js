/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RuleTypeCode = {
    // Undefined [0] 
    UNDEFINED: 0,
    // Crossing a Line (innoVi) [1] 
    INNOVI_RULE_CROSSING: 1,
    // Moving in an area (innoVi) [2] 
    INNOVI_RULE_MOVING: 2,
    // Stopped vehicle (innoVi) [4] 
    INNOVI_RULE_STOPPED: 4,
    // Occupancy (innoVi) [8] 
    INNOVI_RULE_OCCUPANCY: 8,
    // Grouping (innoVi) [16] 
    INNOVI_RULE_GROPPING: 16,
    // Anomaly (innoVi) [2048] 
    INNOVI_ANOMALY: 2048,
    // Hard hat custom rule (custom: Hard Hat) [4096] 
    CUSTOM_HARD_HAT: 4096,
    // Trash dumping custom rule (custom: Trash Dumping) [8192] 
    CUSTOM_TRASH: 8192,
    // MCC custom rules (custom: MCC) [16384] 
    CUSTOM_MCC: 16384,
};
export { RuleTypeCode };
RuleTypeCode[RuleTypeCode.UNDEFINED] = 'UNDEFINED';
RuleTypeCode[RuleTypeCode.INNOVI_RULE_CROSSING] = 'INNOVI_RULE_CROSSING';
RuleTypeCode[RuleTypeCode.INNOVI_RULE_MOVING] = 'INNOVI_RULE_MOVING';
RuleTypeCode[RuleTypeCode.INNOVI_RULE_STOPPED] = 'INNOVI_RULE_STOPPED';
RuleTypeCode[RuleTypeCode.INNOVI_RULE_OCCUPANCY] = 'INNOVI_RULE_OCCUPANCY';
RuleTypeCode[RuleTypeCode.INNOVI_RULE_GROPPING] = 'INNOVI_RULE_GROPPING';
RuleTypeCode[RuleTypeCode.INNOVI_ANOMALY] = 'INNOVI_ANOMALY';
RuleTypeCode[RuleTypeCode.CUSTOM_HARD_HAT] = 'CUSTOM_HARD_HAT';
RuleTypeCode[RuleTypeCode.CUSTOM_TRASH] = 'CUSTOM_TRASH';
RuleTypeCode[RuleTypeCode.CUSTOM_MCC] = 'CUSTOM_MCC';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZVR5cGVDb2RlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFnZW50dmkvbmctY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvZW51bXMvUnVsZVR5cGVDb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQU1JLGlCQUFpQjtJQUNqQixZQUFhO0lBRWIsZ0NBQWdDO0lBQ2hDLHVCQUF3QjtJQUV4QixrQ0FBa0M7SUFDbEMscUJBQXNCO0lBRXRCLGdDQUFnQztJQUNoQyxzQkFBdUI7SUFFdkIsMEJBQTBCO0lBQzFCLHdCQUF5QjtJQUV6QiwwQkFBMEI7SUFDMUIsd0JBQXlCO0lBRXpCLDJCQUEyQjtJQUMzQixvQkFBcUI7SUFFckIsa0RBQWtEO0lBQ2xELHFCQUFzQjtJQUV0Qiw0REFBNEQ7SUFDNUQsa0JBQW1CO0lBRW5CLDBDQUEwQztJQUMxQyxpQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBcbiAgIERldGVjdGlvbiBydWxlIHR5cGUgY29kZVxuICAgVmFsdWVzIHdpdGggSU5OT1ZJIHByZWZpeCByZXByZXNlbnRzIHN0YW5kYXJkIGlubm9WaSBydWxlcywgYWxsIG90aGVyIHZhbHVlcyByZXByZXNlbnQgY3VzdG9tIHJ1bGVzIFxuKi9cbmV4cG9ydCBlbnVtIFJ1bGVUeXBlQ29kZSB7XG4gXG4gICAgLy8gVW5kZWZpbmVkIFswXSBcbiAgICBVTkRFRklORUQgPSAwLFxuIFxuICAgIC8vIENyb3NzaW5nIGEgTGluZSAoaW5ub1ZpKSBbMV0gXG4gICAgSU5OT1ZJX1JVTEVfQ1JPU1NJTkcgPSAxLFxuIFxuICAgIC8vIE1vdmluZyBpbiBhbiBhcmVhIChpbm5vVmkpIFsyXSBcbiAgICBJTk5PVklfUlVMRV9NT1ZJTkcgPSAyLFxuIFxuICAgIC8vIFN0b3BwZWQgdmVoaWNsZSAoaW5ub1ZpKSBbNF0gXG4gICAgSU5OT1ZJX1JVTEVfU1RPUFBFRCA9IDQsXG4gXG4gICAgLy8gT2NjdXBhbmN5IChpbm5vVmkpIFs4XSBcbiAgICBJTk5PVklfUlVMRV9PQ0NVUEFOQ1kgPSA4LFxuIFxuICAgIC8vIEdyb3VwaW5nIChpbm5vVmkpIFsxNl0gXG4gICAgSU5OT1ZJX1JVTEVfR1JPUFBJTkcgPSAxNixcbiBcbiAgICAvLyBBbm9tYWx5IChpbm5vVmkpIFsyMDQ4XSBcbiAgICBJTk5PVklfQU5PTUFMWSA9IDIwNDgsXG4gXG4gICAgLy8gSGFyZCBoYXQgY3VzdG9tIHJ1bGUgKGN1c3RvbTogSGFyZCBIYXQpIFs0MDk2XSBcbiAgICBDVVNUT01fSEFSRF9IQVQgPSA0MDk2LFxuIFxuICAgIC8vIFRyYXNoIGR1bXBpbmcgY3VzdG9tIHJ1bGUgKGN1c3RvbTogVHJhc2ggRHVtcGluZykgWzgxOTJdIFxuICAgIENVU1RPTV9UUkFTSCA9IDgxOTIsXG4gXG4gICAgLy8gTUNDIGN1c3RvbSBydWxlcyAoY3VzdG9tOiBNQ0MpIFsxNjM4NF0gXG4gICAgQ1VTVE9NX01DQyA9IDE2Mzg0LFxuIFxufSJdfQ==